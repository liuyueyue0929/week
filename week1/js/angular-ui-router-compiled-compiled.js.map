{"version":3,"sources":["angular-ui-router-compiled.js"],"names":[],"mappings":"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","file":"angular-ui-router-compiled-compiled.js","sourcesContent":["/**\n * State-based routing for AngularJS\n * @version v0.4.2\n * @link http://angular-ui.github.com/\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n/* commonjs package manager support (eg componentjs) */\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports) {\n  module.exports = 'ui.router';\n}\n\n(function (window, angular, undefined) {\n  /*jshint globalstrict:true*/\n  /*global angular:false*/\n  'use strict';\n\n  var isDefined = angular.isDefined,\n      isFunction = angular.isFunction,\n      isString = angular.isString,\n      isObject = angular.isObject,\n      isArray = angular.isArray,\n      forEach = angular.forEach,\n      extend = angular.extend,\n      copy = angular.copy,\n      toJson = angular.toJson;\n\n  function inherit(parent, extra) {\n    return extend(new (extend(function () {}, { prototype: parent }))(), extra);\n  }\n\n  function merge(dst) {\n    forEach(arguments, function (obj) {\n      if (obj !== dst) {\n        forEach(obj, function (value, key) {\n          if (!dst.hasOwnProperty(key)) dst[key] = value;\n        });\n      }\n    });\n    return dst;\n  }\n\n  /**\n   * Finds the common ancestor path between two states.\n   *\n   * @param {Object} first The first state.\n   * @param {Object} second The second state.\n   * @return {Array} Returns an array of state names in descending order, not including the root.\n   */\n  function ancestors(first, second) {\n    var path = [];\n\n    for (var n in first.path) {\n      if (first.path[n] !== second.path[n]) break;\n      path.push(first.path[n]);\n    }\n    return path;\n  }\n\n  /**\n   * IE8-safe wrapper for `Object.keys()`.\n   *\n   * @param {Object} object A JavaScript object.\n   * @return {Array} Returns the keys of the object as an array.\n   */\n  function objectKeys(object) {\n    if (Object.keys) {\n      return Object.keys(object);\n    }\n    var result = [];\n\n    forEach(object, function (val, key) {\n      result.push(key);\n    });\n    return result;\n  }\n\n  /**\n   * IE8-safe wrapper for `Array.prototype.indexOf()`.\n   *\n   * @param {Array} array A JavaScript array.\n   * @param {*} value A value to search the array for.\n   * @return {Number} Returns the array index value of `value`, or `-1` if not present.\n   */\n  function indexOf(array, value) {\n    if (Array.prototype.indexOf) {\n      return array.indexOf(value, Number(arguments[2]) || 0);\n    }\n    var len = array.length >>> 0,\n        from = Number(arguments[2]) || 0;\n    from = from < 0 ? Math.ceil(from) : Math.floor(from);\n\n    if (from < 0) from += len;\n\n    for (; from < len; from++) {\n      if (from in array && array[from] === value) return from;\n    }\n    return -1;\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} currentParams The value of the current state parameters ($stateParams).\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  function inheritParams(currentParams, newParams, $current, $to) {\n    var parents = ancestors($current, $to),\n        parentParams,\n        inherited = {},\n        inheritList = [];\n\n    for (var i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = objectKeys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (var j in parentParams) {\n        if (indexOf(inheritList, parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = currentParams[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  }\n\n  /**\n   * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n   *\n   * @param {Object} a The first object.\n   * @param {Object} b The second object.\n   * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n   *                     it defaults to the list of keys in `a`.\n   * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n   */\n  function equalForKeys(a, b, keys) {\n    if (!keys) {\n      keys = [];\n      for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility\n    }\n\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i];\n      if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n    }\n    return true;\n  }\n\n  /**\n   * Returns the subset of an object, based on a list of keys.\n   *\n   * @param {Array} keys\n   * @param {Object} values\n   * @return {Boolean} Returns a subset of `values`.\n   */\n  function filterByKeys(keys, values) {\n    var filtered = {};\n\n    forEach(keys, function (name) {\n      filtered[name] = values[name];\n    });\n    return filtered;\n  }\n\n  // like _.indexBy\n  // when you know that your index values will be unique, or you want last-one-in to win\n  function indexBy(array, propName) {\n    var result = {};\n    forEach(array, function (item) {\n      result[item[propName]] = item;\n    });\n    return result;\n  }\n\n  // extracted from underscore.js\n  // Return a copy of the object only containing the whitelisted properties.\n  function pick(obj) {\n    var copy = {};\n    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n    forEach(keys, function (key) {\n      if (key in obj) copy[key] = obj[key];\n    });\n    return copy;\n  }\n\n  // extracted from underscore.js\n  // Return a copy of the object omitting the blacklisted properties.\n  function omit(obj) {\n    var copy = {};\n    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n    for (var key in obj) {\n      if (indexOf(keys, key) == -1) copy[key] = obj[key];\n    }\n    return copy;\n  }\n\n  function pluck(collection, key) {\n    var result = isArray(collection) ? [] : {};\n\n    forEach(collection, function (val, i) {\n      result[i] = isFunction(key) ? key(val) : val[key];\n    });\n    return result;\n  }\n\n  function filter(collection, callback) {\n    var array = isArray(collection);\n    var result = array ? [] : {};\n    forEach(collection, function (val, i) {\n      if (callback(val, i)) {\n        result[array ? result.length : i] = val;\n      }\n    });\n    return result;\n  }\n\n  function map(collection, callback) {\n    var result = isArray(collection) ? [] : {};\n\n    forEach(collection, function (val, i) {\n      result[i] = callback(val, i);\n    });\n    return result;\n  }\n\n  // issue #2676 #2889\n  function silenceUncaughtInPromise(promise) {\n    return promise.then(undefined, function () {}) && promise;\n  }\n\n  /**\n   * @ngdoc overview\n   * @name ui.router.util\n   *\n   * @description\n   * # ui.router.util sub-module\n   *\n   * This module is a dependency of other sub-modules. Do not include this module as a dependency\n   * in your angular app (use {@link ui.router} module instead).\n   *\n   */\n  angular.module('ui.router.util', ['ng']);\n\n  /**\n   * @ngdoc overview\n   * @name ui.router.router\n   * \n   * @requires ui.router.util\n   *\n   * @description\n   * # ui.router.router sub-module\n   *\n   * This module is a dependency of other sub-modules. Do not include this module as a dependency\n   * in your angular app (use {@link ui.router} module instead).\n   */\n  angular.module('ui.router.router', ['ui.router.util']);\n\n  /**\n   * @ngdoc overview\n   * @name ui.router.state\n   * \n   * @requires ui.router.router\n   * @requires ui.router.util\n   *\n   * @description\n   * # ui.router.state sub-module\n   *\n   * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n   * in your angular app (use {@link ui.router} module instead).\n   * \n   */\n  angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);\n\n  /**\n   * @ngdoc overview\n   * @name ui.router\n   *\n   * @requires ui.router.state\n   *\n   * @description\n   * # ui.router\n   * \n   * ## The main module for ui.router \n   * There are several sub-modules included with the ui.router module, however only this module is needed\n   * as a dependency within your angular app. The other modules are for organization purposes. \n   *\n   * The modules are:\n   * * ui.router - the main \"umbrella\" module\n   * * ui.router.router - \n   * \n   * *You'll need to include **only** this module as the dependency within your angular app.*\n   * \n   * <pre>\n   * <!doctype html>\n   * <html ng-app=\"myApp\">\n   * <head>\n   *   <script src=\"js/angular.js\"></script>\n   *   <!-- Include the ui-router script -->\n   *   <script src=\"js/angular-ui-router.min.js\"></script>\n   *   <script>\n   *     // ...and add 'ui.router' as a dependency\n   *     var myApp = angular.module('myApp', ['ui.router']);\n   *   </script>\n   * </head>\n   * <body>\n   * </body>\n   * </html>\n   * </pre>\n   */\n  angular.module('ui.router', ['ui.router.state']);\n\n  angular.module('ui.router.compat', ['ui.router']);\n\n  /**\n   * @ngdoc object\n   * @name ui.router.util.$resolve\n   *\n   * @requires $q\n   * @requires $injector\n   *\n   * @description\n   * Manages resolution of (acyclic) graphs of promises.\n   */\n  $Resolve.$inject = ['$q', '$injector'];\n  function $Resolve($q, $injector) {\n\n    var VISIT_IN_PROGRESS = 1,\n        VISIT_DONE = 2,\n        NOTHING = {},\n        NO_DEPENDENCIES = [],\n        NO_LOCALS = NOTHING,\n        NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$resolve#study\n     * @methodOf ui.router.util.$resolve\n     *\n     * @description\n     * Studies a set of invocables that are likely to be used multiple times.\n     * <pre>\n     * $resolve.study(invocables)(locals, parent, self)\n     * </pre>\n     * is equivalent to\n     * <pre>\n     * $resolve.resolve(invocables, locals, parent, self)\n     * </pre>\n     * but the former is more efficient (in fact `resolve` just calls `study` \n     * internally).\n     *\n     * @param {object} invocables Invocable objects\n     * @return {function} a function to pass in locals, parent and self\n     */\n    this.study = function (invocables) {\n      if (!isObject(invocables)) throw new Error(\"'invocables' must be an object\");\n      var invocableKeys = objectKeys(invocables || {});\n\n      // Perform a topological sort of invocables to build an ordered plan\n      var plan = [],\n          cycle = [],\n          visited = {};\n      function visit(value, key) {\n        if (visited[key] === VISIT_DONE) return;\n\n        cycle.push(key);\n        if (visited[key] === VISIT_IN_PROGRESS) {\n          cycle.splice(0, indexOf(cycle, key));\n          throw new Error(\"Cyclic dependency: \" + cycle.join(\" -> \"));\n        }\n        visited[key] = VISIT_IN_PROGRESS;\n\n        if (isString(value)) {\n          plan.push(key, [function () {\n            return $injector.get(value);\n          }], NO_DEPENDENCIES);\n        } else {\n          var params = $injector.annotate(value);\n          forEach(params, function (param) {\n            if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);\n          });\n          plan.push(key, value, params);\n        }\n\n        cycle.pop();\n        visited[key] = VISIT_DONE;\n      }\n      forEach(invocables, visit);\n      invocables = cycle = visited = null; // plan is all that's required\n\n      function isResolve(value) {\n        return isObject(value) && value.then && value.$$promises;\n      }\n\n      return function (locals, parent, self) {\n        if (isResolve(locals) && self === undefined) {\n          self = parent;parent = locals;locals = null;\n        }\n        if (!locals) locals = NO_LOCALS;else if (!isObject(locals)) {\n          throw new Error(\"'locals' must be an object\");\n        }\n        if (!parent) parent = NO_PARENT;else if (!isResolve(parent)) {\n          throw new Error(\"'parent' must be a promise returned by $resolve.resolve()\");\n        }\n\n        // To complete the overall resolution, we have to wait for the parent\n        // promise and for the promise for each invokable in our plan.\n        var resolution = $q.defer(),\n            result = silenceUncaughtInPromise(resolution.promise),\n            promises = result.$$promises = {},\n            values = extend({}, locals),\n            wait = 1 + plan.length / 3,\n            merged = false;\n\n        silenceUncaughtInPromise(result);\n\n        function done() {\n          // Merge parent values we haven't got yet and publish our own $$values\n          if (! --wait) {\n            if (!merged) merge(values, parent.$$values);\n            result.$$values = values;\n            result.$$promises = result.$$promises || true; // keep for isResolve()\n            delete result.$$inheritedValues;\n            resolution.resolve(values);\n          }\n        }\n\n        function fail(reason) {\n          result.$$failure = reason;\n          resolution.reject(reason);\n        }\n\n        // Short-circuit if parent has already failed\n        if (isDefined(parent.$$failure)) {\n          fail(parent.$$failure);\n          return result;\n        }\n\n        if (parent.$$inheritedValues) {\n          merge(values, omit(parent.$$inheritedValues, invocableKeys));\n        }\n\n        // Merge parent values if the parent has already resolved, or merge\n        // parent promises and wait if the parent resolve is still in progress.\n        extend(promises, parent.$$promises);\n        if (parent.$$values) {\n          merged = merge(values, omit(parent.$$values, invocableKeys));\n          result.$$inheritedValues = omit(parent.$$values, invocableKeys);\n          done();\n        } else {\n          if (parent.$$inheritedValues) {\n            result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);\n          }\n          parent.then(done, fail);\n        }\n\n        // Process each invocable in the plan, but ignore any where a local of the same name exists.\n        for (var i = 0, ii = plan.length; i < ii; i += 3) {\n          if (locals.hasOwnProperty(plan[i])) done();else invoke(plan[i], plan[i + 1], plan[i + 2]);\n        }\n\n        function invoke(key, invocable, params) {\n          // Create a deferred for this invocation. Failures will propagate to the resolution as well.\n          var invocation = $q.defer(),\n              waitParams = 0;\n          function onfailure(reason) {\n            invocation.reject(reason);\n            fail(reason);\n          }\n          // Wait for any parameter that we have a promise for (either from parent or from this\n          // resolve; in that case study() will have made sure it's ordered before us in the plan).\n          forEach(params, function (dep) {\n            if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {\n              waitParams++;\n              promises[dep].then(function (result) {\n                values[dep] = result;\n                if (! --waitParams) proceed();\n              }, onfailure);\n            }\n          });\n          if (!waitParams) proceed();\n          function proceed() {\n            if (isDefined(result.$$failure)) return;\n            try {\n              invocation.resolve($injector.invoke(invocable, self, values));\n              invocation.promise.then(function (result) {\n                values[key] = result;\n                done();\n              }, onfailure);\n            } catch (e) {\n              onfailure(e);\n            }\n          }\n          // Publish promise synchronously; invocations further down in the plan may depend on it.\n          promises[key] = silenceUncaughtInPromise(invocation.promise);\n        }\n\n        return result;\n      };\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$resolve#resolve\n     * @methodOf ui.router.util.$resolve\n     *\n     * @description\n     * Resolves a set of invocables. An invocable is a function to be invoked via \n     * `$injector.invoke()`, and can have an arbitrary number of dependencies. \n     * An invocable can either return a value directly,\n     * or a `$q` promise. If a promise is returned it will be resolved and the \n     * resulting value will be used instead. Dependencies of invocables are resolved \n     * (in this order of precedence)\n     *\n     * - from the specified `locals`\n     * - from another invocable that is part of this `$resolve` call\n     * - from an invocable that is inherited from a `parent` call to `$resolve` \n     *   (or recursively\n     * - from any ancestor `$resolve` of that parent).\n     *\n     * The return value of `$resolve` is a promise for an object that contains \n     * (in this order of precedence)\n     *\n     * - any `locals` (if specified)\n     * - the resolved return values of all injectables\n     * - any values inherited from a `parent` call to `$resolve` (if specified)\n     *\n     * The promise will resolve after the `parent` promise (if any) and all promises \n     * returned by injectables have been resolved. If any invocable \n     * (or `$injector.invoke`) throws an exception, or if a promise returned by an \n     * invocable is rejected, the `$resolve` promise is immediately rejected with the \n     * same error. A rejection of a `parent` promise (if specified) will likewise be \n     * propagated immediately. Once the `$resolve` promise has been rejected, no \n     * further invocables will be called.\n     * \n     * Cyclic dependencies between invocables are not permitted and will cause `$resolve`\n     * to throw an error. As a special case, an injectable can depend on a parameter \n     * with the same name as the injectable, which will be fulfilled from the `parent` \n     * injectable of the same name. This allows inherited values to be decorated. \n     * Note that in this case any other injectable in the same `$resolve` with the same\n     * dependency would see the decorated value, not the inherited value.\n     *\n     * Note that missing dependencies -- unlike cyclic dependencies -- will cause an \n     * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) \n     * exception.\n     *\n     * Invocables are invoked eagerly as soon as all dependencies are available. \n     * This is true even for dependencies inherited from a `parent` call to `$resolve`.\n     *\n     * As a special case, an invocable can be a string, in which case it is taken to \n     * be a service name to be passed to `$injector.get()`. This is supported primarily \n     * for backwards-compatibility with the `resolve` property of `$routeProvider` \n     * routes.\n     *\n     * @param {object} invocables functions to invoke or \n     * `$injector` services to fetch.\n     * @param {object} locals  values to make available to the injectables\n     * @param {object} parent  a promise returned by another call to `$resolve`.\n     * @param {object} self  the `this` for the invoked methods\n     * @return {object} Promise for an object that contains the resolved return value\n     * of all invocables, as well as any inherited and local values.\n     */\n    this.resolve = function (invocables, locals, parent, self) {\n      return this.study(invocables)(locals, parent, self);\n    };\n  }\n\n  angular.module('ui.router.util').service('$resolve', $Resolve);\n\n  /**\n   * @ngdoc object\n   * @name ui.router.util.$templateFactoryProvider\n   *\n   * @description\n   * Provider for $templateFactory. Manages which template-loading mechanism to\n   * use, and will default to the most recent one ($templateRequest on Angular\n   * versions starting from 1.3, $http otherwise).\n   */\n  function TemplateFactoryProvider() {\n    var shouldUnsafelyUseHttp = angular.version.minor < 3;\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$templateFactoryProvider#shouldUnsafelyUseHttp\n     * @methodOf ui.router.util.$templateFactoryProvider\n     *\n     * @description\n     * Forces $templateFactory to use $http instead of $templateRequest. This\n     * might cause XSS, as $http doesn't enforce the regular security checks for\n     * templates that have been introduced in Angular 1.3. Note that setting this\n     * to false on Angular older than 1.3.x will crash, as the $templateRequest\n     * service (and the security checks) are not implemented on these versions.\n     *\n     * See the $sce documentation, section\n     * <a href=\"https://docs.angularjs.org/api/ng/service/$sce#impact-on-loading-templates\">\n     * Impact on loading templates</a> for more details about this mechanism.\n     *\n     * @param {boolean} value\n     */\n    this.shouldUnsafelyUseHttp = function (value) {\n      shouldUnsafelyUseHttp = !!value;\n    };\n\n    /**\n     * @ngdoc object\n     * @name ui.router.util.$templateFactory\n     *\n     * @requires $http\n     * @requires $templateCache\n     * @requires $injector\n     *\n     * @description\n     * Service. Manages loading of templates.\n     */\n    this.$get = ['$http', '$templateCache', '$injector', function ($http, $templateCache, $injector) {\n      return new TemplateFactory($http, $templateCache, $injector, shouldUnsafelyUseHttp);\n    }];\n  }\n\n  /**\n   * @ngdoc object\n   * @name ui.router.util.$templateFactory\n   *\n   * @requires $http\n   * @requires $templateCache\n   * @requires $injector\n   *\n   * @description\n   * Service. Manages loading of templates.\n   */\n  function TemplateFactory($http, $templateCache, $injector, shouldUnsafelyUseHttp) {\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$templateFactory#fromConfig\n     * @methodOf ui.router.util.$templateFactory\n     *\n     * @description\n     * Creates a template from a configuration object. \n     *\n     * @param {object} config Configuration object for which to load a template. \n     * The following properties are search in the specified order, and the first one \n     * that is defined is used to create the template:\n     *\n     * @param {string|object} config.template html string template or function to \n     * load via {@link ui.router.util.$templateFactory#fromString fromString}.\n     * @param {string|object} config.templateUrl url to load or a function returning \n     * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.\n     * @param {Function} config.templateProvider function to invoke via \n     * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.\n     * @param {object} params  Parameters to pass to the template function.\n     * @param {object} locals Locals to pass to `invoke` if the template is loaded \n     * via a `templateProvider`. Defaults to `{ params: params }`.\n     *\n     * @return {string|object}  The template html as a string, or a promise for \n     * that string,or `null` if no template is configured.\n     */\n    this.fromConfig = function (config, params, locals) {\n      return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$templateFactory#fromString\n     * @methodOf ui.router.util.$templateFactory\n     *\n     * @description\n     * Creates a template from a string or a function returning a string.\n     *\n     * @param {string|object} template html template as a string or function that \n     * returns an html template as a string.\n     * @param {object} params Parameters to pass to the template function.\n     *\n     * @return {string|object} The template html as a string, or a promise for that \n     * string.\n     */\n    this.fromString = function (template, params) {\n      return isFunction(template) ? template(params) : template;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$templateFactory#fromUrl\n     * @methodOf ui.router.util.$templateFactory\n     * \n     * @description\n     * Loads a template from the a URL via `$http` and `$templateCache`.\n     *\n     * @param {string|Function} url url of the template to load, or a function \n     * that returns a url.\n     * @param {Object} params Parameters to pass to the url function.\n     * @return {string|Promise.<string>} The template html as a string, or a promise \n     * for that string.\n     */\n    this.fromUrl = function (url, params) {\n      if (isFunction(url)) url = url(params);\n      if (url == null) return null;else {\n        if (!shouldUnsafelyUseHttp) {\n          return $injector.get('$templateRequest')(url);\n        } else {\n          return $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } }).then(function (response) {\n            return response.data;\n          });\n        }\n      }\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$templateFactory#fromProvider\n     * @methodOf ui.router.util.$templateFactory\n     *\n     * @description\n     * Creates a template by invoking an injectable provider function.\n     *\n     * @param {Function} provider Function to invoke via `$injector.invoke`\n     * @param {Object} params Parameters for the template.\n     * @param {Object} locals Locals to pass to `invoke`. Defaults to \n     * `{ params: params }`.\n     * @return {string|Promise.<string>} The template html as a string, or a promise \n     * for that string.\n     */\n    this.fromProvider = function (provider, params, locals) {\n      return $injector.invoke(provider, null, locals || { params: params });\n    };\n  }\n\n  angular.module('ui.router.util').provider('$templateFactory', TemplateFactoryProvider);\n\n  var $$UMFP; // reference to $UrlMatcherFactoryProvider\n\n  /**\n   * @ngdoc object\n   * @name ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Matches URLs against patterns and extracts named parameters from the path or the search\n   * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list\n   * of search parameters. Multiple search parameter names are separated by '&'. Search parameters\n   * do not influence whether or not a URL is matched, but their values are passed through into\n   * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.\n   *\n   * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace\n   * syntax, which optionally allows a regular expression for the parameter to be specified:\n   *\n   * * `':'` name - colon placeholder\n   * * `'*'` name - catch-all placeholder\n   * * `'{' name '}'` - curly placeholder\n   * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the\n   *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n   *\n   * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n   * must be unique within the pattern (across both path and search parameters). For colon\n   * placeholders or curly placeholders without an explicit regexp, a path parameter matches any\n   * number of characters other than '/'. For catch-all placeholders the path parameter matches\n   * any number of characters.\n   *\n   * Examples:\n   *\n   * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n   *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n   * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n   *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n   * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n   * * `'/user/{id:[^/]*}'` - Same as the previous example.\n   * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n   *   parameter consists of 1 to 8 hex digits.\n   * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n   *   path into the parameter 'path'.\n   * * `'/files/*path'` - ditto.\n   * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n   *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start\n   *\n   * @param {string} pattern  The pattern to compile into a matcher.\n   * @param {Object} config  A configuration object hash:\n   * @param {Object=} parentMatcher Used to concatenate the pattern/config onto\n   *   an existing UrlMatcher\n   *\n   * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n   * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n   *\n   * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any\n   *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n   *   non-null) will start with this prefix.\n   *\n   * @property {string} source  The pattern that was passed into the constructor\n   *\n   * @property {string} sourcePath  The path portion of the source property\n   *\n   * @property {string} sourceSearch  The search portion of the source property\n   *\n   * @property {string} regex  The constructed regex that will be used to match against the url when\n   *   it is time to determine which url will match.\n   *\n   * @returns {Object}  New `UrlMatcher` object\n   */\n  function UrlMatcher(pattern, config, parentMatcher) {\n    config = extend({ params: {} }, isObject(config) ? config : {});\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    var placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        compiled = '^',\n        last = 0,\n        m,\n        segments = this.segments = [],\n        parentParams = parentMatcher ? parentMatcher.params : {},\n        params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),\n        paramNames = [];\n\n    function addParameter(id, type, config, location) {\n      paramNames.push(id);\n      if (parentParams[id]) return parentParams[id];\n      if (!/^\\w+([-.]+\\w+)*(?:\\[\\])?$/.test(id)) throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n      if (params[id]) throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n      params[id] = new $$UMFP.Param(id, type, config, location);\n      return params[id];\n    }\n\n    function quoteRegExp(string, pattern, squash, optional) {\n      var surroundPattern = ['', ''],\n          result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n      if (!pattern) return result;\n      switch (squash) {\n        case false:\n          surroundPattern = ['(', ')' + (optional ? \"?\" : \"\")];break;\n        case true:\n          result = result.replace(/\\/$/, '');\n          surroundPattern = ['(?:\\/(', ')|\\/)?'];\n          break;\n        default:\n          surroundPattern = ['(' + squash + \"|\", ')?'];break;\n      }\n      return result + surroundPattern[0] + pattern + surroundPattern[1];\n    }\n\n    this.source = pattern;\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    function matchDetails(m, isSearch) {\n      var id, regexp, segment, type, cfg, arrayMode;\n      id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null\n      cfg = config.params[id];\n      segment = pattern.substring(last, m.index);\n      regexp = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);\n\n      if (regexp) {\n        type = $$UMFP.type(regexp) || inherit($$UMFP.type(\"string\"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });\n      }\n\n      return {\n        id: id, regexp: regexp, segment: segment, type: type, cfg: cfg\n      };\n    }\n\n    var p, param, segment;\n    while (m = placeholder.exec(pattern)) {\n      p = matchDetails(m, false);\n      if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      param = addParameter(p.id, p.type, p.cfg, \"path\");\n      compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);\n      segments.push(p.segment);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    var i = segment.indexOf('?');\n\n    if (i >= 0) {\n      var search = this.sourceSearch = segment.substring(i);\n      segment = segment.substring(0, i);\n      this.sourcePath = pattern.substring(0, last + i);\n\n      if (search.length > 0) {\n        last = 0;\n        while (m = searchPlaceholder.exec(search)) {\n          p = matchDetails(m, true);\n          param = addParameter(p.id, p.type, p.cfg, \"search\");\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    } else {\n      this.sourcePath = pattern;\n      this.sourceSearch = '';\n    }\n\n    compiled += quoteRegExp(segment) + (config.strict === false ? '\\/?' : '') + '$';\n    segments.push(segment);\n\n    this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);\n    this.prefix = segments[0];\n    this.$$paramNames = paramNames;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#concat\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Returns a new matcher for a pattern constructed by appending the path part and adding the\n   * search parameters of the specified pattern to this pattern. The current pattern is not\n   * modified. This can be understood as creating a pattern for URLs that are relative to (or\n   * suffixes of) the current pattern.\n   *\n   * @example\n   * The following two matchers are equivalent:\n   * <pre>\n   * new UrlMatcher('/user/{id}?q').concat('/details?date');\n   * new UrlMatcher('/user/{id}/details?q&date');\n   * </pre>\n   *\n   * @param {string} pattern  The pattern to append.\n   * @param {Object} config  An object hash of the configuration for the matcher.\n   * @returns {UrlMatcher}  A matcher for the concatenated pattern.\n   */\n  UrlMatcher.prototype.concat = function (pattern, config) {\n    // Because order of search parameters is irrelevant, we can add our own search\n    // parameters to the end of the new pattern. Parse the new pattern by itself\n    // and then join the bits together, but it's much easier to do this on a string level.\n    var defaultConfig = {\n      caseInsensitive: $$UMFP.caseInsensitive(),\n      strict: $$UMFP.strictMode(),\n      squash: $$UMFP.defaultSquashPolicy()\n    };\n    return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);\n  };\n\n  UrlMatcher.prototype.toString = function () {\n    return this.source;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#exec\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Tests the specified path against this matcher, and returns an object containing the captured\n   * parameter values, or null if the path does not match. The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `searchParams`. This means that search parameters are always treated\n   * as optional.\n   *\n   * @example\n   * <pre>\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * </pre>\n   *\n   * @param {string} path  The URL path to match, e.g. `$location.path()`.\n   * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.\n   * @returns {Object}  The captured parameter values.\n   */\n  UrlMatcher.prototype.exec = function (path, searchParams) {\n    var m = this.regexp.exec(path);\n    if (!m) return null;\n    searchParams = searchParams || {};\n\n    var paramNames = this.parameters(),\n        nTotal = paramNames.length,\n        nPath = this.segments.length - 1,\n        values = {},\n        i,\n        j,\n        cfg,\n        paramName;\n\n    if (nPath !== m.length - 1) throw new Error(\"Unbalanced capture group in route '\" + this.source + \"'\");\n\n    function decodePathArray(string) {\n      function reverseString(str) {\n        return str.split(\"\").reverse().join(\"\");\n      }\n      function unquoteDashes(str) {\n        return str.replace(/\\\\-/g, \"-\");\n      }\n\n      var split = reverseString(string).split(/-(?!\\\\)/);\n      var allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    var param, paramVal;\n    for (i = 0; i < nPath; i++) {\n      paramName = paramNames[i];\n      param = this.params[paramName];\n      paramVal = m[i + 1];\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;\n      }\n      if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);\n      if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);\n      values[paramName] = param.value(paramVal);\n    }\n    for (; /**/i < nTotal; i++) {\n      paramName = paramNames[i];\n      values[paramName] = this.params[paramName].value(searchParams[paramName]);\n      param = this.params[paramName];\n      paramVal = searchParams[paramName];\n      for (j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;\n      }\n      if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);\n      values[paramName] = param.value(paramVal);\n    }\n\n    return values;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#parameters\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Returns the names of all path and search parameters of this pattern in an unspecified order.\n   *\n   * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  UrlMatcher.prototype.parameters = function (param) {\n    if (!isDefined(param)) return this.$$paramNames;\n    return this.params[param] || null;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#validates\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param {Object} params The object hash of parameters to validate.\n   * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.\n   */\n  UrlMatcher.prototype.validates = function (params) {\n    return this.params.$$validates(params);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:UrlMatcher#format\n   * @methodOf ui.router.util.type:UrlMatcher\n   *\n   * @description\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters. Null values for path parameters are\n   * treated as empty strings.\n   *\n   * @example\n   * <pre>\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * </pre>\n   *\n   * @param {Object} values  the values to substitute for the parameters in this pattern.\n   * @returns {string}  the formatted URL (path and optionally search part).\n   */\n  UrlMatcher.prototype.format = function (values) {\n    values = values || {};\n    var segments = this.segments,\n        params = this.parameters(),\n        paramset = this.params;\n    if (!this.validates(values)) return null;\n\n    var i,\n        search = false,\n        nPath = segments.length - 1,\n        nTotal = params.length,\n        result = segments[0];\n\n    function encodeDashes(str) {\n      // Replace dashes with encoded \"\\-\"\n      return encodeURIComponent(str).replace(/-/g, function (c) {\n        return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase();\n      });\n    }\n\n    for (i = 0; i < nTotal; i++) {\n      var isPathParam = i < nPath;\n      var name = params[i],\n          param = paramset[name],\n          value = param.value(values[name]);\n      var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);\n      var squash = isDefaultValue ? param.squash : false;\n      var encoded = param.type.encode(value);\n\n      if (isPathParam) {\n        var nextSegment = segments[i + 1];\n        var isFinalPathParam = i + 1 === nPath;\n\n        if (squash === false) {\n          if (encoded != null) {\n            if (isArray(encoded)) {\n              result += map(encoded, encodeDashes).join(\"-\");\n            } else {\n              result += encodeURIComponent(encoded);\n            }\n          }\n          result += nextSegment;\n        } else if (squash === true) {\n          var capture = result.match(/\\/$/) ? /\\/?(.*)/ : /(.*)/;\n          result += nextSegment.match(capture)[1];\n        } else if (isString(squash)) {\n          result += squash + nextSegment;\n        }\n\n        if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);\n      } else {\n        if (encoded == null || isDefaultValue && squash !== false) continue;\n        if (!isArray(encoded)) encoded = [encoded];\n        if (encoded.length === 0) continue;\n        encoded = map(encoded, encodeURIComponent).join('&' + name + '=');\n        result += (search ? '&' : '?') + (name + '=' + encoded);\n        search = true;\n      }\n    }\n\n    return result;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.util.type:Type\n   *\n   * @description\n   * Implements an interface to define custom parameter types that can be decoded from and encoded to\n   * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}\n   * objects when matching or formatting URLs, or comparing or validating parameter values.\n   *\n   * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more\n   * information on registering custom types.\n   *\n   * @param {Object} config  A configuration object which contains the custom type definition.  The object's\n   *        properties will override the default methods and/or pattern in `Type`'s public interface.\n   * @example\n   * <pre>\n   * {\n   *   decode: function(val) { return parseInt(val, 10); },\n   *   encode: function(val) { return val && val.toString(); },\n   *   equals: function(a, b) { return this.is(a) && a === b; },\n   *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },\n   *   pattern: /\\d+/\n   * }\n   * </pre>\n   *\n   * @property {RegExp} pattern The regular expression pattern used to match values of this type when\n   *           coming from a substring of a URL.\n   *\n   * @returns {Object}  Returns a new `Type` object.\n   */\n  function Type(config) {\n    extend(this, config);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:Type#is\n   * @methodOf ui.router.util.type:Type\n   *\n   * @description\n   * Detects whether a value is of a particular type. Accepts a native (decoded) value\n   * and determines whether it matches the current `Type` object.\n   *\n   * @param {*} val  The value to check.\n   * @param {string} key  Optional. If the type check is happening in the context of a specific\n   *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the\n   *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.\n   * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.\n   */\n  Type.prototype.is = function (val, key) {\n    return true;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:Type#encode\n   * @methodOf ui.router.util.type:Type\n   *\n   * @description\n   * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the\n   * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it\n   * only needs to be a representation of `val` that has been coerced to a string.\n   *\n   * @param {*} val  The value to encode.\n   * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n   *        meta-programming of `Type` objects.\n   * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.\n   */\n  Type.prototype.encode = function (val, key) {\n    return val;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:Type#decode\n   * @methodOf ui.router.util.type:Type\n   *\n   * @description\n   * Converts a parameter value (from URL string or transition param) to a custom/native value.\n   *\n   * @param {string} val  The URL parameter value to decode.\n   * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n   *        meta-programming of `Type` objects.\n   * @returns {*}  Returns a custom representation of the URL parameter value.\n   */\n  Type.prototype.decode = function (val, key) {\n    return val;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.type:Type#equals\n   * @methodOf ui.router.util.type:Type\n   *\n   * @description\n   * Determines whether two decoded values are equivalent.\n   *\n   * @param {*} a  A value to compare against.\n   * @param {*} b  A value to compare against.\n   * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.\n   */\n  Type.prototype.equals = function (a, b) {\n    return a == b;\n  };\n\n  Type.prototype.$subPattern = function () {\n    var sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  };\n\n  Type.prototype.pattern = /.*/;\n\n  Type.prototype.toString = function () {\n    return \"{Type:\" + this.name + \"}\";\n  };\n\n  /** Given an encoded string, or a decoded object, returns a decoded object */\n  Type.prototype.$normalize = function (val) {\n    return this.is(val) ? val : this.decode(val);\n  };\n\n  /*\n   * Wraps an existing custom Type as an array of Type, depending on 'mode'.\n   * e.g.:\n   * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n   * - url: \"/path?queryParam=1&queryParam=2\n   * - $stateParams.queryParam will be [1, 2]\n   * if `mode` is \"auto\", then\n   * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n   * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n   */\n  Type.prototype.$asArray = function (mode, isSearch) {\n    if (!mode) return this;\n    if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n\n    function ArrayType(type, mode) {\n      function bindTo(type, callbackName) {\n        return function () {\n          return type[callbackName].apply(type, arguments);\n        };\n      }\n\n      // Wrap non-array value as array\n      function arrayWrap(val) {\n        return isArray(val) ? val : isDefined(val) ? [val] : [];\n      }\n      // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n      function arrayUnwrap(val) {\n        switch (val.length) {\n          case 0:\n            return undefined;\n          case 1:\n            return mode === \"auto\" ? val[0] : val;\n          default:\n            return val;\n        }\n      }\n      function falsey(val) {\n        return !val;\n      }\n\n      // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n      function arrayHandler(callback, allTruthyMode) {\n        return function handleArray(val) {\n          if (isArray(val) && val.length === 0) return val;\n          val = arrayWrap(val);\n          var result = map(val, callback);\n          if (allTruthyMode === true) return filter(result, falsey).length === 0;\n          return arrayUnwrap(result);\n        };\n      }\n\n      // Wraps type (.equals) functions to operate on each value of an array\n      function arrayEqualsHandler(callback) {\n        return function handleArray(val1, val2) {\n          var left = arrayWrap(val1),\n              right = arrayWrap(val2);\n          if (left.length !== right.length) return false;\n          for (var i = 0; i < left.length; i++) {\n            if (!callback(left[i], right[i])) return false;\n          }\n          return true;\n        };\n      }\n\n      this.encode = arrayHandler(bindTo(type, 'encode'));\n      this.decode = arrayHandler(bindTo(type, 'decode'));\n      this.is = arrayHandler(bindTo(type, 'is'), true);\n      this.equals = arrayEqualsHandler(bindTo(type, 'equals'));\n      this.pattern = type.pattern;\n      this.$normalize = arrayHandler(bindTo(type, '$normalize'));\n      this.name = type.name;\n      this.$arrayMode = mode;\n    }\n\n    return new ArrayType(this, mode);\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory\n   * is also available to providers under the name `$urlMatcherFactoryProvider`.\n   */\n  function $UrlMatcherFactory() {\n    $$UMFP = this;\n\n    var isCaseInsensitive = false,\n        isStrictMode = true,\n        defaultSquashPolicy = false;\n\n    // Use tildes to pre-encode slashes.\n    // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,\n    // and bidirectional encoding/decoding fails.\n    // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character\n    function valToString(val) {\n      return val != null ? val.toString().replace(/(~|\\/)/g, function (m) {\n        return { '~': '~~', '/': '~2F' }[m];\n      }) : val;\n    }\n    function valFromString(val) {\n      return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) {\n        return { '~~': '~', '~2F': '/' }[m];\n      }) : val;\n    }\n\n    var $types = {},\n        enqueue = true,\n        typeQueue = [],\n        injector,\n        defaultTypes = {\n      \"string\": {\n        encode: valToString,\n        decode: valFromString,\n        // TODO: in 1.0, make string .is() return false if value is undefined/null by default.\n        // In 0.2.x, string params are optional by default for backwards compat\n        is: function (val) {\n          return val == null || !isDefined(val) || typeof val === \"string\";\n        },\n        pattern: /[^/]*/\n      },\n      \"int\": {\n        encode: valToString,\n        decode: function (val) {\n          return parseInt(val, 10);\n        },\n        is: function (val) {\n          return val !== undefined && val !== null && this.decode(val.toString()) === val;\n        },\n        pattern: /\\d+/\n      },\n      \"bool\": {\n        encode: function (val) {\n          return val ? 1 : 0;\n        },\n        decode: function (val) {\n          return parseInt(val, 10) !== 0;\n        },\n        is: function (val) {\n          return val === true || val === false;\n        },\n        pattern: /0|1/\n      },\n      \"date\": {\n        encode: function (val) {\n          if (!this.is(val)) return undefined;\n          return [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join(\"-\");\n        },\n        decode: function (val) {\n          if (this.is(val)) return val;\n          var match = this.capture.exec(val);\n          return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n        },\n        is: function (val) {\n          return val instanceof Date && !isNaN(val.valueOf());\n        },\n        equals: function (a, b) {\n          return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();\n        },\n        pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n        capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n      },\n      \"json\": {\n        encode: angular.toJson,\n        decode: angular.fromJson,\n        is: angular.isObject,\n        equals: angular.equals,\n        pattern: /[^/]*/\n      },\n      \"any\": { // does not encode/decode\n        encode: angular.identity,\n        decode: angular.identity,\n        equals: angular.equals,\n        pattern: /.*/\n      }\n    };\n\n    function getDefaultConfig() {\n      return {\n        strict: isStrictMode,\n        caseInsensitive: isCaseInsensitive\n      };\n    }\n\n    function isInjectable(value) {\n      return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);\n    }\n\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    $UrlMatcherFactory.$$getDefaultValue = function (config) {\n      if (!isInjectable(config.value)) return config.value;\n      if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      return injector.invoke(config.value);\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$urlMatcherFactory#caseInsensitive\n     * @methodOf ui.router.util.$urlMatcherFactory\n     *\n     * @description\n     * Defines whether URL matching should be case sensitive (the default behavior), or not.\n     *\n     * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;\n     * @returns {boolean} the current value of caseInsensitive\n     */\n    this.caseInsensitive = function (value) {\n      if (isDefined(value)) isCaseInsensitive = value;\n      return isCaseInsensitive;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$urlMatcherFactory#strictMode\n     * @methodOf ui.router.util.$urlMatcherFactory\n     *\n     * @description\n     * Defines whether URLs should match trailing slashes, or not (the default behavior).\n     *\n     * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.\n     * @returns {boolean} the current value of strictMode\n     */\n    this.strictMode = function (value) {\n      if (isDefined(value)) isStrictMode = value;\n      return isStrictMode;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy\n     * @methodOf ui.router.util.$urlMatcherFactory\n     *\n     * @description\n     * Sets the default behavior when generating or matching URLs with default parameter values.\n     *\n     * @param {string} value A string that defines the default parameter URL squashing behavior.\n     *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n     *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n     *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n     *    any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n     *             the parameter value from the URL and replace it with this string.\n     */\n    this.defaultSquashPolicy = function (value) {\n      if (!isDefined(value)) return defaultSquashPolicy;\n      if (value !== true && value !== false && !isString(value)) throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n      defaultSquashPolicy = value;\n      return value;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$urlMatcherFactory#compile\n     * @methodOf ui.router.util.$urlMatcherFactory\n     *\n     * @description\n     * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.\n     *\n     * @param {string} pattern  The URL pattern.\n     * @param {Object} config  The config object hash.\n     * @returns {UrlMatcher}  The UrlMatcher.\n     */\n    this.compile = function (pattern, config) {\n      return new UrlMatcher(pattern, extend(getDefaultConfig(), config));\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$urlMatcherFactory#isMatcher\n     * @methodOf ui.router.util.$urlMatcherFactory\n     *\n     * @description\n     * Returns true if the specified object is a `UrlMatcher`, or false otherwise.\n     *\n     * @param {Object} object  The object to perform the type check against.\n     * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by\n     *          implementing all the same methods.\n     */\n    this.isMatcher = function (o) {\n      if (!isObject(o)) return false;\n      var result = true;\n\n      forEach(UrlMatcher.prototype, function (val, name) {\n        if (isFunction(val)) {\n          result = result && isDefined(o[name]) && isFunction(o[name]);\n        }\n      });\n      return result;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.util.$urlMatcherFactory#type\n     * @methodOf ui.router.util.$urlMatcherFactory\n     *\n     * @description\n     * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to\n     * generate URLs with typed parameters.\n     *\n     * @param {string} name  The type name.\n     * @param {Object|Function} definition   The type definition. See\n     *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n     * @param {Object|Function} definitionFn (optional) A function that is injected before the app\n     *        runtime starts.  The result of this function is merged into the existing `definition`.\n     *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n     *\n     * @returns {Object}  Returns `$urlMatcherFactoryProvider`.\n     *\n     * @example\n     * This is a simple example of a custom type that encodes and decodes items from an\n     * array, using the array index as the URL-encoded value:\n     *\n     * <pre>\n     * var list = ['John', 'Paul', 'George', 'Ringo'];\n     *\n     * $urlMatcherFactoryProvider.type('listItem', {\n     *   encode: function(item) {\n     *     // Represent the list item in the URL using its corresponding index\n     *     return list.indexOf(item);\n     *   },\n     *   decode: function(item) {\n     *     // Look up the list item by index\n     *     return list[parseInt(item, 10)];\n     *   },\n     *   is: function(item) {\n     *     // Ensure the item is valid by checking to see that it appears\n     *     // in the list\n     *     return list.indexOf(item) > -1;\n     *   }\n     * });\n     *\n     * $stateProvider.state('list', {\n     *   url: \"/list/{item:listItem}\",\n     *   controller: function($scope, $stateParams) {\n     *     console.log($stateParams.item);\n     *   }\n     * });\n     *\n     * // ...\n     *\n     * // Changes URL to '/list/3', logs \"Ringo\" to the console\n     * $state.go('list', { item: \"Ringo\" });\n     * </pre>\n     *\n     * This is a more complex example of a type that relies on dependency injection to\n     * interact with services, and uses the parameter name from the URL to infer how to\n     * handle encoding and decoding parameter values:\n     *\n     * <pre>\n     * // Defines a custom type that gets a value from a service,\n     * // where each service gets different types of values from\n     * // a backend API:\n     * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {\n     *\n     *   // Matches up services to URL parameter names\n     *   var services = {\n     *     user: Users,\n     *     post: Posts\n     *   };\n     *\n     *   return {\n     *     encode: function(object) {\n     *       // Represent the object in the URL using its unique ID\n     *       return object.id;\n     *     },\n     *     decode: function(value, key) {\n     *       // Look up the object by ID, using the parameter\n     *       // name (key) to call the correct service\n     *       return services[key].findById(value);\n     *     },\n     *     is: function(object, key) {\n     *       // Check that object is a valid dbObject\n     *       return angular.isObject(object) && object.id && services[key];\n     *     }\n     *     equals: function(a, b) {\n     *       // Check the equality of decoded objects by comparing\n     *       // their unique IDs\n     *       return a.id === b.id;\n     *     }\n     *   };\n     * });\n     *\n     * // In a config() block, you can then attach URLs with\n     * // type-annotated parameters:\n     * $stateProvider.state('users', {\n     *   url: \"/users\",\n     *   // ...\n     * }).state('users.item', {\n     *   url: \"/{user:dbObject}\",\n     *   controller: function($scope, $stateParams) {\n     *     // $stateParams.user will now be an object returned from\n     *     // the Users service\n     *   },\n     *   // ...\n     * });\n     * </pre>\n     */\n    this.type = function (name, definition, definitionFn) {\n      if (!isDefined(definition)) return $types[name];\n      if ($types.hasOwnProperty(name)) throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n\n      $types[name] = new Type(extend({ name: name }, definition));\n      if (definitionFn) {\n        typeQueue.push({ name: name, def: definitionFn });\n        if (!enqueue) flushTypeQueue();\n      }\n      return this;\n    };\n\n    // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s\n    function flushTypeQueue() {\n      while (typeQueue.length) {\n        var type = typeQueue.shift();\n        if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n        angular.extend($types[type.name], injector.invoke(type.def));\n      }\n    }\n\n    // Register default types. Store them in the prototype of $types.\n    forEach(defaultTypes, function (type, name) {\n      $types[name] = new Type(extend({ name: name }, type));\n    });\n    $types = inherit($types, {});\n\n    /* No need to document $get, since it returns this */\n    this.$get = ['$injector', function ($injector) {\n      injector = $injector;\n      enqueue = false;\n      flushTypeQueue();\n\n      forEach(defaultTypes, function (type, name) {\n        if (!$types[name]) $types[name] = new Type(type);\n      });\n      return this;\n    }];\n\n    this.Param = function Param(id, type, config, location) {\n      var self = this;\n      config = unwrapShorthand(config);\n      type = getType(config, type, location);\n      var arrayMode = getArrayMode();\n      type = arrayMode ? type.$asArray(arrayMode, location === \"search\") : type;\n      if (type.name === \"string\" && !arrayMode && location === \"path\" && config.value === undefined) config.value = \"\"; // for 0.2.x; in 0.3.0+ do not automatically default to \"\"\n      var isOptional = config.value !== undefined;\n      var squash = getSquashPolicy(config, isOptional);\n      var replace = getReplace(config, arrayMode, isOptional, squash);\n\n      function unwrapShorthand(config) {\n        var keys = isObject(config) ? objectKeys(config) : [];\n        var isShorthand = indexOf(keys, \"value\") === -1 && indexOf(keys, \"type\") === -1 && indexOf(keys, \"squash\") === -1 && indexOf(keys, \"array\") === -1;\n        if (isShorthand) config = { value: config };\n        config.$$fn = isInjectable(config.value) ? config.value : function () {\n          return config.value;\n        };\n        return config;\n      }\n\n      function getType(config, urlType, location) {\n        if (config.type && urlType) throw new Error(\"Param '\" + id + \"' has two type configurations.\");\n        if (urlType) return urlType;\n        if (!config.type) return location === \"config\" ? $types.any : $types.string;\n\n        if (angular.isString(config.type)) return $types[config.type];\n        if (config.type instanceof Type) return config.type;\n        return new Type(config.type);\n      }\n\n      // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n      function getArrayMode() {\n        var arrayDefaults = { array: location === \"search\" ? \"auto\" : false };\n        var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n        return extend(arrayDefaults, arrayParamNomenclature, config).array;\n      }\n\n      /**\n       * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n       */\n      function getSquashPolicy(config, isOptional) {\n        var squash = config.squash;\n        if (!isOptional || squash === false) return false;\n        if (!isDefined(squash) || squash == null) return defaultSquashPolicy;\n        if (squash === true || isString(squash)) return squash;\n        throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n      }\n\n      function getReplace(config, arrayMode, isOptional, squash) {\n        var replace,\n            configuredKeys,\n            defaultPolicy = [{ from: \"\", to: isOptional || arrayMode ? undefined : \"\" }, { from: null, to: isOptional || arrayMode ? undefined : \"\" }];\n        replace = isArray(config.replace) ? config.replace : [];\n        if (isString(squash)) replace.push({ from: squash, to: undefined });\n        configuredKeys = map(replace, function (item) {\n          return item.from;\n        });\n        return filter(defaultPolicy, function (item) {\n          return indexOf(configuredKeys, item.from) === -1;\n        }).concat(replace);\n      }\n\n      /**\n       * [Internal] Get the default value of a parameter, which may be an injectable function.\n       */\n      function $$getDefaultValue() {\n        if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n        var defaultValue = injector.invoke(config.$$fn);\n        if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue)) throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + self.id + \"' is not an instance of Type (\" + self.type.name + \")\");\n        return defaultValue;\n      }\n\n      /**\n       * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n       * default value, which may be the result of an injectable function.\n       */\n      function $value(value) {\n        function hasReplaceVal(val) {\n          return function (obj) {\n            return obj.from === val;\n          };\n        }\n        function $replace(value) {\n          var replacement = map(filter(self.replace, hasReplaceVal(value)), function (obj) {\n            return obj.to;\n          });\n          return replacement.length ? replacement[0] : value;\n        }\n        value = $replace(value);\n        return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);\n      }\n\n      function toString() {\n        return \"{Param:\" + id + \" \" + type + \" squash: '\" + squash + \"' optional: \" + isOptional + \"}\";\n      }\n\n      extend(this, {\n        id: id,\n        type: type,\n        location: location,\n        array: arrayMode,\n        squash: squash,\n        replace: replace,\n        isOptional: isOptional,\n        value: $value,\n        dynamic: undefined,\n        config: config,\n        toString: toString\n      });\n    };\n\n    function ParamSet(params) {\n      extend(this, params || {});\n    }\n\n    ParamSet.prototype = {\n      $$new: function () {\n        return inherit(this, extend(new ParamSet(), { $$parent: this }));\n      },\n      $$keys: function () {\n        var keys = [],\n            chain = [],\n            parent = this,\n            ignore = objectKeys(ParamSet.prototype);\n        while (parent) {\n          chain.push(parent);parent = parent.$$parent;\n        }\n        chain.reverse();\n        forEach(chain, function (paramset) {\n          forEach(objectKeys(paramset), function (key) {\n            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);\n          });\n        });\n        return keys;\n      },\n      $$values: function (paramValues) {\n        var values = {},\n            self = this;\n        forEach(self.$$keys(), function (key) {\n          values[key] = self[key].value(paramValues && paramValues[key]);\n        });\n        return values;\n      },\n      $$equals: function (paramValues1, paramValues2) {\n        var equal = true,\n            self = this;\n        forEach(self.$$keys(), function (key) {\n          var left = paramValues1 && paramValues1[key],\n              right = paramValues2 && paramValues2[key];\n          if (!self[key].type.equals(left, right)) equal = false;\n        });\n        return equal;\n      },\n      $$validates: function $$validate(paramValues) {\n        var keys = this.$$keys(),\n            i,\n            param,\n            rawVal,\n            normalized,\n            encoded;\n        for (i = 0; i < keys.length; i++) {\n          param = this[keys[i]];\n          rawVal = paramValues[keys[i]];\n          if ((rawVal === undefined || rawVal === null) && param.isOptional) break; // There was no parameter value, but the param is optional\n          normalized = param.type.$normalize(rawVal);\n          if (!param.type.is(normalized)) return false; // The value was not of the correct Type, and could not be decoded to the correct Type\n          encoded = param.type.encode(normalized);\n          if (angular.isString(encoded) && !param.type.pattern.exec(encoded)) return false; // The value was of the correct type, but when encoded, did not match the Type's regexp\n        }\n        return true;\n      },\n      $$parent: undefined\n    };\n\n    this.ParamSet = ParamSet;\n  }\n\n  // Register as a provider so it's available to other providers\n  angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);\n  angular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) {}]);\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouterProvider\n   *\n   * @requires ui.router.util.$urlMatcherFactoryProvider\n   * @requires $locationProvider\n   *\n   * @description\n   * `$urlRouterProvider` has the responsibility of watching `$location`. \n   * When `$location` changes it runs through a list of rules one by one until a \n   * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify \n   * a url in a state configuration. All urls are compiled into a UrlMatcher object.\n   *\n   * There are several methods on `$urlRouterProvider` that make it useful to use directly\n   * in your module config.\n   */\n  $UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];\n  function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {\n    var rules = [],\n        otherwise = null,\n        interceptDeferred = false,\n        listener;\n\n    // Returns a string that is a prefix of all strings matching the RegExp\n    function regExpPrefix(re) {\n      var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n      return prefix != null ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n    }\n\n    // Interpolates matched values into a String.replace()-style pattern\n    function interpolate(pattern, match) {\n      return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n        return match[what === '$' ? 0 : Number(what)];\n      });\n    }\n\n    /**\n     * @ngdoc function\n     * @name ui.router.router.$urlRouterProvider#rule\n     * @methodOf ui.router.router.$urlRouterProvider\n     *\n     * @description\n     * Defines rules that are used by `$urlRouterProvider` to find matches for\n     * specific URLs.\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // Here's an example of how you might allow case insensitive urls\n     *   $urlRouterProvider.rule(function ($injector, $location) {\n     *     var path = $location.path(),\n     *         normalized = path.toLowerCase();\n     *\n     *     if (path !== normalized) {\n     *       return normalized;\n     *     }\n     *   });\n     * });\n     * </pre>\n     *\n     * @param {function} rule Handler function that takes `$injector` and `$location`\n     * services as arguments. You can use them to return a valid path as a string.\n     *\n     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n     */\n    this.rule = function (rule) {\n      if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n      rules.push(rule);\n      return this;\n    };\n\n    /**\n     * @ngdoc object\n     * @name ui.router.router.$urlRouterProvider#otherwise\n     * @methodOf ui.router.router.$urlRouterProvider\n     *\n     * @description\n     * Defines a path that is used when an invalid route is requested.\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   // if the path doesn't match any of the urls you configured\n     *   // otherwise will take care of routing the user to the\n     *   // specified url\n     *   $urlRouterProvider.otherwise('/index');\n     *\n     *   // Example of using function rule as param\n     *   $urlRouterProvider.otherwise(function ($injector, $location) {\n     *     return '/a/valid/url';\n     *   });\n     * });\n     * </pre>\n     *\n     * @param {string|function} rule The url path you want to redirect to or a function \n     * rule that returns the url path. The function version is passed two params: \n     * `$injector` and `$location` services, and must return a url string.\n     *\n     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n     */\n    this.otherwise = function (rule) {\n      if (isString(rule)) {\n        var redirect = rule;\n        rule = function () {\n          return redirect;\n        };\n      } else if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n      otherwise = rule;\n      return this;\n    };\n\n    function handleIfMatch($injector, handler, match) {\n      if (!match) return false;\n      var result = $injector.invoke(handler, handler, { $match: match });\n      return isDefined(result) ? result : true;\n    }\n\n    /**\n     * @ngdoc function\n     * @name ui.router.router.$urlRouterProvider#when\n     * @methodOf ui.router.router.$urlRouterProvider\n     *\n     * @description\n     * Registers a handler for a given url matching. \n     * \n     * If the handler is a string, it is\n     * treated as a redirect, and is interpolated according to the syntax of match\n     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n     *\n     * If the handler is a function, it is injectable. It gets invoked if `$location`\n     * matches. You have the option of inject the match object as `$match`.\n     *\n     * The handler can return\n     *\n     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n     *   will continue trying to find another one that matches.\n     * - **string** which is treated as a redirect and passed to `$location.url()`\n     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n     *     if ($state.$current.navigable !== state ||\n     *         !equalForKeys($match, $stateParams) {\n     *      $state.transitionTo(state, $match, false);\n     *     }\n     *   });\n     * });\n     * </pre>\n     *\n     * @param {string|object} what The incoming path that you want to redirect.\n     * @param {string|function} handler The path you want to redirect your user to.\n     */\n    this.when = function (what, handler) {\n      var redirect,\n          handlerIsString = isString(handler);\n      if (isString(what)) what = $urlMatcherFactory.compile(what);\n\n      if (!handlerIsString && !isFunction(handler) && !isArray(handler)) throw new Error(\"invalid 'handler' in when()\");\n\n      var strategies = {\n        matcher: function (what, handler) {\n          if (handlerIsString) {\n            redirect = $urlMatcherFactory.compile(handler);\n            handler = ['$match', function ($match) {\n              return redirect.format($match);\n            }];\n          }\n          return extend(function ($injector, $location) {\n            return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));\n          }, {\n            prefix: isString(what.prefix) ? what.prefix : ''\n          });\n        },\n        regex: function (what, handler) {\n          if (what.global || what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n          if (handlerIsString) {\n            redirect = handler;\n            handler = ['$match', function ($match) {\n              return interpolate(redirect, $match);\n            }];\n          }\n          return extend(function ($injector, $location) {\n            return handleIfMatch($injector, handler, what.exec($location.path()));\n          }, {\n            prefix: regExpPrefix(what)\n          });\n        }\n      };\n\n      var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };\n\n      for (var n in check) {\n        if (check[n]) return this.rule(strategies[n](what, handler));\n      }\n\n      throw new Error(\"invalid 'what' in when()\");\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.router.$urlRouterProvider#deferIntercept\n     * @methodOf ui.router.router.$urlRouterProvider\n     *\n     * @description\n     * Disables (or enables) deferring location change interception.\n     *\n     * If you wish to customize the behavior of syncing the URL (for example, if you wish to\n     * defer a transition but maintain the current URL), call this method at configuration time.\n     * Then, at run time, call `$urlRouter.listen()` after you have configured your own\n     * `$locationChangeSuccess` event handler.\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router.router']);\n     *\n     * app.config(function ($urlRouterProvider) {\n     *\n     *   // Prevent $urlRouter from automatically intercepting URL changes;\n     *   // this allows you to configure custom behavior in between\n     *   // location changes and route synchronization:\n     *   $urlRouterProvider.deferIntercept();\n     *\n     * }).run(function ($rootScope, $urlRouter, UserService) {\n     *\n     *   $rootScope.$on('$locationChangeSuccess', function(e) {\n     *     // UserService is an example service for managing user state\n     *     if (UserService.isLoggedIn()) return;\n     *\n     *     // Prevent $urlRouter's default handler from firing\n     *     e.preventDefault();\n     *\n     *     UserService.handleLogin().then(function() {\n     *       // Once the user has logged in, sync the current URL\n     *       // to the router:\n     *       $urlRouter.sync();\n     *     });\n     *   });\n     *\n     *   // Configures $urlRouter's listener *after* your custom listener\n     *   $urlRouter.listen();\n     * });\n     * </pre>\n     *\n     * @param {boolean} defer Indicates whether to defer location change interception. Passing\n              no parameter is equivalent to `true`.\n     */\n    this.deferIntercept = function (defer) {\n      if (defer === undefined) defer = true;\n      interceptDeferred = defer;\n    };\n\n    /**\n     * @ngdoc object\n     * @name ui.router.router.$urlRouter\n     *\n     * @requires $location\n     * @requires $rootScope\n     * @requires $injector\n     * @requires $browser\n     *\n     * @description\n     *\n     */\n    this.$get = $get;\n    $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];\n    function $get($location, $rootScope, $injector, $browser, $sniffer) {\n\n      var baseHref = $browser.baseHref(),\n          location = $location.url(),\n          lastPushedUrl;\n\n      function appendBasePath(url, isHtml5, absolute) {\n        if (baseHref === '/') return url;\n        if (isHtml5) return baseHref.slice(0, -1) + url;\n        if (absolute) return baseHref.slice(1) + url;\n        return url;\n      }\n\n      // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n      function update(evt) {\n        if (evt && evt.defaultPrevented) return;\n        var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;\n        lastPushedUrl = undefined;\n        // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573\n        //if (ignoreUpdate) return true;\n\n        function check(rule) {\n          var handled = rule($injector, $location);\n\n          if (!handled) return false;\n          if (isString(handled)) $location.replace().url(handled);\n          return true;\n        }\n        var n = rules.length,\n            i;\n\n        for (i = 0; i < n; i++) {\n          if (check(rules[i])) return;\n        }\n        // always check otherwise last to allow dynamic updates to the set of rules\n        if (otherwise) check(otherwise);\n      }\n\n      function listen() {\n        listener = listener || $rootScope.$on('$locationChangeSuccess', update);\n        return listener;\n      }\n\n      if (!interceptDeferred) listen();\n\n      return {\n        /**\n         * @ngdoc function\n         * @name ui.router.router.$urlRouter#sync\n         * @methodOf ui.router.router.$urlRouter\n         *\n         * @description\n         * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n         * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n         * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n         * with the transition by calling `$urlRouter.sync()`.\n         *\n         * @example\n         * <pre>\n         * angular.module('app', ['ui.router'])\n         *   .run(function($rootScope, $urlRouter) {\n         *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n         *       // Halt state change from even starting\n         *       evt.preventDefault();\n         *       // Perform custom logic\n         *       var meetsRequirement = ...\n         *       // Continue with the update and state transition if logic allows\n         *       if (meetsRequirement) $urlRouter.sync();\n         *     });\n         * });\n         * </pre>\n         */\n        sync: function () {\n          update();\n        },\n\n        listen: function () {\n          return listen();\n        },\n\n        update: function (read) {\n          if (read) {\n            location = $location.url();\n            return;\n          }\n          if ($location.url() === location) return;\n\n          $location.url(location);\n          $location.replace();\n        },\n\n        push: function (urlMatcher, params, options) {\n          var url = urlMatcher.format(params || {});\n\n          // Handle the special hash param, if needed\n          if (url !== null && params && params['#']) {\n            url += '#' + params['#'];\n          }\n\n          $location.url(url);\n          lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;\n          if (options && options.replace) $location.replace();\n        },\n\n        /**\n         * @ngdoc function\n         * @name ui.router.router.$urlRouter#href\n         * @methodOf ui.router.router.$urlRouter\n         *\n         * @description\n         * A URL generation method that returns the compiled URL for a given\n         * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.\n         *\n         * @example\n         * <pre>\n         * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n         *   person: \"bob\"\n         * });\n         * // $bob == \"/about/bob\";\n         * </pre>\n         *\n         * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.\n         * @param {object=} params An object of parameter values to fill the matcher's required parameters.\n         * @param {object=} options Options object. The options are:\n         *\n         * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n         *\n         * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n         */\n        href: function (urlMatcher, params, options) {\n          if (!urlMatcher.validates(params)) return null;\n\n          var isHtml5 = $locationProvider.html5Mode();\n          if (angular.isObject(isHtml5)) {\n            isHtml5 = isHtml5.enabled;\n          }\n\n          isHtml5 = isHtml5 && $sniffer.history;\n\n          var url = urlMatcher.format(params);\n          options = options || {};\n\n          if (!isHtml5 && url !== null) {\n            url = \"#\" + $locationProvider.hashPrefix() + url;\n          }\n\n          // Handle special hash param, if needed\n          if (url !== null && params && params['#']) {\n            url += '#' + params['#'];\n          }\n\n          url = appendBasePath(url, isHtml5, options.absolute);\n\n          if (!options.absolute || !url) {\n            return url;\n          }\n\n          var slash = !isHtml5 && url ? '/' : '',\n              port = $location.port();\n          port = port === 80 || port === 443 ? '' : ':' + port;\n\n          return [$location.protocol(), '://', $location.host(), port, slash, url].join('');\n        }\n      };\n    }\n  }\n\n  angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$stateProvider\n   *\n   * @requires ui.router.router.$urlRouterProvider\n   * @requires ui.router.util.$urlMatcherFactoryProvider\n   *\n   * @description\n   * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n   * on state.\n   *\n   * A state corresponds to a \"place\" in the application in terms of the overall UI and\n   * navigation. A state describes (via the controller / template / view properties) what\n   * the UI looks like and does at that place.\n   *\n   * States often have things in common, and the primary way of factoring out these\n   * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n   * nested states.\n   *\n   * The `$stateProvider` provides interfaces to declare these states for your app.\n   */\n  $StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];\n  function $StateProvider($urlRouterProvider, $urlMatcherFactory) {\n\n    var root,\n        states = {},\n        $state,\n        queue = {},\n        abstractKey = 'abstract';\n\n    // Builds state properties from definition passed to registerState()\n    var stateBuilder = {\n\n      // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.\n      // state.children = [];\n      // if (parent) parent.children.push(state);\n      parent: function (state) {\n        if (isDefined(state.parent) && state.parent) return findState(state.parent);\n        // regex matches any valid composite state name\n        // would match \"contact.list\" but not \"contacts\"\n        var compositeName = /^(.+)\\.[^.]+$/.exec(state.name);\n        return compositeName ? findState(compositeName[1]) : root;\n      },\n\n      // inherit 'data' from parent and override by own values (if any)\n      data: function (state) {\n        if (state.parent && state.parent.data) {\n          state.data = state.self.data = inherit(state.parent.data, state.data);\n        }\n        return state.data;\n      },\n\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: function (state) {\n        var url = state.url,\n            config = { params: state.params || {} };\n\n        if (isString(url)) {\n          if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);\n          return (state.parent.navigable || root).url.concat(url, config);\n        }\n\n        if (!url || $urlMatcherFactory.isMatcher(url)) return url;\n        throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n      },\n\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: function (state) {\n        return state.url ? state : state.parent ? state.parent.navigable : null;\n      },\n\n      // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params\n      ownParams: function (state) {\n        var params = state.url && state.url.params || new $$UMFP.ParamSet();\n        forEach(state.params || {}, function (config, id) {\n          if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, \"config\");\n        });\n        return params;\n      },\n\n      // Derive parameters for this state and ensure they're a super-set of parent's parameters\n      params: function (state) {\n        var ownParams = pick(state.ownParams, state.ownParams.$$keys());\n        return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();\n      },\n\n      // If there is no explicit multi-view configuration, make one up so we don't have\n      // to handle both cases in the view directive later. Note that having an explicit\n      // 'views' property will mean the default unnamed view properties are ignored. This\n      // is also a good time to resolve view names to absolute names, so everything is a\n      // straight lookup at link time.\n      views: function (state) {\n        var views = {};\n\n        forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {\n          if (name.indexOf('@') < 0) name += '@' + state.parent.name;\n          view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';\n          views[name] = view;\n        });\n        return views;\n      },\n\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: function (state) {\n        return state.parent ? state.parent.path.concat(state) : []; // exclude root from path\n      },\n\n      // Speed up $state.contains() as it's used a lot\n      includes: function (state) {\n        var includes = state.parent ? extend({}, state.parent.includes) : {};\n        includes[state.name] = true;\n        return includes;\n      },\n\n      $delegates: {}\n    };\n\n    function isRelative(stateName) {\n      return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n    }\n\n    function findState(stateOrName, base) {\n      if (!stateOrName) return undefined;\n\n      var isStr = isString(stateOrName),\n          name = isStr ? stateOrName : stateOrName.name,\n          path = isRelative(name);\n\n      if (path) {\n        if (!base) throw new Error(\"No reference point given for path '\" + name + \"'\");\n        base = findState(base);\n\n        var rel = name.split(\".\"),\n            i = 0,\n            pathLength = rel.length,\n            current = base;\n\n        for (; i < pathLength; i++) {\n          if (rel[i] === \"\" && i === 0) {\n            current = base;\n            continue;\n          }\n          if (rel[i] === \"^\") {\n            if (!current.parent) throw new Error(\"Path '\" + name + \"' not valid for state '\" + base.name + \"'\");\n            current = current.parent;\n            continue;\n          }\n          break;\n        }\n        rel = rel.slice(i).join(\".\");\n        name = current.name + (current.name && rel ? \".\" : \"\") + rel;\n      }\n      var state = states[name];\n\n      if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {\n        return state;\n      }\n      return undefined;\n    }\n\n    function queueState(parentName, state) {\n      if (!queue[parentName]) {\n        queue[parentName] = [];\n      }\n      queue[parentName].push(state);\n    }\n\n    function flushQueuedChildren(parentName) {\n      var queued = queue[parentName] || [];\n      while (queued.length) {\n        registerState(queued.shift());\n      }\n    }\n\n    function registerState(state) {\n      // Wrap a new object around the state so we can store our private details easily.\n      state = inherit(state, {\n        self: state,\n        resolve: state.resolve || {},\n        toString: function () {\n          return this.name;\n        }\n      });\n\n      var name = state.name;\n      if (!isString(name) || name.indexOf('@') >= 0) throw new Error(\"State must have a valid name\");\n      if (states.hasOwnProperty(name)) throw new Error(\"State '\" + name + \"' is already defined\");\n\n      // Get parent name\n      var parentName = name.indexOf('.') !== -1 ? name.substring(0, name.lastIndexOf('.')) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : '';\n\n      // If parent is not registered yet, add state to queue and register later\n      if (parentName && !states[parentName]) {\n        return queueState(parentName, state.self);\n      }\n\n      for (var key in stateBuilder) {\n        if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);\n      }\n      states[name] = state;\n\n      // Register the state in the global state list and with $urlRouter if necessary.\n      if (!state[abstractKey] && state.url) {\n        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n          if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {\n            $state.transitionTo(state, $match, { inherit: true, location: false });\n          }\n        }]);\n      }\n\n      // Register any queued children\n      flushQueuedChildren(name);\n\n      return state;\n    }\n\n    // Checks text to see if it looks like a glob.\n    function isGlob(text) {\n      return text.indexOf('*') > -1;\n    }\n\n    // Returns true if glob matches current $state name.\n    function doesStateMatchGlob(glob) {\n      var globSegments = glob.split('.'),\n          segments = $state.$current.name.split('.');\n\n      //match single stars\n      for (var i = 0, l = globSegments.length; i < l; i++) {\n        if (globSegments[i] === '*') {\n          segments[i] = '*';\n        }\n      }\n\n      //match greedy starts\n      if (globSegments[0] === '**') {\n        segments = segments.slice(indexOf(segments, globSegments[1]));\n        segments.unshift('**');\n      }\n      //match greedy ends\n      if (globSegments[globSegments.length - 1] === '**') {\n        segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);\n        segments.push('**');\n      }\n\n      if (globSegments.length != segments.length) {\n        return false;\n      }\n\n      return segments.join('') === globSegments.join('');\n    }\n\n    // Implicit root state that is always active\n    root = registerState({\n      name: '',\n      url: '^',\n      views: null,\n      'abstract': true\n    });\n    root.navigable = null;\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$stateProvider#decorator\n     * @methodOf ui.router.state.$stateProvider\n     *\n     * @description\n     * Allows you to extend (carefully) or override (at your own peril) the \n     * `stateBuilder` object used internally by `$stateProvider`. This can be used \n     * to add custom functionality to ui-router, for example inferring templateUrl \n     * based on the state name.\n     *\n     * When passing only a name, it returns the current (original or decorated) builder\n     * function that matches `name`.\n     *\n     * The builder functions that can be decorated are listed below. Though not all\n     * necessarily have a good use case for decoration, that is up to you to decide.\n     *\n     * In addition, users can attach custom decorators, which will generate new \n     * properties within the state's internal definition. There is currently no clear \n     * use-case for this beyond accessing internal states (i.e. $state.$current), \n     * however, expect this to become increasingly relevant as we introduce additional \n     * meta-programming features.\n     *\n     * **Warning**: Decorators should not be interdependent because the order of \n     * execution of the builder functions in non-deterministic. Builder functions \n     * should only be dependent on the state definition object and super function.\n     *\n     *\n     * Existing builder functions and current return values:\n     *\n     * - **parent** `{object}` - returns the parent state object.\n     * - **data** `{object}` - returns state data, including any inherited data that is not\n     *   overridden by own values (if any).\n     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n     *   or `null`.\n     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is \n     *   navigable).\n     * - **params** `{object}` - returns an array of state params that are ensured to \n     *   be a super-set of parent's params.\n     * - **views** `{object}` - returns a views object where each key is an absolute view \n     *   name (i.e. \"viewName@stateName\") and each value is the config object \n     *   (template, controller) for the view. Even when you don't use the views object \n     *   explicitly on a state config, one is still created for you internally.\n     *   So by decorating this builder function you have access to decorating template \n     *   and controller properties.\n     * - **ownParams** `{object}` - returns an array of params that belong to the state, \n     *   not including any params defined by ancestor states.\n     * - **path** `{string}` - returns the full path from the root down to this state. \n     *   Needed for state activation.\n     * - **includes** `{object}` - returns an object that includes every state that \n     *   would pass a `$state.includes()` test.\n     *\n     * @example\n     * <pre>\n     * // Override the internal 'views' builder with a function that takes the state\n     * // definition, and a reference to the internal function being overridden:\n     * $stateProvider.decorator('views', function (state, parent) {\n     *   var result = {},\n     *       views = parent(state);\n     *\n     *   angular.forEach(views, function (config, name) {\n     *     var autoName = (state.name + '.' + name).replace('.', '/');\n     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n     *     result[name] = config;\n     *   });\n     *   return result;\n     * });\n     *\n     * $stateProvider.state('home', {\n     *   views: {\n     *     'contact.list': { controller: 'ListController' },\n     *     'contact.item': { controller: 'ItemController' }\n     *   }\n     * });\n     *\n     * // ...\n     *\n     * $state.go('home');\n     * // Auto-populates list and item views with /partials/home/contact/list.html,\n     * // and /partials/home/contact/item.html, respectively.\n     * </pre>\n     *\n     * @param {string} name The name of the builder function to decorate. \n     * @param {object} func A function that is responsible for decorating the original \n     * builder function. The function receives two parameters:\n     *\n     *   - `{object}` - state - The state config object.\n     *   - `{object}` - super - The original builder function.\n     *\n     * @return {object} $stateProvider - $stateProvider instance\n     */\n    this.decorator = decorator;\n    function decorator(name, func) {\n      /*jshint validthis: true */\n      if (isString(name) && !isDefined(func)) {\n        return stateBuilder[name];\n      }\n      if (!isFunction(func) || !isString(name)) {\n        return this;\n      }\n      if (stateBuilder[name] && !stateBuilder.$delegates[name]) {\n        stateBuilder.$delegates[name] = stateBuilder[name];\n      }\n      stateBuilder[name] = func;\n      return this;\n    }\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$stateProvider#state\n     * @methodOf ui.router.state.$stateProvider\n     *\n     * @description\n     * Registers a state configuration under a given state name. The stateConfig object\n     * has the following acceptable properties.\n     *\n     * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n     * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n     * @param {object} stateConfig State configuration object.\n     * @param {string|function=} stateConfig.template\n     * <a id='template'></a>\n     *   html template as a string or a function that returns\n     *   an html template as a string which should be used by the uiView directives. This property \n     *   takes precedence over templateUrl.\n     *   \n     *   If `template` is a function, it will be called with the following parameters:\n     *\n     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n     *     applying the current state\n     *\n     * <pre>template:\n     *   \"<h1>inline template definition</h1>\" +\n     *   \"<div ui-view></div>\"</pre>\n     * <pre>template: function(params) {\n     *       return \"<h1>generated template</h1>\"; }</pre>\n     * </div>\n     *\n     * @param {string|function=} stateConfig.templateUrl\n     * <a id='templateUrl'></a>\n     *\n     *   path or function that returns a path to an html\n     *   template that should be used by uiView.\n     *   \n     *   If `templateUrl` is a function, it will be called with the following parameters:\n     *\n     *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by \n     *     applying the current state\n     *\n     * <pre>templateUrl: \"home.html\"</pre>\n     * <pre>templateUrl: function(params) {\n     *     return myTemplates[params.pageId]; }</pre>\n     *\n     * @param {function=} stateConfig.templateProvider\n     * <a id='templateProvider'></a>\n     *    Provider function that returns HTML content string.\n     * <pre> templateProvider:\n     *       function(MyTemplateService, params) {\n     *         return MyTemplateService.getTemplate(params.pageId);\n     *       }</pre>\n     *\n     * @param {string|function=} stateConfig.controller\n     * <a id='controller'></a>\n     *\n     *  Controller fn that should be associated with newly\n     *   related scope or the name of a registered controller if passed as a string.\n     *   Optionally, the ControllerAs may be declared here.\n     * <pre>controller: \"MyRegisteredController\"</pre>\n     * <pre>controller:\n     *     \"MyRegisteredController as fooCtrl\"}</pre>\n     * <pre>controller: function($scope, MyService) {\n     *     $scope.data = MyService.getData(); }</pre>\n     *\n     * @param {function=} stateConfig.controllerProvider\n     * <a id='controllerProvider'></a>\n     *\n     * Injectable provider function that returns the actual controller or string.\n     * <pre>controllerProvider:\n     *   function(MyResolveData) {\n     *     if (MyResolveData.foo)\n     *       return \"FooCtrl\"\n     *     else if (MyResolveData.bar)\n     *       return \"BarCtrl\";\n     *     else return function($scope) {\n     *       $scope.baz = \"Qux\";\n     *     }\n     *   }</pre>\n     *\n     * @param {string=} stateConfig.controllerAs\n     * <a id='controllerAs'></a>\n     * \n     * A controller alias name. If present the controller will be\n     *   published to scope under the controllerAs name.\n     * <pre>controllerAs: \"myCtrl\"</pre>\n     *\n     * @param {string|object=} stateConfig.parent\n     * <a id='parent'></a>\n     * Optionally specifies the parent state of this state.\n     *\n     * <pre>parent: 'parentState'</pre>\n     * <pre>parent: parentState // JS variable</pre>\n     *\n     * @param {object=} stateConfig.resolve\n     * <a id='resolve'></a>\n     *\n     * An optional map&lt;string, function&gt; of dependencies which\n     *   should be injected into the controller. If any of these dependencies are promises, \n     *   the router will wait for them all to be resolved before the controller is instantiated.\n     *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired\n     *   and the values of the resolved promises are injected into any controllers that reference them.\n     *   If any  of the promises are rejected the $stateChangeError event is fired.\n     *\n     *   The map object is:\n     *   \n     *   - key - {string}: name of dependency to be injected into controller\n     *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, \n     *     it is injected and return value it treated as dependency. If result is a promise, it is \n     *     resolved before its value is injected into controller.\n     *\n     * <pre>resolve: {\n     *     myResolve1:\n     *       function($http, $stateParams) {\n     *         return $http.get(\"/api/foos/\"+stateParams.fooID);\n     *       }\n     *     }</pre>\n     *\n     * @param {string=} stateConfig.url\n     * <a id='url'></a>\n     *\n     *   A url fragment with optional parameters. When a state is navigated or\n     *   transitioned to, the `$stateParams` service will be populated with any \n     *   parameters that were passed.\n     *\n     *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for\n     *   more details on acceptable patterns )\n     *\n     * examples:\n     * <pre>url: \"/home\"\n     * url: \"/users/:userid\"\n     * url: \"/books/{bookid:[a-zA-Z_-]}\"\n     * url: \"/books/{categoryid:int}\"\n     * url: \"/books/{publishername:string}/{categoryid:int}\"\n     * url: \"/messages?before&after\"\n     * url: \"/messages?{before:date}&{after:date}\"\n     * url: \"/messages/:mailboxid?{before:date}&{after:date}\"\n     * </pre>\n     *\n     * @param {object=} stateConfig.views\n     * <a id='views'></a>\n     * an optional map&lt;string, object&gt; which defined multiple views, or targets views\n     * manually/explicitly.\n     *\n     * Examples:\n     *\n     * Targets three named `ui-view`s in the parent state's template\n     * <pre>views: {\n     *     header: {\n     *       controller: \"headerCtrl\",\n     *       templateUrl: \"header.html\"\n     *     }, body: {\n     *       controller: \"bodyCtrl\",\n     *       templateUrl: \"body.html\"\n     *     }, footer: {\n     *       controller: \"footCtrl\",\n     *       templateUrl: \"footer.html\"\n     *     }\n     *   }</pre>\n     *\n     * Targets named `ui-view=\"header\"` from grandparent state 'top''s template, and named `ui-view=\"body\" from parent state's template.\n     * <pre>views: {\n     *     'header@top': {\n     *       controller: \"msgHeaderCtrl\",\n     *       templateUrl: \"msgHeader.html\"\n     *     }, 'body': {\n     *       controller: \"messagesCtrl\",\n     *       templateUrl: \"messages.html\"\n     *     }\n     *   }</pre>\n     *\n     * @param {boolean=} [stateConfig.abstract=false]\n     * <a id='abstract'></a>\n     * An abstract state will never be directly activated,\n     *   but can provide inherited properties to its common children states.\n     * <pre>abstract: true</pre>\n     *\n     * @param {function=} stateConfig.onEnter\n     * <a id='onEnter'></a>\n     *\n     * Callback function for when a state is entered. Good way\n     *   to trigger an action or dispatch an event, such as opening a dialog.\n     * If minifying your scripts, make sure to explicitly annotate this function,\n     * because it won't be automatically annotated by your build tools.\n     *\n     * <pre>onEnter: function(MyService, $stateParams) {\n     *     MyService.foo($stateParams.myParam);\n     * }</pre>\n     *\n     * @param {function=} stateConfig.onExit\n     * <a id='onExit'></a>\n     *\n     * Callback function for when a state is exited. Good way to\n     *   trigger an action or dispatch an event, such as opening a dialog.\n     * If minifying your scripts, make sure to explicitly annotate this function,\n     * because it won't be automatically annotated by your build tools.\n     *\n     * <pre>onExit: function(MyService, $stateParams) {\n     *     MyService.cleanup($stateParams.myParam);\n     * }</pre>\n     *\n     * @param {boolean=} [stateConfig.reloadOnSearch=true]\n     * <a id='reloadOnSearch'></a>\n     *\n     * If `false`, will not retrigger the same state\n     *   just because a search/query parameter has changed (via $location.search() or $location.hash()). \n     *   Useful for when you'd like to modify $location.search() without triggering a reload.\n     * <pre>reloadOnSearch: false</pre>\n     *\n     * @param {object=} stateConfig.data\n     * <a id='data'></a>\n     *\n     * Arbitrary data object, useful for custom configuration.  The parent state's `data` is\n     *   prototypally inherited.  In other words, adding a data property to a state adds it to\n     *   the entire subtree via prototypal inheritance.\n     *\n     * <pre>data: {\n     *     requiredRole: 'foo'\n     * } </pre>\n     *\n     * @param {object=} stateConfig.params\n     * <a id='params'></a>\n     *\n     * A map which optionally configures parameters declared in the `url`, or\n     *   defines additional non-url parameters.  For each parameter being\n     *   configured, add a configuration object keyed to the name of the parameter.\n     *\n     *   Each parameter configuration object may contain the following properties:\n     *\n     *   - ** value ** - {object|function=}: specifies the default value for this\n     *     parameter.  This implicitly sets this parameter as optional.\n     *\n     *     When UI-Router routes to a state and no value is\n     *     specified for this parameter in the URL or transition, the\n     *     default value will be used instead.  If `value` is a function,\n     *     it will be injected and invoked, and the return value used.\n     *\n     *     *Note*: `undefined` is treated as \"no default value\" while `null`\n     *     is treated as \"the default value is `null`\".\n     *\n     *     *Shorthand*: If you only need to configure the default value of the\n     *     parameter, you may use a shorthand syntax.   In the **`params`**\n     *     map, instead mapping the param name to a full parameter configuration\n     *     object, simply set map it to the default parameter value, e.g.:\n     *\n     * <pre>// define a parameter's default value\n     * params: {\n     *     param1: { value: \"defaultValue\" }\n     * }\n     * // shorthand default values\n     * params: {\n     *     param1: \"defaultValue\",\n     *     param2: \"param2Default\"\n     * }</pre>\n     *\n     *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be\n     *     treated as an array of values.  If you specified a Type, the value will be\n     *     treated as an array of the specified Type.  Note: query parameter values\n     *     default to a special `\"auto\"` mode.\n     *\n     *     For query parameters in `\"auto\"` mode, if multiple  values for a single parameter\n     *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values\n     *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if\n     *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single\n     *     value (e.g.: `{ foo: '1' }`).\n     *\n     * <pre>params: {\n     *     param1: { array: true }\n     * }</pre>\n     *\n     *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when\n     *     the current parameter value is the same as the default value. If `squash` is not set, it uses the\n     *     configured default squash policy.\n     *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})\n     *\n     *   There are three squash settings:\n     *\n     *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL\n     *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed\n     *       by slashes in the state's `url` declaration, then one of those slashes are omitted.\n     *       This can allow for cleaner looking URLs.\n     *     - `\"<arbitrary string>\"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.\n     *\n     * <pre>params: {\n     *     param1: {\n     *       value: \"defaultId\",\n     *       squash: true\n     * } }\n     * // squash \"defaultValue\" to \"~\"\n     * params: {\n     *     param1: {\n     *       value: \"defaultValue\",\n     *       squash: \"~\"\n     * } }\n     * </pre>\n     *\n     *\n     * @example\n     * <pre>\n     * // Some state name examples\n     *\n     * // stateName can be a single top-level name (must be unique).\n     * $stateProvider.state(\"home\", {});\n     *\n     * // Or it can be a nested state name. This state is a child of the\n     * // above \"home\" state.\n     * $stateProvider.state(\"home.newest\", {});\n     *\n     * // Nest states as deeply as needed.\n     * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n     *\n     * // state() returns $stateProvider, so you can chain state declarations.\n     * $stateProvider\n     *   .state(\"home\", {})\n     *   .state(\"about\", {})\n     *   .state(\"contacts\", {});\n     * </pre>\n     *\n     */\n    this.state = state;\n    function state(name, definition) {\n      /*jshint validthis: true */\n      if (isObject(name)) definition = name;else definition.name = name;\n      registerState(definition);\n      return this;\n    }\n\n    /**\n     * @ngdoc object\n     * @name ui.router.state.$state\n     *\n     * @requires $rootScope\n     * @requires $q\n     * @requires ui.router.state.$view\n     * @requires $injector\n     * @requires ui.router.util.$resolve\n     * @requires ui.router.state.$stateParams\n     * @requires ui.router.router.$urlRouter\n     *\n     * @property {object} params A param object, e.g. {sectionId: section.id)}, that \n     * you'd like to test against the current active state.\n     * @property {object} current A reference to the state's config object. However \n     * you passed it in. Useful for accessing custom data.\n     * @property {object} transition Currently pending transition. A promise that'll \n     * resolve or reject.\n     *\n     * @description\n     * `$state` service is responsible for representing states as well as transitioning\n     * between them. It also provides interfaces to ask for current state or even states\n     * you're coming from.\n     */\n    this.$get = $get;\n    $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];\n    function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {\n\n      var TransitionSupersededError = new Error('transition superseded');\n\n      var TransitionSuperseded = silenceUncaughtInPromise($q.reject(TransitionSupersededError));\n      var TransitionPrevented = silenceUncaughtInPromise($q.reject(new Error('transition prevented')));\n      var TransitionAborted = silenceUncaughtInPromise($q.reject(new Error('transition aborted')));\n      var TransitionFailed = silenceUncaughtInPromise($q.reject(new Error('transition failed')));\n\n      // Handles the case where a state which is the target of a transition is not found, and the user\n      // can optionally retry or defer the transition\n      function handleRedirect(redirect, state, params, options) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateNotFound\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired when a requested state **cannot be found** using the provided state name during transition.\n         * The event is broadcast allowing any handlers a single chance to deal with the error (usually by\n         * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,\n         * you can see its three properties in the example. You can use `event.preventDefault()` to abort the\n         * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.\n         *\n         * @param {Object} event Event object.\n         * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.\n         * @param {State} fromState Current state object.\n         * @param {Object} fromParams Current state params.\n         *\n         * @example\n         *\n         * <pre>\n         * // somewhere, assume lazy.state has not been defined\n         * $state.go(\"lazy.state\", {a:1, b:2}, {inherit:false});\n         *\n         * // somewhere else\n         * $scope.$on('$stateNotFound',\n         * function(event, unfoundState, fromState, fromParams){\n         *     console.log(unfoundState.to); // \"lazy.state\"\n         *     console.log(unfoundState.toParams); // {a:1, b:2}\n         *     console.log(unfoundState.options); // {inherit:false} + default options\n         * })\n         * </pre>\n         */\n        var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);\n\n        if (evt.defaultPrevented) {\n          $urlRouter.update();\n          return TransitionAborted;\n        }\n\n        if (!evt.retry) {\n          return null;\n        }\n\n        // Allow the handler to return a promise to defer state lookup retry\n        if (options.$retry) {\n          $urlRouter.update();\n          return TransitionFailed;\n        }\n        var retryTransition = $state.transition = $q.when(evt.retry);\n\n        retryTransition.then(function () {\n          if (retryTransition !== $state.transition) {\n            $rootScope.$broadcast('$stateChangeCancel', redirect.to, redirect.toParams, state, params);\n            return TransitionSuperseded;\n          }\n          redirect.options.$retry = true;\n          return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);\n        }, function () {\n          return TransitionAborted;\n        });\n        $urlRouter.update();\n\n        return retryTransition;\n      }\n\n      root.locals = { resolve: null, globals: { $stateParams: {} } };\n\n      $state = {\n        params: {},\n        current: root.self,\n        $current: root,\n        transition: null\n      };\n\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$state#reload\n       * @methodOf ui.router.state.$state\n       *\n       * @description\n       * A method that force reloads the current state. All resolves are re-resolved,\n       * controllers reinstantiated, and events re-fired.\n       *\n       * @example\n       * <pre>\n       * var app angular.module('app', ['ui.router']);\n       *\n       * app.controller('ctrl', function ($scope, $state) {\n       *   $scope.reload = function(){\n       *     $state.reload();\n       *   }\n       * });\n       * </pre>\n       *\n       * `reload()` is just an alias for:\n       * <pre>\n       * $state.transitionTo($state.current, $stateParams, { \n       *   reload: true, inherit: false, notify: true\n       * });\n       * </pre>\n       *\n       * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.\n       * @example\n       * <pre>\n       * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' \n       * //and current state is 'contacts.detail.item'\n       * var app angular.module('app', ['ui.router']);\n       *\n       * app.controller('ctrl', function ($scope, $state) {\n       *   $scope.reload = function(){\n       *     //will reload 'contact.detail' and 'contact.detail.item' states\n       *     $state.reload('contact.detail');\n       *   }\n       * });\n       * </pre>\n       *\n       * `reload()` is just an alias for:\n       * <pre>\n       * $state.transitionTo($state.current, $stateParams, { \n       *   reload: true, inherit: false, notify: true\n       * });\n       * </pre>\n        * @returns {promise} A promise representing the state of the new transition. See\n       * {@link ui.router.state.$state#methods_go $state.go}.\n       */\n      $state.reload = function reload(state) {\n        return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true });\n      };\n\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$state#go\n       * @methodOf ui.router.state.$state\n       *\n       * @description\n       * Convenience method for transitioning to a new state. `$state.go` calls \n       * `$state.transitionTo` internally but automatically sets options to \n       * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. \n       * This allows you to easily use an absolute or relative to path and specify \n       * only the parameters you'd like to update (while letting unspecified parameters \n       * inherit from the currently active ancestor states).\n       *\n       * @example\n       * <pre>\n       * var app = angular.module('app', ['ui.router']);\n       *\n       * app.controller('ctrl', function ($scope, $state) {\n       *   $scope.changeState = function () {\n       *     $state.go('contact.detail');\n       *   };\n       * });\n       * </pre>\n       * <img src='../ngdoc_assets/StateGoExamples.png'/>\n       *\n       * @param {string} to Absolute state name or relative state path. Some examples:\n       *\n       * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n       * - `$state.go('^')` - will go to a parent state\n       * - `$state.go('^.sibling')` - will go to a sibling state\n       * - `$state.go('.child.grandchild')` - will go to grandchild state\n       *\n       * @param {object=} params A map of the parameters that will be sent to the state, \n       * will populate $stateParams. Any parameters that are not specified will be inherited from currently \n       * defined parameters. Only parameters specified in the state definition can be overridden, new \n       * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters\n       * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n       * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n       * will get you all current parameters, etc.\n       * @param {object=} options Options object. The options are:\n       *\n       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n       *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n       * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n       *    defines which state to be relative from.\n       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n       * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params\n       *    have changed.  It will reload the resolves and views of the current state and parent states.\n       *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \\\n       *    the transition reloads the resolves and views for that matched state, and all its children states.\n       *\n       * @returns {promise} A promise representing the state of the new transition.\n       *\n       * Possible success values:\n       *\n       * - $state.current\n       *\n       * <br/>Possible rejection values:\n       *\n       * - 'transition superseded' - when a newer transition has been started after this one\n       * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n       * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n       *   when a `$stateNotFound` `event.retry` promise errors.\n       * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n       * - *resolve error* - when an error has occurred with a `resolve`\n       *\n       */\n      $state.go = function go(to, params, options) {\n        return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));\n      };\n\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$state#transitionTo\n       * @methodOf ui.router.state.$state\n       *\n       * @description\n       * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n       * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n       *\n       * @example\n       * <pre>\n       * var app = angular.module('app', ['ui.router']);\n       *\n       * app.controller('ctrl', function ($scope, $state) {\n       *   $scope.changeState = function () {\n       *     $state.transitionTo('contact.detail');\n       *   };\n       * });\n       * </pre>\n       *\n       * @param {string} to State name.\n       * @param {object=} toParams A map of the parameters that will be sent to the state,\n       * will populate $stateParams.\n       * @param {object=} options Options object. The options are:\n       *\n       * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n       *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n       * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n       * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), \n       *    defines which state to be relative from.\n       * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n       * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params \n       *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n       *    use this when you want to force a reload when *everything* is the same, including search params.\n       *    if String, then will reload the state with the name given in reload, and any children.\n       *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.\n       *\n       * @returns {promise} A promise representing the state of the new transition. See\n       * {@link ui.router.state.$state#methods_go $state.go}.\n       */\n      $state.transitionTo = function transitionTo(to, toParams, options) {\n        toParams = toParams || {};\n        options = extend({\n          location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false\n        }, options || {});\n\n        var from = $state.$current,\n            fromParams = $state.params,\n            fromPath = from.path;\n        var evt,\n            toState = findState(to, options.relative);\n\n        // Store the hash param for later (since it will be stripped out by various methods)\n        var hash = toParams['#'];\n\n        if (!isDefined(toState)) {\n          var redirect = { to: to, toParams: toParams, options: options };\n          var redirectResult = handleRedirect(redirect, from.self, fromParams, options);\n\n          if (redirectResult) {\n            return redirectResult;\n          }\n\n          // Always retry once if the $stateNotFound was not prevented\n          // (handles either redirect changed or state lazy-definition)\n          to = redirect.to;\n          toParams = redirect.toParams;\n          options = redirect.options;\n          toState = findState(to, options.relative);\n\n          if (!isDefined(toState)) {\n            if (!options.relative) throw new Error(\"No such state '\" + to + \"'\");\n            throw new Error(\"Could not resolve '\" + to + \"' from state '\" + options.relative + \"'\");\n          }\n        }\n        if (toState[abstractKey]) throw new Error(\"Cannot transition to abstract state '\" + to + \"'\");\n        if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);\n        if (!toState.params.$$validates(toParams)) return TransitionFailed;\n\n        toParams = toState.params.$$values(toParams);\n        to = toState;\n\n        var toPath = to.path;\n\n        // Starting from the root of the path, keep all levels that haven't changed\n        var keep = 0,\n            state = toPath[keep],\n            locals = root.locals,\n            toLocals = [];\n\n        if (!options.reload) {\n          while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {\n            locals = toLocals[keep] = state.locals;\n            keep++;\n            state = toPath[keep];\n          }\n        } else if (isString(options.reload) || isObject(options.reload)) {\n          if (isObject(options.reload) && !options.reload.name) {\n            throw new Error('Invalid reload state object');\n          }\n\n          var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);\n          if (options.reload && !reloadState) {\n            throw new Error(\"No such reload state '\" + (isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n          }\n\n          while (state && state === fromPath[keep] && state !== reloadState) {\n            locals = toLocals[keep] = state.locals;\n            keep++;\n            state = toPath[keep];\n          }\n        }\n\n        // If we're going to the same state and all locals are kept, we've got nothing to do.\n        // But clear 'transition', as we still want to cancel any other pending transitions.\n        // TODO: We may not want to bump 'transition' if we're called from a location change\n        // that we've initiated ourselves, because we might accidentally abort a legitimate\n        // transition initiated from code?\n        if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {\n          if (hash) toParams['#'] = hash;\n          $state.params = toParams;\n          copy($state.params, $stateParams);\n          copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);\n          if (options.location && to.navigable && to.navigable.url) {\n            $urlRouter.push(to.navigable.url, toParams, {\n              $$avoidResync: true, replace: options.location === 'replace'\n            });\n            $urlRouter.update(true);\n          }\n          $state.transition = null;\n          return $q.when($state.current);\n        }\n\n        // Filter parameters before we pass them to event handlers etc.\n        toParams = filterByKeys(to.params.$$keys(), toParams || {});\n\n        // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart\n        if (hash) toParams['#'] = hash;\n\n        // Broadcast start event and cancel the transition if requested\n        if (options.notify) {\n          /**\n           * @ngdoc event\n           * @name ui.router.state.$state#$stateChangeStart\n           * @eventOf ui.router.state.$state\n           * @eventType broadcast on root scope\n           * @description\n           * Fired when the state transition **begins**. You can use `event.preventDefault()`\n           * to prevent the transition from happening and then the transition promise will be\n           * rejected with a `'transition prevented'` value.\n           *\n           * @param {Object} event Event object.\n           * @param {State} toState The state being transitioned to.\n           * @param {Object} toParams The params supplied to the `toState`.\n           * @param {State} fromState The current state, pre-transition.\n           * @param {Object} fromParams The params supplied to the `fromState`.\n           *\n           * @example\n           *\n           * <pre>\n           * $rootScope.$on('$stateChangeStart',\n           * function(event, toState, toParams, fromState, fromParams){\n           *     event.preventDefault();\n           *     // transitionTo() promise will be rejected with\n           *     // a 'transition prevented' error\n           * })\n           * </pre>\n           */\n          if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {\n            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n            //Don't update and resync url if there's been a new transition started. see issue #2238, #600\n            if ($state.transition == null) $urlRouter.update();\n            return TransitionPrevented;\n          }\n        }\n\n        // Resolve locals for the remaining states, but don't update any global state just\n        // yet -- if anything fails to resolve the current state needs to remain untouched.\n        // We also set up an inheritance chain for the locals here. This allows the view directive\n        // to quickly look up the correct definition for each view in the current state. Even\n        // though we create the locals object itself outside resolveState(), it is initially\n        // empty and gets filled asynchronously. We need to keep track of the promise for the\n        // (fully resolved) current locals, and pass this down the chain.\n        var resolved = $q.when(locals);\n\n        for (var l = keep; l < toPath.length; l++, state = toPath[l]) {\n          locals = toLocals[l] = inherit(locals);\n          resolved = resolveState(state, toParams, state === to, resolved, locals, options);\n        }\n\n        // Once everything is resolved, we are ready to perform the actual transition\n        // and return a promise for the new state. We also keep track of what the\n        // current promise is, so that we can detect overlapping transitions and\n        // keep only the outcome of the last transition.\n        var transition = $state.transition = resolved.then(function () {\n          var l, entering, exiting;\n\n          if ($state.transition !== transition) {\n            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n            return TransitionSuperseded;\n          }\n\n          // Exit 'from' states not kept\n          for (l = fromPath.length - 1; l >= keep; l--) {\n            exiting = fromPath[l];\n            if (exiting.self.onExit) {\n              $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);\n            }\n            exiting.locals = null;\n          }\n\n          // Enter 'to' states not kept\n          for (l = keep; l < toPath.length; l++) {\n            entering = toPath[l];\n            entering.locals = toLocals[l];\n            if (entering.self.onEnter) {\n              $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);\n            }\n          }\n\n          // Run it again, to catch any transitions in callbacks\n          if ($state.transition !== transition) {\n            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n            return TransitionSuperseded;\n          }\n\n          // Update globals in $state\n          $state.$current = to;\n          $state.current = to.self;\n          $state.params = toParams;\n          copy($state.params, $stateParams);\n          $state.transition = null;\n\n          if (options.location && to.navigable) {\n            $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {\n              $$avoidResync: true, replace: options.location === 'replace'\n            });\n          }\n\n          if (options.notify) {\n            /**\n             * @ngdoc event\n             * @name ui.router.state.$state#$stateChangeSuccess\n             * @eventOf ui.router.state.$state\n             * @eventType broadcast on root scope\n             * @description\n             * Fired once the state transition is **complete**.\n             *\n             * @param {Object} event Event object.\n             * @param {State} toState The state being transitioned to.\n             * @param {Object} toParams The params supplied to the `toState`.\n             * @param {State} fromState The current state, pre-transition.\n             * @param {Object} fromParams The params supplied to the `fromState`.\n             */\n            $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);\n          }\n          $urlRouter.update(true);\n\n          return $state.current;\n        }).then(null, function (error) {\n          // propagate TransitionSuperseded error without emitting $stateChangeCancel\n          // as it was already emitted in the success handler above\n          if (error === TransitionSupersededError) return TransitionSuperseded;\n\n          if ($state.transition !== transition) {\n            $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n            return TransitionSuperseded;\n          }\n\n          $state.transition = null;\n          /**\n           * @ngdoc event\n           * @name ui.router.state.$state#$stateChangeError\n           * @eventOf ui.router.state.$state\n           * @eventType broadcast on root scope\n           * @description\n           * Fired when an **error occurs** during transition. It's important to note that if you\n           * have any errors in your resolve functions (javascript errors, non-existent services, etc)\n           * they will not throw traditionally. You must listen for this $stateChangeError event to\n           * catch **ALL** errors.\n           *\n           * @param {Object} event Event object.\n           * @param {State} toState The state being transitioned to.\n           * @param {Object} toParams The params supplied to the `toState`.\n           * @param {State} fromState The current state, pre-transition.\n           * @param {Object} fromParams The params supplied to the `fromState`.\n           * @param {Error} error The resolve error object.\n           */\n          evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);\n\n          if (!evt.defaultPrevented) {\n            $urlRouter.update();\n          }\n\n          return $q.reject(error);\n        });\n\n        silenceUncaughtInPromise(transition);\n        return transition;\n      };\n\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$state#is\n       * @methodOf ui.router.state.$state\n       *\n       * @description\n       * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n       * but only checks for the full state name. If params is supplied then it will be\n       * tested for strict equality against the current active params object, so all params\n       * must match with none missing and no extras.\n       *\n       * @example\n       * <pre>\n       * $state.$current.name = 'contacts.details.item';\n       *\n       * // absolute name\n       * $state.is('contact.details.item'); // returns true\n       * $state.is(contactDetailItemStateObject); // returns true\n       *\n       * // relative name (. and ^), typically from a template\n       * // E.g. from the 'contacts.details' template\n       * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n       * </pre>\n       *\n       * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n       * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n       * to test against the current active state.\n       * @param {object=} options An options object.  The options are:\n       *\n       * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n       * test relative to `options.relative` state (or name).\n       *\n       * @returns {boolean} Returns true if it is the state.\n       */\n      $state.is = function is(stateOrName, params, options) {\n        options = extend({ relative: $state.$current }, options || {});\n        var state = findState(stateOrName, options.relative);\n\n        if (!isDefined(state)) {\n          return undefined;\n        }\n        if ($state.$current !== state) {\n          return false;\n        }\n\n        return !params || objectKeys(params).reduce(function (acc, key) {\n          var paramDef = state.params[key];\n          return acc && !paramDef || paramDef.type.equals($stateParams[key], params[key]);\n        }, true);\n      };\n\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$state#includes\n       * @methodOf ui.router.state.$state\n       *\n       * @description\n       * A method to determine if the current active state is equal to or is the child of the\n       * state stateName. If any params are passed then they will be tested for a match as well.\n       * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n       *\n       * @example\n       * Partial and relative names\n       * <pre>\n       * $state.$current.name = 'contacts.details.item';\n       *\n       * // Using partial names\n       * $state.includes(\"contacts\"); // returns true\n       * $state.includes(\"contacts.details\"); // returns true\n       * $state.includes(\"contacts.details.item\"); // returns true\n       * $state.includes(\"contacts.list\"); // returns false\n       * $state.includes(\"about\"); // returns false\n       *\n       * // Using relative names (. and ^), typically from a template\n       * // E.g. from the 'contacts.details' template\n       * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n       * </pre>\n       *\n       * Basic globbing patterns\n       * <pre>\n       * $state.$current.name = 'contacts.details.item.url';\n       *\n       * $state.includes(\"*.details.*.*\"); // returns true\n       * $state.includes(\"*.details.**\"); // returns true\n       * $state.includes(\"**.item.**\"); // returns true\n       * $state.includes(\"*.details.item.url\"); // returns true\n       * $state.includes(\"*.details.*.url\"); // returns true\n       * $state.includes(\"*.details.*\"); // returns false\n       * $state.includes(\"item.**\"); // returns false\n       * </pre>\n       *\n       * @param {string} stateOrName A partial name, relative name, or glob pattern\n       * to be searched for within the current state name.\n       * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n       * that you'd like to test against the current active state.\n       * @param {object=} options An options object.  The options are:\n       *\n       * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n       * .includes will test relative to `options.relative` state (or name).\n       *\n       * @returns {boolean} Returns true if it does include the state\n       */\n      $state.includes = function includes(stateOrName, params, options) {\n        options = extend({ relative: $state.$current }, options || {});\n        if (isString(stateOrName) && isGlob(stateOrName)) {\n          if (!doesStateMatchGlob(stateOrName)) {\n            return false;\n          }\n          stateOrName = $state.$current.name;\n        }\n\n        var state = findState(stateOrName, options.relative);\n        if (!isDefined(state)) {\n          return undefined;\n        }\n        if (!isDefined($state.$current.includes[state.name])) {\n          return false;\n        }\n        if (!params) {\n          return true;\n        }\n\n        var keys = objectKeys(params);\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i],\n              paramDef = state.params[key];\n          if (paramDef && !paramDef.type.equals($stateParams[key], params[key])) {\n            return false;\n          }\n        }\n\n        return objectKeys(params).reduce(function (acc, key) {\n          var paramDef = state.params[key];\n          return acc && !paramDef || paramDef.type.equals($stateParams[key], params[key]);\n        }, true);\n      };\n\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$state#href\n       * @methodOf ui.router.state.$state\n       *\n       * @description\n       * A url generation method that returns the compiled url for the given state populated with the given params.\n       *\n       * @example\n       * <pre>\n       * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n       * </pre>\n       *\n       * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n       * @param {object=} params An object of parameter values to fill the state's required parameters.\n       * @param {object=} options Options object. The options are:\n       *\n       * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n       *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n       *    ancestor with a valid url).\n       * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n       * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n       *    defines which state to be relative from.\n       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n       * \n       * @returns {string} compiled state url\n       */\n      $state.href = function href(stateOrName, params, options) {\n        options = extend({\n          lossy: true,\n          inherit: true,\n          absolute: false,\n          relative: $state.$current\n        }, options || {});\n\n        var state = findState(stateOrName, options.relative);\n\n        if (!isDefined(state)) return null;\n        if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);\n\n        var nav = state && options.lossy ? state.navigable : state;\n\n        if (!nav || nav.url === undefined || nav.url === null) {\n          return null;\n        }\n        return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {\n          absolute: options.absolute\n        });\n      };\n\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$state#get\n       * @methodOf ui.router.state.$state\n       *\n       * @description\n       * Returns the state configuration object for any specific state or all states.\n       *\n       * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for\n       * the requested state. If not provided, returns an array of ALL state configs.\n       * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.\n       * @returns {Object|Array} State configuration object or array of all objects.\n       */\n      $state.get = function (stateOrName, context) {\n        if (arguments.length === 0) return map(objectKeys(states), function (name) {\n          return states[name].self;\n        });\n        var state = findState(stateOrName, context || $state.$current);\n        return state && state.self ? state.self : null;\n      };\n\n      function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {\n        // Make a restricted $stateParams with only the parameters that apply to this state if\n        // necessary. In addition to being available to the controller and onEnter/onExit callbacks,\n        // we also need $stateParams to be available for any $injector calls we make during the\n        // dependency resolution process.\n        var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params);\n        var locals = { $stateParams: $stateParams };\n\n        // Resolve 'global' dependencies for the state, i.e. those not specific to a view.\n        // We're also including $stateParams in this; that way the parameters are restricted\n        // to the set that should be visible to the state, and are independent of when we update\n        // the global $state and $stateParams values.\n        dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);\n        var promises = [dst.resolve.then(function (globals) {\n          dst.globals = globals;\n        })];\n        if (inherited) promises.push(inherited);\n\n        function resolveViews() {\n          var viewsPromises = [];\n\n          // Resolve template and dependencies for all views.\n          forEach(state.views, function (view, name) {\n            var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};\n            injectables.$template = [function () {\n              return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';\n            }];\n\n            viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {\n              // References to the controller (only instantiated at link time)\n              if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {\n                var injectLocals = angular.extend({}, injectables, dst.globals);\n                result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);\n              } else {\n                result.$$controller = view.controller;\n              }\n              // Provide access to the state itself for internal use\n              result.$$state = state;\n              result.$$controllerAs = view.controllerAs;\n              result.$$resolveAs = view.resolveAs;\n              dst[name] = result;\n            }));\n          });\n\n          return $q.all(viewsPromises).then(function () {\n            return dst.globals;\n          });\n        }\n\n        // Wait for all the promises and then return the activation object\n        return $q.all(promises).then(resolveViews).then(function (values) {\n          return dst;\n        });\n      }\n\n      return $state;\n    }\n\n    function shouldSkipReload(to, toParams, from, fromParams, locals, options) {\n      // Return true if there are no differences in non-search (path/object) params, false if there are differences\n      function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {\n        // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.\n        function notSearchParam(key) {\n          return fromAndToState.params[key].location != \"search\";\n        }\n        var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);\n        var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));\n        var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);\n        return nonQueryParamSet.$$equals(fromParams, toParams);\n      }\n\n      // If reload was not explicitly requested\n      // and we're transitioning to the same state we're already in\n      // and    the locals didn't change\n      //     or they changed in a way that doesn't merit reloading\n      //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)\n      // Then return true.\n      if (!options.reload && to === from && (locals === from.locals || to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams))) {\n        return true;\n      }\n    }\n  }\n\n  angular.module('ui.router.state').factory('$stateParams', function () {\n    return {};\n  }).constant(\"$state.runtime\", { autoinject: true }).provider('$state', $StateProvider\n  // Inject $state to initialize when entering runtime. #2574\n  ).run(['$injector', function ($injector) {\n    // Allow tests (stateSpec.js) to turn this off by defining this constant\n    if ($injector.get(\"$state.runtime\").autoinject) {\n      $injector.get('$state');\n    }\n  }]);\n\n  $ViewProvider.$inject = [];\n  function $ViewProvider() {\n\n    this.$get = $get;\n    /**\n     * @ngdoc object\n     * @name ui.router.state.$view\n     *\n     * @requires ui.router.util.$templateFactory\n     * @requires $rootScope\n     *\n     * @description\n     *\n     */\n    $get.$inject = ['$rootScope', '$templateFactory'];\n    function $get($rootScope, $templateFactory) {\n      return {\n        // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })\n        /**\n         * @ngdoc function\n         * @name ui.router.state.$view#load\n         * @methodOf ui.router.state.$view\n         *\n         * @description\n         *\n         * @param {string} name name\n         * @param {object} options option object.\n         */\n        load: function load(name, options) {\n          var result,\n              defaults = {\n            template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}\n          };\n          options = extend(defaults, options);\n\n          if (options.view) {\n            result = $templateFactory.fromConfig(options.view, options.params, options.locals);\n          }\n          return result;\n        }\n      };\n    }\n  }\n\n  angular.module('ui.router.state').provider('$view', $ViewProvider);\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$uiViewScrollProvider\n   *\n   * @description\n   * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n   */\n  function $ViewScrollProvider() {\n\n    var useAnchorScroll = false;\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n     * @methodOf ui.router.state.$uiViewScrollProvider\n     *\n     * @description\n     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n     * scrolling based on the url anchor.\n     */\n    this.useAnchorScroll = function () {\n      useAnchorScroll = true;\n    };\n\n    /**\n     * @ngdoc object\n     * @name ui.router.state.$uiViewScroll\n     *\n     * @requires $anchorScroll\n     * @requires $timeout\n     *\n     * @description\n     * When called with a jqLite element, it scrolls the element into view (after a\n     * `$timeout` so the DOM has time to refresh).\n     *\n     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n     */\n    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n      if (useAnchorScroll) {\n        return $anchorScroll;\n      }\n\n      return function ($element) {\n        return $timeout(function () {\n          $element[0].scrollIntoView();\n        }, 0, false);\n      };\n    }];\n  }\n\n  angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\n\n  /**\n   * @ngdoc directive\n   * @name ui.router.state.directive:ui-view\n   *\n   * @requires ui.router.state.$state\n   * @requires $compile\n   * @requires $controller\n   * @requires $injector\n   * @requires ui.router.state.$uiViewScroll\n   * @requires $document\n   *\n   * @restrict ECA\n   *\n   * @description\n   * The ui-view directive tells $state where to place your templates.\n   *\n   * @param {string=} name A view name. The name should be unique amongst the other views in the\n   * same state. You can have views of the same name that live in different states.\n   *\n   * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n   * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n   * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n   * scroll ui-view elements into view when they are populated during a state activation.\n   *\n   * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n   * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n   *\n   * @param {string=} onload Expression to evaluate whenever the view updates.\n   *\n   * @example\n   * A view can be unnamed or named.\n   * <pre>\n   * <!-- Unnamed -->\n   * <div ui-view></div>\n   *\n   * <!-- Named -->\n   * <div ui-view=\"viewName\"></div>\n   * </pre>\n   *\n   * You can only have one unnamed view within any template (or root html). If you are only using a\n   * single view and it is unnamed then you can populate it like so:\n   * <pre>\n   * <div ui-view></div>\n   * $stateProvider.state(\"home\", {\n   *   template: \"<h1>HELLO!</h1>\"\n   * })\n   * </pre>\n   *\n   * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#methods_state `views`}\n   * config property, by name, in this case an empty name:\n   * <pre>\n   * $stateProvider.state(\"home\", {\n   *   views: {\n   *     \"\": {\n   *       template: \"<h1>HELLO!</h1>\"\n   *     }\n   *   }    \n   * })\n   * </pre>\n   *\n   * But typically you'll only use the views property if you name your view or have more than one view\n   * in the same template. There's not really a compelling reason to name a view if its the only one,\n   * but you could if you wanted, like so:\n   * <pre>\n   * <div ui-view=\"main\"></div>\n   * </pre>\n   * <pre>\n   * $stateProvider.state(\"home\", {\n   *   views: {\n   *     \"main\": {\n   *       template: \"<h1>HELLO!</h1>\"\n   *     }\n   *   }    \n   * })\n   * </pre>\n   *\n   * Really though, you'll use views to set up multiple views:\n   * <pre>\n   * <div ui-view></div>\n   * <div ui-view=\"chart\"></div>\n   * <div ui-view=\"data\"></div>\n   * </pre>\n   *\n   * <pre>\n   * $stateProvider.state(\"home\", {\n   *   views: {\n   *     \"\": {\n   *       template: \"<h1>HELLO!</h1>\"\n   *     },\n   *     \"chart\": {\n   *       template: \"<chart_thing/>\"\n   *     },\n   *     \"data\": {\n   *       template: \"<data_thing/>\"\n   *     }\n   *   }    \n   * })\n   * </pre>\n   *\n   * Examples for `autoscroll`:\n   *\n   * <pre>\n   * <!-- If autoscroll present with no expression,\n   *      then scroll ui-view into view -->\n   * <ui-view autoscroll/>\n   *\n   * <!-- If autoscroll present with valid expression,\n   *      then scroll ui-view into view if expression evaluates to true -->\n   * <ui-view autoscroll='true'/>\n   * <ui-view autoscroll='false'/>\n   * <ui-view autoscroll='scopeVariable'/>\n   * </pre>\n   *\n   * Resolve data:\n   *\n   * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\n   * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\n   *\n   * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\n   * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\n   * depends on `$resolve` data.\n   *\n   * Example usage of $resolve in a view template\n   * <pre>\n   * $stateProvider.state('home', {\n   *   template: '<my-component user=\"$resolve.user\"></my-component>',\n   *   resolve: {\n   *     user: function(UserService) { return UserService.fetchUser(); }\n   *   }\n   * });\n   * </pre>\n   */\n  $ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate', '$q'];\n  function $ViewDirective($state, $injector, $uiViewScroll, $interpolate, $q) {\n\n    function getService() {\n      return $injector.has ? function (service) {\n        return $injector.has(service) ? $injector.get(service) : null;\n      } : function (service) {\n        try {\n          return $injector.get(service);\n        } catch (e) {\n          return null;\n        }\n      };\n    }\n\n    var service = getService(),\n        $animator = service('$animator'),\n        $animate = service('$animate');\n\n    // Returns a set of DOM manipulation functions based on which Angular version\n    // it should use\n    function getRenderer(attrs, scope) {\n      var statics = function () {\n        return {\n          enter: function (element, target, cb) {\n            target.after(element);cb();\n          },\n          leave: function (element, cb) {\n            element.remove();cb();\n          }\n        };\n      };\n\n      if ($animate) {\n        return {\n          enter: function (element, target, cb) {\n            if (angular.version.minor > 2) {\n              $animate.enter(element, null, target).then(cb);\n            } else {\n              $animate.enter(element, null, target, cb);\n            }\n          },\n          leave: function (element, cb) {\n            if (angular.version.minor > 2) {\n              $animate.leave(element).then(cb);\n            } else {\n              $animate.leave(element, cb);\n            }\n          }\n        };\n      }\n\n      if ($animator) {\n        var animate = $animator && $animator(scope, attrs);\n\n        return {\n          enter: function (element, target, cb) {\n            animate.enter(element, null, target);cb();\n          },\n          leave: function (element, cb) {\n            animate.leave(element);cb();\n          }\n        };\n      }\n\n      return statics();\n    }\n\n    var directive = {\n      restrict: 'ECA',\n      terminal: true,\n      priority: 400,\n      transclude: 'element',\n      compile: function (tElement, tAttrs, $transclude) {\n        return function (scope, $element, attrs) {\n          var previousEl,\n              currentEl,\n              currentScope,\n              latestLocals,\n              onloadExp = attrs.onload || '',\n              autoScrollExp = attrs.autoscroll,\n              renderer = getRenderer(attrs, scope),\n              inherited = $element.inheritedData('$uiView');\n\n          scope.$on('$stateChangeSuccess', function () {\n            updateView(false);\n          });\n\n          updateView(true);\n\n          function cleanupLastView() {\n            if (previousEl) {\n              previousEl.remove();\n              previousEl = null;\n            }\n\n            if (currentScope) {\n              currentScope.$destroy();\n              currentScope = null;\n            }\n\n            if (currentEl) {\n              var $uiViewData = currentEl.data('$uiViewAnim');\n              renderer.leave(currentEl, function () {\n                $uiViewData.$$animLeave.resolve();\n                previousEl = null;\n              });\n\n              previousEl = currentEl;\n              currentEl = null;\n            }\n          }\n\n          function updateView(firstTime) {\n            var newScope,\n                name = getUiViewName(scope, attrs, $element, $interpolate),\n                previousLocals = name && $state.$current && $state.$current.locals[name];\n\n            if (!firstTime && previousLocals === latestLocals) return; // nothing to do\n            newScope = scope.$new();\n            latestLocals = $state.$current.locals[name];\n\n            /**\n             * @ngdoc event\n             * @name ui.router.state.directive:ui-view#$viewContentLoading\n             * @eventOf ui.router.state.directive:ui-view\n             * @eventType emits on ui-view directive scope\n             * @description\n             *\n             * Fired once the view **begins loading**, *before* the DOM is rendered.\n             *\n             * @param {Object} event Event object.\n             * @param {string} viewName Name of the view.\n             */\n            newScope.$emit('$viewContentLoading', name);\n\n            var clone = $transclude(newScope, function (clone) {\n              var animEnter = $q.defer(),\n                  animLeave = $q.defer();\n              var viewAnimData = {\n                $animEnter: animEnter.promise,\n                $animLeave: animLeave.promise,\n                $$animLeave: animLeave\n              };\n\n              clone.data('$uiViewAnim', viewAnimData);\n              renderer.enter(clone, $element, function onUiViewEnter() {\n                animEnter.resolve();\n                if (currentScope) {\n                  currentScope.$emit('$viewContentAnimationEnded');\n                }\n\n                if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                  $uiViewScroll(clone);\n                }\n              });\n              cleanupLastView();\n            });\n\n            currentEl = clone;\n            currentScope = newScope;\n            /**\n             * @ngdoc event\n             * @name ui.router.state.directive:ui-view#$viewContentLoaded\n             * @eventOf ui.router.state.directive:ui-view\n             * @eventType emits on ui-view directive scope\n             * @description\n             * Fired once the view is **loaded**, *after* the DOM is rendered.\n             *\n             * @param {Object} event Event object.\n             * @param {string} viewName Name of the view.\n             */\n            currentScope.$emit('$viewContentLoaded', name);\n            currentScope.$eval(onloadExp);\n          }\n        };\n      }\n    };\n\n    return directive;\n  }\n\n  $ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];\n  function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {\n    return {\n      restrict: 'ECA',\n      priority: -400,\n      compile: function (tElement) {\n        var initial = tElement.html();\n        if (tElement.empty) {\n          tElement.empty();\n        } else {\n          // ng 1.0.0 doesn't have empty(), which cleans up data and handlers\n          tElement[0].innerHTML = null;\n        }\n\n        return function (scope, $element, attrs) {\n          var current = $state.$current,\n              name = getUiViewName(scope, attrs, $element, $interpolate),\n              locals = current && current.locals[name];\n\n          if (!locals) {\n            $element.html(initial);\n            $compile($element.contents())(scope);\n            return;\n          }\n\n          $element.data('$uiView', { name: name, state: locals.$$state });\n          $element.html(locals.$template ? locals.$template : initial);\n\n          var resolveData = angular.extend({}, locals);\n          scope[locals.$$resolveAs] = resolveData;\n\n          var link = $compile($element.contents());\n\n          if (locals.$$controller) {\n            locals.$scope = scope;\n            locals.$element = $element;\n            var controller = $controller(locals.$$controller, locals);\n            if (locals.$$controllerAs) {\n              scope[locals.$$controllerAs] = controller;\n              scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;\n            }\n            if (isFunction(controller.$onInit)) controller.$onInit();\n            $element.data('$ngControllerController', controller);\n            $element.children().data('$ngControllerController', controller);\n          }\n\n          link(scope);\n        };\n      }\n    };\n  }\n\n  /**\n   * Shared ui-view code for both directives:\n   * Given scope, element, and its attributes, return the view's name\n   */\n  function getUiViewName(scope, attrs, element, $interpolate) {\n    var name = $interpolate(attrs.uiView || attrs.name || '')(scope);\n    var uiViewCreatedBy = element.inheritedData('$uiView');\n    return name.indexOf('@') >= 0 ? name : name + '@' + (uiViewCreatedBy ? uiViewCreatedBy.state.name : '');\n  }\n\n  angular.module('ui.router.state').directive('uiView', $ViewDirective);\n  angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n\n  function parseStateRef(ref, current) {\n    var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/),\n        parsed;\n    if (preparsed) ref = current + '(' + preparsed[1] + ')';\n    parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n    if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n    return { state: parsed[1], paramExpr: parsed[3] || null };\n  }\n\n  function stateContext(el) {\n    var stateData = el.parent().inheritedData('$uiView');\n\n    if (stateData && stateData.state && stateData.state.name) {\n      return stateData.state;\n    }\n  }\n\n  function getTypeInfo(el) {\n    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n    var isForm = el[0].nodeName === \"FORM\";\n\n    return {\n      attr: isForm ? \"action\" : isSvg ? 'xlink:href' : 'href',\n      isAnchor: el.prop(\"tagName\").toUpperCase() === \"A\",\n      clickable: !isForm\n    };\n  }\n\n  function clickHook(el, $state, $timeout, type, current) {\n    return function (e) {\n      var button = e.which || e.button,\n          target = current();\n\n      if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {\n        // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n        var transition = $timeout(function () {\n          $state.go(target.state, target.params, target.options);\n        });\n        e.preventDefault();\n\n        // if the state has no URL, ignore one preventDefault from the <a> directive.\n        var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;\n\n        e.preventDefault = function () {\n          if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\n        };\n      }\n    };\n  }\n\n  function defaultOpts(el, $state) {\n    return { relative: stateContext(el) || $state.$current, inherit: true };\n  }\n\n  /**\n   * @ngdoc directive\n   * @name ui.router.state.directive:ui-sref\n   *\n   * @requires ui.router.state.$state\n   * @requires $timeout\n   *\n   * @restrict A\n   *\n   * @description\n   * A directive that binds a link (`<a>` tag) to a state. If the state has an associated\n   * URL, the directive will automatically generate & update the `href` attribute via\n   * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking\n   * the link will trigger a state transition with optional parameters.\n   *\n   * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be\n   * handled natively by the browser.\n   *\n   * You can also use relative state paths within ui-sref, just like the relative\n   * paths passed to `$state.go()`. You just need to be aware that the path is relative\n   * to the state that the link lives in, in other words the state that loaded the\n   * template containing the link.\n   *\n   * You can specify options to pass to {@link ui.router.state.$state#methods_go $state.go()}\n   * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,\n   * and `reload`.\n   *\n   * @example\n   * Here's an example of how you'd use ui-sref and how it would compile. If you have the\n   * following template:\n   * <pre>\n   * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n   *\n   * <ul>\n   *     <li ng-repeat=\"contact in contacts\">\n   *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n   *     </li>\n   * </ul>\n   * </pre>\n   *\n   * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n   * <pre>\n   * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n   *\n   * <ul>\n   *     <li ng-repeat=\"contact in contacts\">\n   *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n   *     </li>\n   *     <li ng-repeat=\"contact in contacts\">\n   *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n   *     </li>\n   *     <li ng-repeat=\"contact in contacts\">\n   *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n   *     </li>\n   * </ul>\n   *\n   * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n   * </pre>\n   *\n   * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n   * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}\n   */\n  $StateRefDirective.$inject = ['$state', '$timeout'];\n  function $StateRefDirective($state, $timeout) {\n    return {\n      restrict: 'A',\n      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n      link: function (scope, element, attrs, uiSrefActive) {\n        var ref = parseStateRef(attrs.uiSref, $state.current.name);\n        var def = { state: ref.state, href: null, params: null };\n        var type = getTypeInfo(element);\n        var active = uiSrefActive[1] || uiSrefActive[0];\n        var unlinkInfoFn = null;\n        var hookFn;\n\n        def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});\n\n        var update = function (val) {\n          if (val) def.params = angular.copy(val);\n          def.href = $state.href(ref.state, def.params, def.options);\n\n          if (unlinkInfoFn) unlinkInfoFn();\n          if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);\n          if (def.href !== null) attrs.$set(type.attr, def.href);\n        };\n\n        if (ref.paramExpr) {\n          scope.$watch(ref.paramExpr, function (val) {\n            if (val !== def.params) update(val);\n          }, true);\n          def.params = angular.copy(scope.$eval(ref.paramExpr));\n        }\n        update();\n\n        if (!type.clickable) return;\n        hookFn = clickHook(element, $state, $timeout, type, function () {\n          return def;\n        });\n        element[element.on ? 'on' : 'bind'](\"click\", hookFn);\n        scope.$on('$destroy', function () {\n          element[element.off ? 'off' : 'unbind'](\"click\", hookFn);\n        });\n      }\n    };\n  }\n\n  /**\n   * @ngdoc directive\n   * @name ui.router.state.directive:ui-state\n   *\n   * @requires ui.router.state.uiSref\n   *\n   * @restrict A\n   *\n   * @description\n   * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,\n   * params and override options.\n   *\n   * @param {string} ui-state 'stateName' can be any valid absolute or relative state\n   * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#methods_href $state.href()}\n   * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}\n   */\n  $StateRefDynamicDirective.$inject = ['$state', '$timeout'];\n  function $StateRefDynamicDirective($state, $timeout) {\n    return {\n      restrict: 'A',\n      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n      link: function (scope, element, attrs, uiSrefActive) {\n        var type = getTypeInfo(element);\n        var active = uiSrefActive[1] || uiSrefActive[0];\n        var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];\n        var watch = '[' + group.map(function (val) {\n          return val || 'null';\n        }).join(', ') + ']';\n        var def = { state: null, params: null, options: null, href: null };\n        var unlinkInfoFn = null;\n        var hookFn;\n\n        function runStateRefLink(group) {\n          def.state = group[0];def.params = group[1];def.options = group[2];\n          def.href = $state.href(def.state, def.params, def.options);\n\n          if (unlinkInfoFn) unlinkInfoFn();\n          if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);\n          if (def.href) attrs.$set(type.attr, def.href);\n        }\n\n        scope.$watch(watch, runStateRefLink, true);\n        runStateRefLink(scope.$eval(watch));\n\n        if (!type.clickable) return;\n        hookFn = clickHook(element, $state, $timeout, type, function () {\n          return def;\n        });\n        element[element.on ? 'on' : 'bind'](\"click\", hookFn);\n        scope.$on('$destroy', function () {\n          element[element.off ? 'off' : 'unbind'](\"click\", hookFn);\n        });\n      }\n    };\n  }\n\n  /**\n   * @ngdoc directive\n   * @name ui.router.state.directive:ui-sref-active\n   *\n   * @requires ui.router.state.$state\n   * @requires ui.router.state.$stateParams\n   * @requires $interpolate\n   *\n   * @restrict A\n   *\n   * @description\n   * A directive working alongside ui-sref to add classes to an element when the\n   * related ui-sref directive's state is active, and removing them when it is inactive.\n   * The primary use-case is to simplify the special appearance of navigation menus\n   * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n   * distinguishing it from the inactive menu items.\n   *\n   * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n   * ui-sref-active found at the same level or above the ui-sref will be used.\n   *\n   * Will activate when the ui-sref's target state or any child state is active. If you\n   * need to activate only when the ui-sref target state is active and *not* any of\n   * it's children, then you will use\n   * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}\n   *\n   * @example\n   * Given the following template:\n   * <pre>\n   * <ul>\n   *   <li ui-sref-active=\"active\" class=\"item\">\n   *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n   *   </li>\n   * </ul>\n   * </pre>\n   *\n   *\n   * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n   * the resulting HTML will appear as (note the 'active' class):\n   * <pre>\n   * <ul>\n   *   <li ui-sref-active=\"active\" class=\"item active\">\n   *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n   *   </li>\n   * </ul>\n   * </pre>\n   *\n   * The class name is interpolated **once** during the directives link time (any further changes to the\n   * interpolated value are ignored).\n   *\n   * Multiple classes may be specified in a space-separated format:\n   * <pre>\n   * <ul>\n   *   <li ui-sref-active='class1 class2 class3'>\n   *     <a ui-sref=\"app.user\">link</a>\n   *   </li>\n   * </ul>\n   * </pre>\n   *\n   * It is also possible to pass ui-sref-active an expression that evaluates\n   * to an object hash, whose keys represent active class names and whose\n   * values represent the respective state names/globs.\n   * ui-sref-active will match if the current active state **includes** any of\n   * the specified state names/globs, even the abstract ones.\n   *\n   * @Example\n   * Given the following template, with \"admin\" being an abstract state:\n   * <pre>\n   * <div ui-sref-active=\"{'active': 'admin.*'}\">\n   *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n   * </div>\n   * </pre>\n   *\n   * When the current state is \"admin.roles\" the \"active\" class will be applied\n   * to both the <div> and <a> elements. It is important to note that the state\n   * names/globs passed to ui-sref-active shadow the state provided by ui-sref.\n   */\n\n  /**\n   * @ngdoc directive\n   * @name ui.router.state.directive:ui-sref-active-eq\n   *\n   * @requires ui.router.state.$state\n   * @requires ui.router.state.$stateParams\n   * @requires $interpolate\n   *\n   * @restrict A\n   *\n   * @description\n   * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate\n   * when the exact target state used in the `ui-sref` is active; no child states.\n   *\n   */\n  $StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];\n  function $StateRefActiveDirective($state, $stateParams, $interpolate) {\n    return {\n      restrict: \"A\",\n      controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {\n        var states = [],\n            activeClasses = {},\n            activeEqClass,\n            uiSrefActive;\n\n        // There probably isn't much point in $observing this\n        // uiSrefActive and uiSrefActiveEq share the same directive object with some\n        // slight difference in logic routing\n        activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\n        try {\n          uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n        } catch (e) {\n          // Do nothing. uiSrefActive is not a valid expression.\n          // Fall back to using $interpolate below\n        }\n        uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n        if (isObject(uiSrefActive)) {\n          forEach(uiSrefActive, function (stateOrName, activeClass) {\n            if (isString(stateOrName)) {\n              var ref = parseStateRef(stateOrName, $state.current.name);\n              addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n            }\n          });\n        }\n\n        // Allow uiSref to communicate with uiSrefActive[Equals]\n        this.$$addStateInfo = function (newState, newParams) {\n          // we already got an explicit state provided by ui-sref-active, so we\n          // shadow the one that comes from ui-sref\n          if (isObject(uiSrefActive) && states.length > 0) {\n            return;\n          }\n          var deregister = addState(newState, newParams, uiSrefActive);\n          update();\n          return deregister;\n        };\n\n        $scope.$on('$stateChangeSuccess', update);\n\n        function addState(stateName, stateParams, activeClass) {\n          var state = $state.get(stateName, stateContext($element));\n          var stateHash = createStateHash(stateName, stateParams);\n\n          var stateInfo = {\n            state: state || { name: stateName },\n            params: stateParams,\n            hash: stateHash\n          };\n\n          states.push(stateInfo);\n          activeClasses[stateHash] = activeClass;\n\n          return function removeState() {\n            var idx = states.indexOf(stateInfo);\n            if (idx !== -1) states.splice(idx, 1);\n          };\n        }\n\n        /**\n         * @param {string} state\n         * @param {Object|string} [params]\n         * @return {string}\n         */\n        function createStateHash(state, params) {\n          if (!isString(state)) {\n            throw new Error('state should be a string');\n          }\n          if (isObject(params)) {\n            return state + toJson(params);\n          }\n          params = $scope.$eval(params);\n          if (isObject(params)) {\n            return state + toJson(params);\n          }\n          return state;\n        }\n\n        // Update route state\n        function update() {\n          for (var i = 0; i < states.length; i++) {\n            if (anyMatch(states[i].state, states[i].params)) {\n              addClass($element, activeClasses[states[i].hash]);\n            } else {\n              removeClass($element, activeClasses[states[i].hash]);\n            }\n\n            if (exactMatch(states[i].state, states[i].params)) {\n              addClass($element, activeEqClass);\n            } else {\n              removeClass($element, activeEqClass);\n            }\n          }\n        }\n\n        function addClass(el, className) {\n          $timeout(function () {\n            el.addClass(className);\n          });\n        }\n        function removeClass(el, className) {\n          el.removeClass(className);\n        }\n        function anyMatch(state, params) {\n          return $state.includes(state.name, params);\n        }\n        function exactMatch(state, params) {\n          return $state.is(state.name, params);\n        }\n\n        update();\n      }]\n    };\n  }\n\n  angular.module('ui.router.state').directive('uiSref', $StateRefDirective).directive('uiSrefActive', $StateRefActiveDirective).directive('uiSrefActiveEq', $StateRefActiveDirective).directive('uiState', $StateRefDynamicDirective);\n\n  /**\n   * @ngdoc filter\n   * @name ui.router.state.filter:isState\n   *\n   * @requires ui.router.state.$state\n   *\n   * @description\n   * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n   */\n  $IsStateFilter.$inject = ['$state'];\n  function $IsStateFilter($state) {\n    var isFilter = function (state, params) {\n      return $state.is(state, params);\n    };\n    isFilter.$stateful = true;\n    return isFilter;\n  }\n\n  /**\n   * @ngdoc filter\n   * @name ui.router.state.filter:includedByState\n   *\n   * @requires ui.router.state.$state\n   *\n   * @description\n   * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n   */\n  $IncludedByStateFilter.$inject = ['$state'];\n  function $IncludedByStateFilter($state) {\n    var includesFilter = function (state, params, options) {\n      return $state.includes(state, params, options);\n    };\n    includesFilter.$stateful = true;\n    return includesFilter;\n  }\n\n  angular.module('ui.router.state').filter('isState', $IsStateFilter).filter('includedByState', $IncludedByStateFilter);\n})(window, window.angular);\n\n//# sourceMappingURL=angular-ui-router-compiled.js.map"]}