{"version":3,"sources":["angular-route.js"],"names":[],"mappings":"AAAA;;;;;AAKA,CAAC,UAAS,MAAT,EAAiB,OAAjB,EAA0B,SAA1B,EAAqC;AAAC;;AAEnC;;;;;;;;;;;;;;;AAeA;;AACA,QAAI,gBAAgB,QAAQ,MAAR,CAAe,SAAf,EAA0B,CAAC,IAAD,CAA1B,EAChB,QADgB,CACP,QADO,EACG,cADH,CAApB;AAAA,QAEI,eAAe,QAAQ,QAAR,CAAiB,SAAjB,CAFnB;;AAIA;;;;;;;;;;;;;;AAcA,aAAS,cAAT,GAA0B;AACtB,iBAAS,OAAT,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC;AAC5B,mBAAO,QAAQ,MAAR,CAAe,OAAO,MAAP,CAAc,MAAd,CAAf,EAAsC,KAAtC,CAAP;AACH;;AAED,YAAI,SAAS,EAAb;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA,aAAK,IAAL,GAAY,UAAS,IAAT,EAAe,KAAf,EAAsB;AAC9B;AACA,gBAAI,YAAY,QAAQ,IAAR,CAAa,KAAb,CAAhB;AACA,gBAAI,QAAQ,WAAR,CAAoB,UAAU,cAA9B,CAAJ,EAAmD;AAC/C,0BAAU,cAAV,GAA2B,IAA3B;AACH;AACD,gBAAI,QAAQ,WAAR,CAAoB,UAAU,oBAA9B,CAAJ,EAAyD;AACrD,0BAAU,oBAAV,GAAiC,KAAK,oBAAtC;AACH;AACD,mBAAO,IAAP,IAAe,QAAQ,MAAR,CACX,SADW,EAEX,QAAQ,WAAW,IAAX,EAAiB,SAAjB,CAFG,CAAf;;AAKA;AACA,gBAAI,IAAJ,EAAU;AACN,oBAAI,eAAgB,KAAK,KAAK,MAAL,GAAc,CAAnB,KAAyB,GAA1B,GACb,KAAK,MAAL,CAAY,CAAZ,EAAe,KAAK,MAAL,GAAc,CAA7B,CADa,GAEb,OAAO,GAFb;;AAIA,uBAAO,YAAP,IAAuB,QAAQ,MAAR,CACnB,EAAC,YAAY,IAAb,EADmB,EAEnB,WAAW,YAAX,EAAyB,SAAzB,CAFmB,CAAvB;AAIH;;AAED,mBAAO,IAAP;AACH,SA3BD;;AA6BA;;;;;;;;;AASA,aAAK,oBAAL,GAA4B,KAA5B;;AAEA;;;;;;;;;;;AAWA,iBAAS,UAAT,CAAoB,IAApB,EAA0B,IAA1B,EAAgC;AAC5B,gBAAI,cAAc,KAAK,oBAAvB;AAAA,gBACI,MAAM;AACF,8BAAc,IADZ;AAEF,wBAAQ;AAFN,aADV;AAAA,gBAKI,OAAO,IAAI,IAAJ,GAAW,EALtB;;AAOA,mBAAO,KACF,OADE,CACM,UADN,EACkB,MADlB,EAEF,OAFE,CAEM,uBAFN,EAE+B,UAAS,CAAT,EAAY,KAAZ,EAAmB,GAAnB,EAAwB,MAAxB,EAAgC;AAC9D,oBAAI,WAAW,WAAW,GAAX,GAAiB,MAAjB,GAA0B,IAAzC;AACA,oBAAI,OAAO,WAAW,GAAX,GAAiB,MAAjB,GAA0B,IAArC;AACA,qBAAK,IAAL,CAAU,EAAE,MAAM,GAAR,EAAa,UAAU,CAAC,CAAC,QAAzB,EAAV;AACA,wBAAQ,SAAS,EAAjB;AACA,uBAAO,MACA,WAAW,EAAX,GAAgB,KADhB,IAED,KAFC,IAGA,WAAW,KAAX,GAAmB,EAHnB,KAIA,QAAQ,OAAR,IAAmB,SAJnB,KAKA,YAAY,EALZ,IAMD,GANC,IAOA,YAAY,EAPZ,CAAP;AAQH,aAfE,EAgBF,OAhBE,CAgBM,YAhBN,EAgBoB,MAhBpB,CAAP;;AAkBA,gBAAI,MAAJ,GAAa,IAAI,MAAJ,CAAW,MAAM,IAAN,GAAa,GAAxB,EAA6B,cAAc,GAAd,GAAoB,EAAjD,CAAb;AACA,mBAAO,GAAP;AACH;;AAED;;;;;;;;;;;;AAYA,aAAK,SAAL,GAAiB,UAAS,MAAT,EAAiB;AAC9B,gBAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,yBAAS,EAAC,YAAY,MAAb,EAAT;AACH;AACD,iBAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB;AACA,mBAAO,IAAP;AACH,SAND;;AASA,aAAK,IAAL,GAAY,CAAC,YAAD,EACR,WADQ,EAER,cAFQ,EAGR,IAHQ,EAIR,WAJQ,EAKR,kBALQ,EAMR,MANQ,EAOR,UAAS,UAAT,EAAqB,SAArB,EAAgC,YAAhC,EAA8C,EAA9C,EAAkD,SAAlD,EAA6D,gBAA7D,EAA+E,IAA/E,EAAqF;;AAEjF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;AAaA;;;;;;;;;;AAUA,gBAAI,cAAc,KAAlB;AAAA,gBACI,aADJ;AAAA,gBAEI,yBAFJ;AAAA,gBAGI,SAAS;AACL,wBAAQ,MADH;;AAGL;;;;;;;;;;;AAWA,wBAAQ,YAAW;AACf,kCAAc,IAAd;AACA,+BAAW,UAAX,CAAsB,YAAW;AAC7B;AACA;AACA;AACH,qBAJD;AAKH,iBArBI;;AAuBL;;;;;;;;;;;;;AAaA,8BAAc,UAAS,SAAT,EAAoB;AAC9B,wBAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,OAAjC,EAA0C;AACtC,oCAAY,QAAQ,MAAR,CAAe,EAAf,EAAmB,KAAK,OAAL,CAAa,MAAhC,EAAwC,SAAxC,CAAZ;AACA,kCAAU,IAAV,CAAe,YAAY,KAAK,OAAL,CAAa,OAAb,CAAqB,YAAjC,EAA+C,SAA/C,CAAf;AACA;AACA,kCAAU,MAAV,CAAiB,SAAjB;AACH,qBALD,MAKO;AACH,8BAAM,aAAa,QAAb,EAAuB,iDAAvB,CAAN;AACH;AACJ;AA7CI,aAHb;;AAmDA,uBAAW,GAAX,CAAe,sBAAf,EAAuC,YAAvC;AACA,uBAAW,GAAX,CAAe,wBAAf,EAAyC,WAAzC;;AAEA,mBAAO,MAAP;;AAEA;;AAEA;;;;;;;;;;;AAWA,qBAAS,kBAAT,CAA4B,EAA5B,EAAgC,KAAhC,EAAuC;AACnC,oBAAI,OAAO,MAAM,IAAjB;AAAA,oBACI,SAAS,EADb;;AAGA,oBAAI,CAAC,MAAM,MAAX,EAAmB,OAAO,IAAP;;AAEnB,oBAAI,IAAI,MAAM,MAAN,CAAa,IAAb,CAAkB,EAAlB,CAAR;AACA,oBAAI,CAAC,CAAL,EAAQ,OAAO,IAAP;;AAER,qBAAK,IAAI,IAAI,CAAR,EAAW,MAAM,EAAE,MAAxB,EAAgC,IAAI,GAApC,EAAyC,EAAE,CAA3C,EAA8C;AAC1C,wBAAI,MAAM,KAAK,IAAI,CAAT,CAAV;;AAEA,wBAAI,MAAM,EAAE,CAAF,CAAV;;AAEA,wBAAI,OAAO,GAAX,EAAgB;AACZ,+BAAO,IAAI,IAAX,IAAmB,GAAnB;AACH;AACJ;AACD,uBAAO,MAAP;AACH;;AAED,qBAAS,YAAT,CAAsB,cAAtB,EAAsC;AAClC,oBAAI,YAAY,OAAO,OAAvB;;AAEA,gCAAgB,YAAhB;AACA,4CAA4B,iBAAiB,SAAjB,IAA8B,cAAc,OAAd,KAA0B,UAAU,OAAlE,IACrB,QAAQ,MAAR,CAAe,cAAc,UAA7B,EAAyC,UAAU,UAAnD,CADqB,IAErB,CAAC,cAAc,cAFM,IAEY,CAAC,WAFzC;;AAIA,oBAAI,CAAC,yBAAD,KAA+B,aAAa,aAA5C,CAAJ,EAAgE;AAC5D,wBAAI,WAAW,UAAX,CAAsB,mBAAtB,EAA2C,aAA3C,EAA0D,SAA1D,EAAqE,gBAAzE,EAA2F;AACvF,4BAAI,cAAJ,EAAoB;AAChB,2CAAe,cAAf;AACH;AACJ;AACJ;AACJ;;AAED,qBAAS,WAAT,GAAuB;AACnB,oBAAI,YAAY,OAAO,OAAvB;AACA,oBAAI,YAAY,aAAhB;;AAEA,oBAAI,yBAAJ,EAA+B;AAC3B,8BAAU,MAAV,GAAmB,UAAU,MAA7B;AACA,4BAAQ,IAAR,CAAa,UAAU,MAAvB,EAA+B,YAA/B;AACA,+BAAW,UAAX,CAAsB,cAAtB,EAAsC,SAAtC;AACH,iBAJD,MAIO,IAAI,aAAa,SAAjB,EAA4B;AAC/B,kCAAc,KAAd;AACA,2BAAO,OAAP,GAAiB,SAAjB;AACA,wBAAI,SAAJ,EAAe;AACX,4BAAI,UAAU,UAAd,EAA0B;AACtB,gCAAI,QAAQ,QAAR,CAAiB,UAAU,UAA3B,CAAJ,EAA4C;AACxC,0CAAU,IAAV,CAAe,YAAY,UAAU,UAAtB,EAAkC,UAAU,MAA5C,CAAf,EAAoE,MAApE,CAA2E,UAAU,MAArF,EACK,OADL;AAEH,6BAHD,MAGO;AACH,0CAAU,GAAV,CAAc,UAAU,UAAV,CAAqB,UAAU,UAA/B,EAA2C,UAAU,IAAV,EAA3C,EAA6D,UAAU,MAAV,EAA7D,CAAd,EACK,OADL;AAEH;AACJ;AACJ;;AAED,uBAAG,IAAH,CAAQ,SAAR,EACA,IADA,CACK,YAAW;AACZ,4BAAI,SAAJ,EAAe;AACX,gCAAI,SAAS,QAAQ,MAAR,CAAe,EAAf,EAAmB,UAAU,OAA7B,CAAb;AAAA,gCACI,QADJ;AAAA,gCACc,WADd;;AAGA,oCAAQ,OAAR,CAAgB,MAAhB,EAAwB,UAAS,KAAT,EAAgB,GAAhB,EAAqB;AACzC,uCAAO,GAAP,IAAc,QAAQ,QAAR,CAAiB,KAAjB,IACV,UAAU,GAAV,CAAc,KAAd,CADU,GACa,UAAU,MAAV,CAAiB,KAAjB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,GAApC,CAD3B;AAEH,6BAHD;;AAKA,gCAAI,QAAQ,SAAR,CAAkB,WAAW,UAAU,QAAvC,CAAJ,EAAsD;AAClD,oCAAI,QAAQ,UAAR,CAAmB,QAAnB,CAAJ,EAAkC;AAC9B,+CAAW,SAAS,UAAU,MAAnB,CAAX;AACH;AACJ,6BAJD,MAIO,IAAI,QAAQ,SAAR,CAAkB,cAAc,UAAU,WAA1C,CAAJ,EAA4D;AAC/D,oCAAI,QAAQ,UAAR,CAAmB,WAAnB,CAAJ,EAAqC;AACjC,kDAAc,YAAY,UAAU,MAAtB,CAAd;AACH;AACD,8CAAc,KAAK,qBAAL,CAA2B,WAA3B,CAAd;AACA,oCAAI,QAAQ,SAAR,CAAkB,WAAlB,CAAJ,EAAoC;AAChC,8CAAU,iBAAV,GAA8B,WAA9B;AACA,+CAAW,iBAAiB,WAAjB,CAAX;AACH;AACJ;AACD,gCAAI,QAAQ,SAAR,CAAkB,QAAlB,CAAJ,EAAiC;AAC7B,uCAAO,WAAP,IAAsB,QAAtB;AACH;AACD,mCAAO,GAAG,GAAH,CAAO,MAAP,CAAP;AACH;AACJ,qBA9BD;AA+BA;AACA,wBAhCA,CAgCK,UAAS,MAAT,EAAiB;AAClB,4BAAI,aAAa,OAAO,OAAxB,EAAiC;AAC7B,gCAAI,SAAJ,EAAe;AACX,0CAAU,MAAV,GAAmB,MAAnB;AACA,wCAAQ,IAAR,CAAa,UAAU,MAAvB,EAA+B,YAA/B;AACH;AACD,uCAAW,UAAX,CAAsB,qBAAtB,EAA6C,SAA7C,EAAwD,SAAxD;AACH;AACJ,qBAxCD,EAwCG,UAAS,KAAT,EAAgB;AACf,4BAAI,aAAa,OAAO,OAAxB,EAAiC;AAC7B,uCAAW,UAAX,CAAsB,mBAAtB,EAA2C,SAA3C,EAAsD,SAAtD,EAAiE,KAAjE;AACH;AACJ,qBA5CD;AA6CH;AACJ;;AAGD;;;AAGA,qBAAS,UAAT,GAAsB;AAClB;AACA,oBAAI,MAAJ,EAAY,KAAZ;AACA,wBAAQ,OAAR,CAAgB,MAAhB,EAAwB,UAAS,KAAT,EAAgB,IAAhB,EAAsB;AAC1C,wBAAI,CAAC,KAAD,KAAW,SAAS,mBAAmB,UAAU,IAAV,EAAnB,EAAqC,KAArC,CAApB,CAAJ,EAAsE;AAClE,gCAAQ,QAAQ,KAAR,EAAe;AACnB,oCAAQ,QAAQ,MAAR,CAAe,EAAf,EAAmB,UAAU,MAAV,EAAnB,EAAuC,MAAvC,CADW;AAEnB,wCAAY,MAFO,EAAf,CAAR;AAGA,8BAAM,OAAN,GAAgB,KAAhB;AACH;AACJ,iBAPD;AAQA;AACA,uBAAO,SAAS,OAAO,IAAP,KAAgB,QAAQ,OAAO,IAAP,CAAR,EAAsB,EAAC,QAAQ,EAAT,EAAa,YAAW,EAAxB,EAAtB,CAAhC;AACH;;AAED;;;AAGA,qBAAS,WAAT,CAAqB,MAArB,EAA6B,MAA7B,EAAqC;AACjC,oBAAI,SAAS,EAAb;AACA,wBAAQ,OAAR,CAAgB,CAAC,UAAU,EAAX,EAAe,KAAf,CAAqB,GAArB,CAAhB,EAA2C,UAAS,OAAT,EAAkB,CAAlB,EAAqB;AAC5D,wBAAI,MAAM,CAAV,EAAa;AACT,+BAAO,IAAP,CAAY,OAAZ;AACH,qBAFD,MAEO;AACH,4BAAI,eAAe,QAAQ,KAAR,CAAc,oBAAd,CAAnB;AACA,4BAAI,MAAM,aAAa,CAAb,CAAV;AACA,+BAAO,IAAP,CAAY,OAAO,GAAP,CAAZ;AACA,+BAAO,IAAP,CAAY,aAAa,CAAb,KAAmB,EAA/B;AACA,+BAAO,OAAO,GAAP,CAAP;AACH;AACJ,iBAVD;AAWA,uBAAO,OAAO,IAAP,CAAY,EAAZ,CAAP;AACH;AACJ,SA7ZO,CAAZ;AA8ZH;;AAED,kBAAc,QAAd,CAAuB,cAAvB,EAAuC,oBAAvC;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,aAAS,oBAAT,GAAgC;AAC5B,aAAK,IAAL,GAAY,YAAW;AAAE,mBAAO,EAAP;AAAY,SAArC;AACH;;AAED,kBAAc,SAAd,CAAwB,QAAxB,EAAkC,aAAlC;AACA,kBAAc,SAAd,CAAwB,QAAxB,EAAkC,wBAAlC;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsKA;;;;;;;AAOA,kBAAc,OAAd,GAAwB,CAAC,QAAD,EAAW,eAAX,EAA4B,UAA5B,CAAxB;AACA,aAAS,aAAT,CAAuB,MAAvB,EAA+B,aAA/B,EAA8C,QAA9C,EAAwD;AACpD,eAAO;AACH,sBAAU,KADP;AAEH,sBAAU,IAFP;AAGH,sBAAU,GAHP;AAIH,wBAAY,SAJT;AAKH,kBAAM,UAAS,KAAT,EAAgB,QAAhB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,WAAtC,EAAmD;AACrD,oBAAI,YAAJ;AAAA,oBACI,cADJ;AAAA,oBAEI,sBAFJ;AAAA,oBAGI,gBAAgB,KAAK,UAHzB;AAAA,oBAII,YAAY,KAAK,MAAL,IAAe,EAJ/B;;AAMA,sBAAM,GAAN,CAAU,qBAAV,EAAiC,MAAjC;AACA;;AAEA,yBAAS,eAAT,GAA2B;AACvB,wBAAI,sBAAJ,EAA4B;AACxB,iCAAS,MAAT,CAAgB,sBAAhB;AACA,iDAAyB,IAAzB;AACH;;AAED,wBAAI,YAAJ,EAAkB;AACd,qCAAa,QAAb;AACA,uCAAe,IAAf;AACH;AACD,wBAAI,cAAJ,EAAoB;AAChB,iDAAyB,SAAS,KAAT,CAAe,cAAf,CAAzB;AACA,+CAAuB,IAAvB,CAA4B,YAAW;AACnC,qDAAyB,IAAzB;AACH,yBAFD;AAGA,yCAAiB,IAAjB;AACH;AACJ;;AAED,yBAAS,MAAT,GAAkB;AACd,wBAAI,SAAS,OAAO,OAAP,IAAkB,OAAO,OAAP,CAAe,MAA9C;AAAA,wBACI,WAAW,UAAU,OAAO,SADhC;;AAGA,wBAAI,QAAQ,SAAR,CAAkB,QAAlB,CAAJ,EAAiC;AAC7B,4BAAI,WAAW,MAAM,IAAN,EAAf;AACA,4BAAI,UAAU,OAAO,OAArB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAAI,QAAQ,YAAY,QAAZ,EAAsB,UAAS,KAAT,EAAgB;AAC9C,qCAAS,KAAT,CAAe,KAAf,EAAsB,IAAtB,EAA4B,kBAAkB,QAA9C,EAAwD,IAAxD,CAA6D,SAAS,aAAT,GAAyB;AAClF,oCAAI,QAAQ,SAAR,CAAkB,aAAlB,MACI,CAAC,aAAD,IAAkB,MAAM,KAAN,CAAY,aAAZ,CADtB,CAAJ,EACuD;AACnD;AACH;AACJ,6BALD;AAMA;AACH,yBARW,CAAZ;;AAUA,yCAAiB,KAAjB;AACA,uCAAe,QAAQ,KAAR,GAAgB,QAA/B;AACA,qCAAa,KAAb,CAAmB,oBAAnB;AACA,qCAAa,KAAb,CAAmB,SAAnB;AACH,qBAxBD,MAwBO;AACH;AACH;AACJ;AACJ;AAlEE,SAAP;AAoEH;;AAEL;AACA;AACA;AACA;AACA;AACI,6BAAyB,OAAzB,GAAmC,CAAC,UAAD,EAAa,aAAb,EAA4B,QAA5B,CAAnC;AACA,aAAS,wBAAT,CAAkC,QAAlC,EAA4C,WAA5C,EAAyD,MAAzD,EAAiE;AAC7D,eAAO;AACH,sBAAU,KADP;AAEH,sBAAU,CAAC,GAFR;AAGH,kBAAM,UAAS,KAAT,EAAgB,QAAhB,EAA0B;AAC5B,oBAAI,UAAU,OAAO,OAArB;AAAA,oBACI,SAAS,QAAQ,MADrB;;AAGA,yBAAS,IAAT,CAAc,OAAO,SAArB;;AAEA,oBAAI,OAAO,SAAS,SAAS,QAAT,EAAT,CAAX;;AAEA,oBAAI,QAAQ,UAAZ,EAAwB;AACpB,2BAAO,MAAP,GAAgB,KAAhB;AACA,wBAAI,aAAa,YAAY,QAAQ,UAApB,EAAgC,MAAhC,CAAjB;AACA,wBAAI,QAAQ,YAAZ,EAA0B;AACtB,8BAAM,QAAQ,YAAd,IAA8B,UAA9B;AACH;AACD,6BAAS,IAAT,CAAc,yBAAd,EAAyC,UAAzC;AACA,6BAAS,QAAT,GAAoB,IAApB,CAAyB,yBAAzB,EAAoD,UAApD;AACH;;AAED,qBAAK,KAAL;AACH;AAtBE,SAAP;AAwBH;AAGJ,CAv9BD,EAu9BG,MAv9BH,EAu9BW,OAAO,OAv9BlB","file":"angular-route-compiled.js","sourcesContent":["/**\r\n * @license AngularJS v1.3.13\r\n * (c) 2010-2014 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular, undefined) {'use strict';\r\n\r\n    /**\r\n     * @ngdoc module\r\n     * @name ngRoute\r\n     * @description\r\n     *\r\n     * # ngRoute\r\n     *\r\n     * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.\r\n     *\r\n     * ## Example\r\n     * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\r\n     *\r\n     *\r\n     * <div doc-module-components=\"ngRoute\"></div>\r\n     */\r\n    /* global -ngRouteModule */\r\n    var ngRouteModule = angular.module('ngRoute', ['ng']).\r\n        provider('$route', $RouteProvider),\r\n        $routeMinErr = angular.$$minErr('ngRoute');\r\n\r\n    /**\r\n     * @ngdoc provider\r\n     * @name $routeProvider\r\n     *\r\n     * @description\r\n     *\r\n     * Used for configuring routes.\r\n     *\r\n     * ## Example\r\n     * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\r\n     *\r\n     * ## Dependencies\r\n     * Requires the {@link ngRoute `ngRoute`} module to be installed.\r\n     */\r\n    function $RouteProvider() {\r\n        function inherit(parent, extra) {\r\n            return angular.extend(Object.create(parent), extra);\r\n        }\r\n\r\n        var routes = {};\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $routeProvider#when\r\n         *\r\n         * @param {string} path Route path (matched against `$location.path`). If `$location.path`\r\n         *    contains redundant trailing slash or is missing one, the route will still match and the\r\n         *    `$location.path` will be updated to add or drop the trailing slash to exactly match the\r\n         *    route definition.\r\n         *\r\n         *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up\r\n         *        to the next slash are matched and stored in `$routeParams` under the given `name`\r\n         *        when the route matches.\r\n         *    * `path` can contain named groups starting with a colon and ending with a star:\r\n         *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`\r\n         *        when the route matches.\r\n         *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.\r\n         *\r\n         *    For example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\r\n         *    `/color/brown/largecode/code/with/slashes/edit` and extract:\r\n         *\r\n         *    * `color: brown`\r\n         *    * `largecode: code/with/slashes`.\r\n         *\r\n         *\r\n         * @param {Object} route Mapping information to be assigned to `$route.current` on route\r\n         *    match.\r\n         *\r\n         *    Object properties:\r\n         *\r\n         *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with\r\n         *      newly created scope or the name of a {@link angular.Module#controller registered\r\n   *      controller} if passed as a string.\r\n         *    - `controllerAs` – `{string=}` – A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *    - `template` – `{string=|function()=}` – html template as a string or a function that\r\n         *      returns an html template as a string which should be used by {@link\r\n            *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\r\n         *      This property takes precedence over `templateUrl`.\r\n         *\r\n         *      If `template` is a function, it will be called with the following parameters:\r\n         *\r\n         *      - `{Array.<Object>}` - route parameters extracted from the current\r\n         *        `$location.path()` by applying the current route\r\n         *\r\n         *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\r\n         *      template that should be used by {@link ngRoute.directive:ngView ngView}.\r\n         *\r\n         *      If `templateUrl` is a function, it will be called with the following parameters:\r\n         *\r\n         *      - `{Array.<Object>}` - route parameters extracted from the current\r\n         *        `$location.path()` by applying the current route\r\n         *\r\n         *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the router\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\r\n         *      fired. If any of the promises are rejected the\r\n         *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired. The map object\r\n         *      is:\r\n         *\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link auto.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller. Be aware that\r\n         *        `ngRoute.$routeParams` will still refer to the previous route within these resolve\r\n         *        functions.  Use `$route.current.params` to access the new route parameters, instead.\r\n         *\r\n         *    - `redirectTo` – {(string|function())=} – value to update\r\n         *      {@link ng.$location $location} path with and trigger route redirection.\r\n         *\r\n         *      If `redirectTo` is a function, it will be called with the following parameters:\r\n         *\r\n         *      - `{Object.<string>}` - route parameters extracted from the current\r\n         *        `$location.path()` by applying the current route templateUrl.\r\n         *      - `{string}` - current `$location.path()`\r\n         *      - `{Object}` - current `$location.search()`\r\n         *\r\n         *      The custom `redirectTo` function is expected to return a string which will be used\r\n         *      to update `$location.path()` and `$location.search()`.\r\n         *\r\n         *    - `[reloadOnSearch=true]` - {boolean=} - reload route when only `$location.search()`\r\n         *      or `$location.hash()` changes.\r\n         *\r\n         *      If the option is set to `false` and url in the browser changes, then\r\n         *      `$routeUpdate` event is broadcasted on the root scope.\r\n         *\r\n         *    - `[caseInsensitiveMatch=false]` - {boolean=} - match routes without being case sensitive\r\n         *\r\n         *      If the option is set to `true`, then the particular route can be matched without being\r\n         *      case sensitive\r\n         *\r\n         * @returns {Object} self\r\n         *\r\n         * @description\r\n         * Adds a new route definition to the `$route` service.\r\n         */\r\n        this.when = function(path, route) {\r\n            //copy original route object to preserve params inherited from proto chain\r\n            var routeCopy = angular.copy(route);\r\n            if (angular.isUndefined(routeCopy.reloadOnSearch)) {\r\n                routeCopy.reloadOnSearch = true;\r\n            }\r\n            if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {\r\n                routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;\r\n            }\r\n            routes[path] = angular.extend(\r\n                routeCopy,\r\n                path && pathRegExp(path, routeCopy)\r\n            );\r\n\r\n            // create redirection for trailing slashes\r\n            if (path) {\r\n                var redirectPath = (path[path.length - 1] == '/')\r\n                    ? path.substr(0, path.length - 1)\r\n                    : path + '/';\r\n\r\n                routes[redirectPath] = angular.extend(\r\n                    {redirectTo: path},\r\n                    pathRegExp(redirectPath, routeCopy)\r\n                );\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc property\r\n         * @name $routeProvider#caseInsensitiveMatch\r\n         * @description\r\n         *\r\n         * A boolean property indicating if routes defined\r\n         * using this provider should be matched using a case insensitive\r\n         * algorithm. Defaults to `false`.\r\n         */\r\n        this.caseInsensitiveMatch = false;\r\n\r\n        /**\r\n         * @param path {string} path\r\n         * @param opts {Object} options\r\n         * @return {?Object}\r\n         *\r\n         * @description\r\n         * Normalizes the given path, returning a regular expression\r\n         * and the original path.\r\n         *\r\n         * Inspired by pathRexp in visionmedia/express/lib/utils.js.\r\n         */\r\n        function pathRegExp(path, opts) {\r\n            var insensitive = opts.caseInsensitiveMatch,\r\n                ret = {\r\n                    originalPath: path,\r\n                    regexp: path\r\n                },\r\n                keys = ret.keys = [];\r\n\r\n            path = path\r\n                .replace(/([().])/g, '\\\\$1')\r\n                .replace(/(\\/)?:(\\w+)([\\?\\*])?/g, function(_, slash, key, option) {\r\n                    var optional = option === '?' ? option : null;\r\n                    var star = option === '*' ? option : null;\r\n                    keys.push({ name: key, optional: !!optional });\r\n                    slash = slash || '';\r\n                    return ''\r\n                        + (optional ? '' : slash)\r\n                        + '(?:'\r\n                        + (optional ? slash : '')\r\n                        + (star && '(.+?)' || '([^/]+)')\r\n                        + (optional || '')\r\n                        + ')'\r\n                        + (optional || '');\r\n                })\r\n                .replace(/([\\/$\\*])/g, '\\\\$1');\r\n\r\n            ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');\r\n            return ret;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name $routeProvider#otherwise\r\n         *\r\n         * @description\r\n         * Sets route definition that will be used on route change when no other route definition\r\n         * is matched.\r\n         *\r\n         * @param {Object|string} params Mapping information to be assigned to `$route.current`.\r\n         * If called with a string, the value maps to `redirectTo`.\r\n         * @returns {Object} self\r\n         */\r\n        this.otherwise = function(params) {\r\n            if (typeof params === 'string') {\r\n                params = {redirectTo: params};\r\n            }\r\n            this.when(null, params);\r\n            return this;\r\n        };\r\n\r\n\r\n        this.$get = ['$rootScope',\r\n            '$location',\r\n            '$routeParams',\r\n            '$q',\r\n            '$injector',\r\n            '$templateRequest',\r\n            '$sce',\r\n            function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {\r\n\r\n                /**\r\n                 * @ngdoc service\r\n                 * @name $route\r\n                 * @requires $location\r\n                 * @requires $routeParams\r\n                 *\r\n                 * @property {Object} current Reference to the current route definition.\r\n                 * The route definition contains:\r\n                 *\r\n                 *   - `controller`: The controller constructor as define in route definition.\r\n                 *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\r\n                 *     controller instantiation. The `locals` contain\r\n                 *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\r\n                 *\r\n                 *     - `$scope` - The current route scope.\r\n                 *     - `$template` - The current route template HTML.\r\n                 *\r\n                 * @property {Object} routes Object with all route configuration Objects as its properties.\r\n                 *\r\n                 * @description\r\n                 * `$route` is used for deep-linking URLs to controllers and views (HTML partials).\r\n                 * It watches `$location.url()` and tries to map the path to an existing route definition.\r\n                 *\r\n                 * Requires the {@link ngRoute `ngRoute`} module to be installed.\r\n                 *\r\n                 * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\r\n                 *\r\n                 * The `$route` service is typically used in conjunction with the\r\n                 * {@link ngRoute.directive:ngView `ngView`} directive and the\r\n                 * {@link ngRoute.$routeParams `$routeParams`} service.\r\n                 *\r\n                 * @example\r\n                 * This example shows how changing the URL hash causes the `$route` to match a route against the\r\n                 * URL, and the `ngView` pulls in the partial.\r\n                 *\r\n                 * <example name=\"$route-service\" module=\"ngRouteExample\"\r\n                 *          deps=\"angular-route.js\" fixBase=\"true\">\r\n                 *   <file name=\"index.html\">\r\n                 *     <div ng-controller=\"MainController\">\r\n                 *       Choose:\r\n                 *       <a href=\"Book/Moby\">Moby</a> |\r\n                 *       <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\r\n                 *       <a href=\"Book/Gatsby\">Gatsby</a> |\r\n                 *       <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\r\n                 *       <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\r\n                 *\r\n                 *       <div ng-view></div>\r\n                 *\r\n                 *       <hr />\r\n                 *\r\n                 *       <pre>$location.path() = {{$location.path()}}</pre>\r\n                 *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\r\n                 *       <pre>$route.current.params = {{$route.current.params}}</pre>\r\n                 *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\r\n                 *       <pre>$routeParams = {{$routeParams}}</pre>\r\n                 *     </div>\r\n                 *   </file>\r\n                 *\r\n                 *   <file name=\"book.html\">\r\n                 *     controller: {{name}}<br />\r\n                 *     Book Id: {{params.bookId}}<br />\r\n                 *   </file>\r\n                 *\r\n                 *   <file name=\"chapter.html\">\r\n                 *     controller: {{name}}<br />\r\n                 *     Book Id: {{params.bookId}}<br />\r\n                 *     Chapter Id: {{params.chapterId}}\r\n                 *   </file>\r\n                 *\r\n                 *   <file name=\"script.js\">\r\n                 *     angular.module('ngRouteExample', ['ngRoute'])\r\n                 *\r\n                 *      .controller('MainController', function($scope, $route, $routeParams, $location) {\r\n     *          $scope.$route = $route;\r\n     *          $scope.$location = $location;\r\n     *          $scope.$routeParams = $routeParams;\r\n     *      })\r\n                 *\r\n                 *      .controller('BookController', function($scope, $routeParams) {\r\n     *          $scope.name = \"BookController\";\r\n     *          $scope.params = $routeParams;\r\n     *      })\r\n                 *\r\n                 *      .controller('ChapterController', function($scope, $routeParams) {\r\n     *          $scope.name = \"ChapterController\";\r\n     *          $scope.params = $routeParams;\r\n     *      })\r\n                 *\r\n                 *     .config(function($routeProvider, $locationProvider) {\r\n     *       $routeProvider\r\n     *        .when('/Book/:bookId', {\r\n     *         templateUrl: 'book.html',\r\n     *         controller: 'BookController',\r\n     *         resolve: {\r\n     *           // I will cause a 1 second delay\r\n     *           delay: function($q, $timeout) {\r\n     *             var delay = $q.defer();\r\n     *             $timeout(delay.resolve, 1000);\r\n     *             return delay.promise;\r\n     *           }\r\n     *         }\r\n     *       })\r\n     *       .when('/Book/:bookId/ch/:chapterId', {\r\n     *         templateUrl: 'chapter.html',\r\n     *         controller: 'ChapterController'\r\n     *       });\r\n     *\r\n     *       // configure html5 to get links working on jsfiddle\r\n     *       $locationProvider.html5Mode(true);\r\n     *     });\r\n                 *\r\n                 *   </file>\r\n                 *\r\n                 *   <file name=\"protractor.js\" type=\"protractor\">\r\n                 *     it('should load and compile correct template', function() {\r\n     *       element(by.linkText('Moby: Ch1')).click();\r\n     *       var content = element(by.css('[ng-view]')).getText();\r\n     *       expect(content).toMatch(/controller\\: ChapterController/);\r\n     *       expect(content).toMatch(/Book Id\\: Moby/);\r\n     *       expect(content).toMatch(/Chapter Id\\: 1/);\r\n     *\r\n     *       element(by.partialLinkText('Scarlet')).click();\r\n     *\r\n     *       content = element(by.css('[ng-view]')).getText();\r\n     *       expect(content).toMatch(/controller\\: BookController/);\r\n     *       expect(content).toMatch(/Book Id\\: Scarlet/);\r\n     *     });\r\n                 *   </file>\r\n                 * </example>\r\n                 */\r\n\r\n                /**\r\n                 * @ngdoc event\r\n                 * @name $route#$routeChangeStart\r\n                 * @eventType broadcast on root scope\r\n                 * @description\r\n                 * Broadcasted before a route change. At this  point the route services starts\r\n                 * resolving all of the dependencies needed for the route change to occur.\r\n                 * Typically this involves fetching the view template as well as any dependencies\r\n                 * defined in `resolve` route property. Once  all of the dependencies are resolved\r\n                 * `$routeChangeSuccess` is fired.\r\n                 *\r\n                 * The route change (and the `$location` change that triggered it) can be prevented\r\n                 * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}\r\n                 * for more details about event object.\r\n                 *\r\n                 * @param {Object} angularEvent Synthetic event object.\r\n                 * @param {Route} next Future route information.\r\n                 * @param {Route} current Current route information.\r\n                 */\r\n\r\n                /**\r\n                 * @ngdoc event\r\n                 * @name $route#$routeChangeSuccess\r\n                 * @eventType broadcast on root scope\r\n                 * @description\r\n                 * Broadcasted after a route dependencies are resolved.\r\n                 * {@link ngRoute.directive:ngView ngView} listens for the directive\r\n                 * to instantiate the controller and render the view.\r\n                 *\r\n                 * @param {Object} angularEvent Synthetic event object.\r\n                 * @param {Route} current Current route information.\r\n                 * @param {Route|Undefined} previous Previous route information, or undefined if current is\r\n                 * first route entered.\r\n                 */\r\n\r\n                /**\r\n                 * @ngdoc event\r\n                 * @name $route#$routeChangeError\r\n                 * @eventType broadcast on root scope\r\n                 * @description\r\n                 * Broadcasted if any of the resolve promises are rejected.\r\n                 *\r\n                 * @param {Object} angularEvent Synthetic event object\r\n                 * @param {Route} current Current route information.\r\n                 * @param {Route} previous Previous route information.\r\n                 * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.\r\n                 */\r\n\r\n                /**\r\n                 * @ngdoc event\r\n                 * @name $route#$routeUpdate\r\n                 * @eventType broadcast on root scope\r\n                 * @description\r\n                 *\r\n                 * The `reloadOnSearch` property has been set to false, and we are reusing the same\r\n                 * instance of the Controller.\r\n                 */\r\n\r\n                var forceReload = false,\r\n                    preparedRoute,\r\n                    preparedRouteIsUpdateOnly,\r\n                    $route = {\r\n                        routes: routes,\r\n\r\n                        /**\r\n                         * @ngdoc method\r\n                         * @name $route#reload\r\n                         *\r\n                         * @description\r\n                         * Causes `$route` service to reload the current route even if\r\n                         * {@link ng.$location $location} hasn't changed.\r\n                         *\r\n                         * As a result of that, {@link ngRoute.directive:ngView ngView}\r\n                         * creates new scope and reinstantiates the controller.\r\n                         */\r\n                        reload: function() {\r\n                            forceReload = true;\r\n                            $rootScope.$evalAsync(function() {\r\n                                // Don't support cancellation of a reload for now...\r\n                                prepareRoute();\r\n                                commitRoute();\r\n                            });\r\n                        },\r\n\r\n                        /**\r\n                         * @ngdoc method\r\n                         * @name $route#updateParams\r\n                         *\r\n                         * @description\r\n                         * Causes `$route` service to update the current URL, replacing\r\n                         * current route parameters with those specified in `newParams`.\r\n                         * Provided property names that match the route's path segment\r\n                         * definitions will be interpolated into the location's path, while\r\n                         * remaining properties will be treated as query params.\r\n                         *\r\n                         * @param {!Object<string, string>} newParams mapping of URL parameter names to values\r\n                         */\r\n                        updateParams: function(newParams) {\r\n                            if (this.current && this.current.$$route) {\r\n                                newParams = angular.extend({}, this.current.params, newParams);\r\n                                $location.path(interpolate(this.current.$$route.originalPath, newParams));\r\n                                // interpolate modifies newParams, only query params are left\r\n                                $location.search(newParams);\r\n                            } else {\r\n                                throw $routeMinErr('norout', 'Tried updating route when with no current route');\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                $rootScope.$on('$locationChangeStart', prepareRoute);\r\n                $rootScope.$on('$locationChangeSuccess', commitRoute);\r\n\r\n                return $route;\r\n\r\n                /////////////////////////////////////////////////////\r\n\r\n                /**\r\n                 * @param on {string} current url\r\n                 * @param route {Object} route regexp to match the url against\r\n                 * @return {?Object}\r\n                 *\r\n                 * @description\r\n                 * Check if the route matches the current url.\r\n                 *\r\n                 * Inspired by match in\r\n                 * visionmedia/express/lib/router/router.js.\r\n                 */\r\n                function switchRouteMatcher(on, route) {\r\n                    var keys = route.keys,\r\n                        params = {};\r\n\r\n                    if (!route.regexp) return null;\r\n\r\n                    var m = route.regexp.exec(on);\r\n                    if (!m) return null;\r\n\r\n                    for (var i = 1, len = m.length; i < len; ++i) {\r\n                        var key = keys[i - 1];\r\n\r\n                        var val = m[i];\r\n\r\n                        if (key && val) {\r\n                            params[key.name] = val;\r\n                        }\r\n                    }\r\n                    return params;\r\n                }\r\n\r\n                function prepareRoute($locationEvent) {\r\n                    var lastRoute = $route.current;\r\n\r\n                    preparedRoute = parseRoute();\r\n                    preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route\r\n                        && angular.equals(preparedRoute.pathParams, lastRoute.pathParams)\r\n                        && !preparedRoute.reloadOnSearch && !forceReload;\r\n\r\n                    if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {\r\n                        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {\r\n                            if ($locationEvent) {\r\n                                $locationEvent.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function commitRoute() {\r\n                    var lastRoute = $route.current;\r\n                    var nextRoute = preparedRoute;\r\n\r\n                    if (preparedRouteIsUpdateOnly) {\r\n                        lastRoute.params = nextRoute.params;\r\n                        angular.copy(lastRoute.params, $routeParams);\r\n                        $rootScope.$broadcast('$routeUpdate', lastRoute);\r\n                    } else if (nextRoute || lastRoute) {\r\n                        forceReload = false;\r\n                        $route.current = nextRoute;\r\n                        if (nextRoute) {\r\n                            if (nextRoute.redirectTo) {\r\n                                if (angular.isString(nextRoute.redirectTo)) {\r\n                                    $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params)\r\n                                        .replace();\r\n                                } else {\r\n                                    $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search()))\r\n                                        .replace();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        $q.when(nextRoute).\r\n                        then(function() {\r\n                            if (nextRoute) {\r\n                                var locals = angular.extend({}, nextRoute.resolve),\r\n                                    template, templateUrl;\r\n\r\n                                angular.forEach(locals, function(value, key) {\r\n                                    locals[key] = angular.isString(value) ?\r\n                                        $injector.get(value) : $injector.invoke(value, null, null, key);\r\n                                });\r\n\r\n                                if (angular.isDefined(template = nextRoute.template)) {\r\n                                    if (angular.isFunction(template)) {\r\n                                        template = template(nextRoute.params);\r\n                                    }\r\n                                } else if (angular.isDefined(templateUrl = nextRoute.templateUrl)) {\r\n                                    if (angular.isFunction(templateUrl)) {\r\n                                        templateUrl = templateUrl(nextRoute.params);\r\n                                    }\r\n                                    templateUrl = $sce.getTrustedResourceUrl(templateUrl);\r\n                                    if (angular.isDefined(templateUrl)) {\r\n                                        nextRoute.loadedTemplateUrl = templateUrl;\r\n                                        template = $templateRequest(templateUrl);\r\n                                    }\r\n                                }\r\n                                if (angular.isDefined(template)) {\r\n                                    locals['$template'] = template;\r\n                                }\r\n                                return $q.all(locals);\r\n                            }\r\n                        }).\r\n                        // after route change\r\n                        then(function(locals) {\r\n                            if (nextRoute == $route.current) {\r\n                                if (nextRoute) {\r\n                                    nextRoute.locals = locals;\r\n                                    angular.copy(nextRoute.params, $routeParams);\r\n                                }\r\n                                $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);\r\n                            }\r\n                        }, function(error) {\r\n                            if (nextRoute == $route.current) {\r\n                                $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n\r\n                /**\r\n                 * @returns {Object} the current active route, by matching it against the URL\r\n                 */\r\n                function parseRoute() {\r\n                    // Match a route\r\n                    var params, match;\r\n                    angular.forEach(routes, function(route, path) {\r\n                        if (!match && (params = switchRouteMatcher($location.path(), route))) {\r\n                            match = inherit(route, {\r\n                                params: angular.extend({}, $location.search(), params),\r\n                                pathParams: params});\r\n                            match.$$route = route;\r\n                        }\r\n                    });\r\n                    // No route matched; fallback to \"otherwise\" route\r\n                    return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});\r\n                }\r\n\r\n                /**\r\n                 * @returns {string} interpolation of the redirect path with the parameters\r\n                 */\r\n                function interpolate(string, params) {\r\n                    var result = [];\r\n                    angular.forEach((string || '').split(':'), function(segment, i) {\r\n                        if (i === 0) {\r\n                            result.push(segment);\r\n                        } else {\r\n                            var segmentMatch = segment.match(/(\\w+)(?:[?*])?(.*)/);\r\n                            var key = segmentMatch[1];\r\n                            result.push(params[key]);\r\n                            result.push(segmentMatch[2] || '');\r\n                            delete params[key];\r\n                        }\r\n                    });\r\n                    return result.join('');\r\n                }\r\n            }];\r\n    }\r\n\r\n    ngRouteModule.provider('$routeParams', $RouteParamsProvider);\r\n\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name $routeParams\r\n     * @requires $route\r\n     *\r\n     * @description\r\n     * The `$routeParams` service allows you to retrieve the current set of route parameters.\r\n     *\r\n     * Requires the {@link ngRoute `ngRoute`} module to be installed.\r\n     *\r\n     * The route parameters are a combination of {@link ng.$location `$location`}'s\r\n     * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\r\n     * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\r\n     *\r\n     * In case of parameter name collision, `path` params take precedence over `search` params.\r\n     *\r\n     * The service guarantees that the identity of the `$routeParams` object will remain unchanged\r\n     * (but its properties will likely change) even when a route change occurs.\r\n     *\r\n     * Note that the `$routeParams` are only updated *after* a route change completes successfully.\r\n     * This means that you cannot rely on `$routeParams` being correct in route resolve functions.\r\n     * Instead you can use `$route.current.params` to access the new route's parameters.\r\n     *\r\n     * @example\r\n     * ```js\r\n     *  // Given:\r\n     *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\r\n     *  // Route: /Chapter/:chapterId/Section/:sectionId\r\n     *  //\r\n     *  // Then\r\n     *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}\r\n     * ```\r\n     */\r\n    function $RouteParamsProvider() {\r\n        this.$get = function() { return {}; };\r\n    }\r\n\r\n    ngRouteModule.directive('ngView', ngViewFactory);\r\n    ngRouteModule.directive('ngView', ngViewFillContentFactory);\r\n\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name ngView\r\n     * @restrict ECA\r\n     *\r\n     * @description\r\n     * # Overview\r\n     * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by\r\n     * including the rendered template of the current route into the main layout (`index.html`) file.\r\n     * Every time the current route changes, the included view changes with it according to the\r\n     * configuration of the `$route` service.\r\n     *\r\n     * Requires the {@link ngRoute `ngRoute`} module to be installed.\r\n     *\r\n     * @animations\r\n     * enter - animation is used to bring new content into the browser.\r\n     * leave - animation is used to animate existing content away.\r\n     *\r\n     * The enter and leave animation occur concurrently.\r\n     *\r\n     * @scope\r\n     * @priority 400\r\n     * @param {string=} onload Expression to evaluate whenever the view updates.\r\n     *\r\n     * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll\r\n *                  $anchorScroll} to scroll the viewport after the view is updated.\r\n     *\r\n     *                  - If the attribute is not set, disable scrolling.\r\n     *                  - If the attribute is set without value, enable scrolling.\r\n     *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\r\n     *                    as an expression yields a truthy value.\r\n     * @example\r\n     <example name=\"ngView-directive\" module=\"ngViewExample\"\r\n     deps=\"angular-route.js;angular-animate.js\"\r\n     animations=\"true\" fixBase=\"true\">\r\n     <file name=\"index.html\">\r\n     <div ng-controller=\"MainCtrl as main\">\r\n     Choose:\r\n     <a href=\"Book/Moby\">Moby</a> |\r\n     <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\r\n     <a href=\"Book/Gatsby\">Gatsby</a> |\r\n     <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\r\n     <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\r\n\r\n     <div class=\"view-animate-container\">\r\n     <div ng-view class=\"view-animate\"></div>\r\n     </div>\r\n     <hr />\r\n\r\n     <pre>$location.path() = {{main.$location.path()}}</pre>\r\n     <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\r\n     <pre>$route.current.params = {{main.$route.current.params}}</pre>\r\n     <pre>$routeParams = {{main.$routeParams}}</pre>\r\n     </div>\r\n     </file>\r\n\r\n     <file name=\"book.html\">\r\n     <div>\r\n     controller: {{book.name}}<br />\r\n     Book Id: {{book.params.bookId}}<br />\r\n     </div>\r\n     </file>\r\n\r\n     <file name=\"chapter.html\">\r\n     <div>\r\n     controller: {{chapter.name}}<br />\r\n     Book Id: {{chapter.params.bookId}}<br />\r\n     Chapter Id: {{chapter.params.chapterId}}\r\n     </div>\r\n     </file>\r\n\r\n     <file name=\"animations.css\">\r\n     .view-animate-container {\r\n          position:relative;\r\n          height:100px!important;\r\n          background:white;\r\n          border:1px solid black;\r\n          height:40px;\r\n          overflow:hidden;\r\n        }\r\n\r\n     .view-animate {\r\n          padding:10px;\r\n        }\r\n\r\n     .view-animate.ng-enter, .view-animate.ng-leave {\r\n          -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\r\n          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\r\n\r\n          display:block;\r\n          width:100%;\r\n          border-left:1px solid black;\r\n\r\n          position:absolute;\r\n          top:0;\r\n          left:0;\r\n          right:0;\r\n          bottom:0;\r\n          padding:10px;\r\n        }\r\n\r\n     .view-animate.ng-enter {\r\n          left:100%;\r\n        }\r\n     .view-animate.ng-enter.ng-enter-active {\r\n          left:0;\r\n        }\r\n     .view-animate.ng-leave.ng-leave-active {\r\n          left:-100%;\r\n        }\r\n     </file>\r\n\r\n     <file name=\"script.js\">\r\n     angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])\r\n     .config(['$routeProvider', '$locationProvider',\r\n     function($routeProvider, $locationProvider) {\r\n              $routeProvider\r\n                .when('/Book/:bookId', {\r\n                  templateUrl: 'book.html',\r\n                  controller: 'BookCtrl',\r\n                  controllerAs: 'book'\r\n                })\r\n                .when('/Book/:bookId/ch/:chapterId', {\r\n                  templateUrl: 'chapter.html',\r\n                  controller: 'ChapterCtrl',\r\n                  controllerAs: 'chapter'\r\n                });\r\n\r\n              $locationProvider.html5Mode(true);\r\n          }])\r\n     .controller('MainCtrl', ['$route', '$routeParams', '$location',\r\n     function($route, $routeParams, $location) {\r\n              this.$route = $route;\r\n              this.$location = $location;\r\n              this.$routeParams = $routeParams;\r\n          }])\r\n     .controller('BookCtrl', ['$routeParams', function($routeParams) {\r\n            this.name = \"BookCtrl\";\r\n            this.params = $routeParams;\r\n          }])\r\n     .controller('ChapterCtrl', ['$routeParams', function($routeParams) {\r\n            this.name = \"ChapterCtrl\";\r\n            this.params = $routeParams;\r\n          }]);\r\n\r\n     </file>\r\n\r\n     <file name=\"protractor.js\" type=\"protractor\">\r\n     it('should load and compile correct template', function() {\r\n          element(by.linkText('Moby: Ch1')).click();\r\n          var content = element(by.css('[ng-view]')).getText();\r\n          expect(content).toMatch(/controller\\: ChapterCtrl/);\r\n          expect(content).toMatch(/Book Id\\: Moby/);\r\n          expect(content).toMatch(/Chapter Id\\: 1/);\r\n\r\n          element(by.partialLinkText('Scarlet')).click();\r\n\r\n          content = element(by.css('[ng-view]')).getText();\r\n          expect(content).toMatch(/controller\\: BookCtrl/);\r\n          expect(content).toMatch(/Book Id\\: Scarlet/);\r\n        });\r\n     </file>\r\n     </example>\r\n     */\r\n\r\n\r\n    /**\r\n     * @ngdoc event\r\n     * @name ngView#$viewContentLoaded\r\n     * @eventType emit on the current ngView scope\r\n     * @description\r\n     * Emitted every time the ngView content is reloaded.\r\n     */\r\n    ngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];\r\n    function ngViewFactory($route, $anchorScroll, $animate) {\r\n        return {\r\n            restrict: 'ECA',\r\n            terminal: true,\r\n            priority: 400,\r\n            transclude: 'element',\r\n            link: function(scope, $element, attr, ctrl, $transclude) {\r\n                var currentScope,\r\n                    currentElement,\r\n                    previousLeaveAnimation,\r\n                    autoScrollExp = attr.autoscroll,\r\n                    onloadExp = attr.onload || '';\r\n\r\n                scope.$on('$routeChangeSuccess', update);\r\n                update();\r\n\r\n                function cleanupLastView() {\r\n                    if (previousLeaveAnimation) {\r\n                        $animate.cancel(previousLeaveAnimation);\r\n                        previousLeaveAnimation = null;\r\n                    }\r\n\r\n                    if (currentScope) {\r\n                        currentScope.$destroy();\r\n                        currentScope = null;\r\n                    }\r\n                    if (currentElement) {\r\n                        previousLeaveAnimation = $animate.leave(currentElement);\r\n                        previousLeaveAnimation.then(function() {\r\n                            previousLeaveAnimation = null;\r\n                        });\r\n                        currentElement = null;\r\n                    }\r\n                }\r\n\r\n                function update() {\r\n                    var locals = $route.current && $route.current.locals,\r\n                        template = locals && locals.$template;\r\n\r\n                    if (angular.isDefined(template)) {\r\n                        var newScope = scope.$new();\r\n                        var current = $route.current;\r\n\r\n                        // Note: This will also link all children of ng-view that were contained in the original\r\n                        // html. If that content contains controllers, ... they could pollute/change the scope.\r\n                        // However, using ng-view on an element with additional content does not make sense...\r\n                        // Note: We can't remove them in the cloneAttchFn of $transclude as that\r\n                        // function is called before linking the content, which would apply child\r\n                        // directives to non existing elements.\r\n                        var clone = $transclude(newScope, function(clone) {\r\n                            $animate.enter(clone, null, currentElement || $element).then(function onNgViewEnter() {\r\n                                if (angular.isDefined(autoScrollExp)\r\n                                    && (!autoScrollExp || scope.$eval(autoScrollExp))) {\r\n                                    $anchorScroll();\r\n                                }\r\n                            });\r\n                            cleanupLastView();\r\n                        });\r\n\r\n                        currentElement = clone;\r\n                        currentScope = current.scope = newScope;\r\n                        currentScope.$emit('$viewContentLoaded');\r\n                        currentScope.$eval(onloadExp);\r\n                    } else {\r\n                        cleanupLastView();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n// This directive is called during the $transclude call of the first `ngView` directive.\r\n// It will replace and compile the content of the element with the loaded template.\r\n// We need this directive so that the element content is already filled when\r\n// the link function of another directive on the same element as ngView\r\n// is called.\r\n    ngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];\r\n    function ngViewFillContentFactory($compile, $controller, $route) {\r\n        return {\r\n            restrict: 'ECA',\r\n            priority: -400,\r\n            link: function(scope, $element) {\r\n                var current = $route.current,\r\n                    locals = current.locals;\r\n\r\n                $element.html(locals.$template);\r\n\r\n                var link = $compile($element.contents());\r\n\r\n                if (current.controller) {\r\n                    locals.$scope = scope;\r\n                    var controller = $controller(current.controller, locals);\r\n                    if (current.controllerAs) {\r\n                        scope[current.controllerAs] = controller;\r\n                    }\r\n                    $element.data('$ngControllerController', controller);\r\n                    $element.children().data('$ngControllerController', controller);\r\n                }\r\n\r\n                link(scope);\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n})(window, window.angular);"]}