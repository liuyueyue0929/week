{"version":3,"sources":["callbacks-compiled.js"],"names":[],"mappings":"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","file":"callbacks-compiled-compiled.js","sourcesContent":["define([\"./core\", \"./var/rnothtmlwhite\"], function (jQuery, rnothtmlwhite) {\n\n\t\"use strict\";\n\n\t// Convert String-formatted options into Object-formatted ones\n\n\tfunction createOptions(options) {\n\t\tvar object = {};\n\t\tjQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n\t\t\tobject[flag] = true;\n\t\t});\n\t\treturn object;\n\t}\n\n\t/*\n  * Create a callback list using the following parameters:\n  *\n  *\toptions: an optional list of space-separated options that will change how\n  *\t\t\tthe callback list behaves or a more traditional option object\n  *\n  * By default a callback list will act like an event callback list and can be\n  * \"fired\" multiple times.\n  *\n  * Possible options:\n  *\n  *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n  *\n  *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n  *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n  *\t\t\t\t\tvalues (like a Deferred)\n  *\n  *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n  *\n  *\tstopOnFalse:\tinterrupt callings when a callback returns false\n  *\n  */\n\tjQuery.Callbacks = function (options) {\n\n\t\t// Convert options from String-formatted to Object-formatted if needed\n\t\t// (we check in cache first)\n\t\toptions = typeof options === \"string\" ? createOptions(options) : jQuery.extend({}, options);\n\n\t\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\n\t\t// Fire callbacks\n\t\tfire = function () {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor (; queue.length; firingIndex = -1) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile (++firingIndex < list.length) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif (!options.memory) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif (locked) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif (memory) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function () {\n\t\t\t\tif (list) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif (memory && !firing) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push(memory);\n\t\t\t\t\t}\n\n\t\t\t\t\t(function add(args) {\n\t\t\t\t\t\tjQuery.each(args, function (_, arg) {\n\t\t\t\t\t\t\tif (jQuery.isFunction(arg)) {\n\t\t\t\t\t\t\t\tif (!options.unique || !self.has(arg)) {\n\t\t\t\t\t\t\t\t\tlist.push(arg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (arg && arg.length && jQuery.type(arg) !== \"string\") {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd(arg);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})(arguments);\n\n\t\t\t\t\tif (memory && !firing) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function () {\n\t\t\t\tjQuery.each(arguments, function (_, arg) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ((index = jQuery.inArray(arg, list, index)) > -1) {\n\t\t\t\t\t\tlist.splice(index, 1);\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif (index <= firingIndex) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function (fn) {\n\t\t\t\treturn fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function () {\n\t\t\t\tif (list) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function () {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function () {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function () {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif (!memory && !firing) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function () {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function (context, args) {\n\t\t\t\tif (!locked) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [context, args.slice ? args.slice() : args];\n\t\t\t\t\tqueue.push(args);\n\t\t\t\t\tif (!firing) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function () {\n\t\t\t\tself.fireWith(this, arguments);\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function () {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\t\treturn self;\n\t};\n\n\treturn jQuery;\n});\n\n//# sourceMappingURL=callbacks-compiled.js.map"]}