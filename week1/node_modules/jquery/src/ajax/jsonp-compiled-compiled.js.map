{"version":3,"sources":["jsonp-compiled.js"],"names":[],"mappings":"AAAA,OAAO,CAAC,SAAD,EAAY,aAAZ,EAA2B,cAA3B,EAA2C,SAA3C,CAAP,EAA8D,UAAU,MAAV,EAAkB,KAAlB,EAAyB,MAAzB,EAAiC;;AAE9F;;AAEA,KAAI,eAAe,EAAnB;AAAA,KACI,SAAS,mBADb;;AAGA;AACA,QAAO,SAAP,CAAiB;AAChB,SAAO,UADS;AAEhB,iBAAe,YAAY;AAC1B,OAAI,WAAW,aAAa,GAAb,MAAsB,OAAO,OAAP,GAAiB,GAAjB,GAAuB,OAA5D;AACA,QAAK,QAAL,IAAiB,IAAjB;AACA,UAAO,QAAP;AACA;AANe,EAAjB;;AASA;AACA,QAAO,aAAP,CAAqB,YAArB,EAAmC,UAAU,CAAV,EAAa,gBAAb,EAA+B,KAA/B,EAAsC;;AAExE,MAAI,YAAJ;AAAA,MACI,WADJ;AAAA,MAEI,iBAFJ;AAAA,MAGI,WAAW,EAAE,KAAF,KAAY,KAAZ,KAAsB,OAAO,IAAP,CAAY,EAAE,GAAd,IAAqB,KAArB,GAA6B,OAAO,EAAE,IAAT,KAAkB,QAAlB,IAA8B,CAAC,EAAE,WAAF,IAAiB,EAAlB,EAAsB,OAAtB,CAA8B,mCAA9B,MAAuE,CAArG,IAA0G,OAAO,IAAP,CAAY,EAAE,IAAd,CAA1G,IAAiI,MAApL,CAHf;;AAKA;AACA,MAAI,YAAY,EAAE,SAAF,CAAY,CAAZ,MAAmB,OAAnC,EAA4C;;AAE3C;AACA,kBAAe,EAAE,aAAF,GAAkB,OAAO,UAAP,CAAkB,EAAE,aAApB,IAAqC,EAAE,aAAF,EAArC,GAAyD,EAAE,aAA5F;;AAEA;AACA,OAAI,QAAJ,EAAc;AACb,MAAE,QAAF,IAAc,EAAE,QAAF,EAAY,OAAZ,CAAoB,MAApB,EAA4B,OAAO,YAAnC,CAAd;AACA,IAFD,MAEO,IAAI,EAAE,KAAF,KAAY,KAAhB,EAAuB;AAC7B,MAAE,GAAF,IAAS,CAAC,OAAO,IAAP,CAAY,EAAE,GAAd,IAAqB,GAArB,GAA2B,GAA5B,IAAmC,EAAE,KAArC,GAA6C,GAA7C,GAAmD,YAA5D;AACA;;AAED;AACA,KAAE,UAAF,CAAa,aAAb,IAA8B,YAAY;AACzC,QAAI,CAAC,iBAAL,EAAwB;AACvB,YAAO,KAAP,CAAa,eAAe,iBAA5B;AACA;AACD,WAAO,kBAAkB,CAAlB,CAAP;AACA,IALD;;AAOA;AACA,KAAE,SAAF,CAAY,CAAZ,IAAiB,MAAjB;;AAEA;AACA,iBAAc,OAAO,YAAP,CAAd;AACA,UAAO,YAAP,IAAuB,YAAY;AAClC,wBAAoB,SAApB;AACA,IAFD;;AAIA;AACA,SAAM,MAAN,CAAa,YAAY;;AAExB;AACA,QAAI,gBAAgB,SAApB,EAA+B;AAC9B,YAAO,MAAP,EAAe,UAAf,CAA0B,YAA1B;;AAEA;AACA,KAJD,MAIO;AACN,YAAO,YAAP,IAAuB,WAAvB;AACA;;AAED;AACA,QAAI,EAAE,YAAF,CAAJ,EAAqB;;AAEpB;AACA,OAAE,aAAF,GAAkB,iBAAiB,aAAnC;;AAEA;AACA,kBAAa,IAAb,CAAkB,YAAlB;AACA;;AAED;AACA,QAAI,qBAAqB,OAAO,UAAP,CAAkB,WAAlB,CAAzB,EAAyD;AACxD,iBAAY,kBAAkB,CAAlB,CAAZ;AACA;;AAED,wBAAoB,cAAc,SAAlC;AACA,IA3BD;;AA6BA;AACA,UAAO,QAAP;AACA;AACD,EAtED;AAuEA,CAzFD;;AA2FA","file":"jsonp-compiled-compiled.js","sourcesContent":["define([\"../core\", \"./var/nonce\", \"./var/rquery\", \"../ajax\"], function (jQuery, nonce, rquery) {\n\n\t\"use strict\";\n\n\tvar oldCallbacks = [],\n\t    rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n\t// Default jsonp settings\n\tjQuery.ajaxSetup({\n\t\tjsonp: \"callback\",\n\t\tjsonpCallback: function () {\n\t\t\tvar callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\n\t\t\tthis[callback] = true;\n\t\t\treturn callback;\n\t\t}\n\t});\n\n\t// Detect, normalize options and install callbacks for jsonp requests\n\tjQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n\n\t\tvar callbackName,\n\t\t    overwritten,\n\t\t    responseContainer,\n\t\t    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data) && \"data\");\n\n\t\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\t\tif (jsonProp || s.dataTypes[0] === \"jsonp\") {\n\n\t\t\t// Get callback name, remembering preexisting value associated with it\n\t\t\tcallbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n\n\t\t\t// Insert callback into url or form data\n\t\t\tif (jsonProp) {\n\t\t\t\ts[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n\t\t\t} else if (s.jsonp !== false) {\n\t\t\t\ts.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n\t\t\t}\n\n\t\t\t// Use data converter to retrieve json after script execution\n\t\t\ts.converters[\"script json\"] = function () {\n\t\t\t\tif (!responseContainer) {\n\t\t\t\t\tjQuery.error(callbackName + \" was not called\");\n\t\t\t\t}\n\t\t\t\treturn responseContainer[0];\n\t\t\t};\n\n\t\t\t// Force json dataType\n\t\t\ts.dataTypes[0] = \"json\";\n\n\t\t\t// Install callback\n\t\t\toverwritten = window[callbackName];\n\t\t\twindow[callbackName] = function () {\n\t\t\t\tresponseContainer = arguments;\n\t\t\t};\n\n\t\t\t// Clean-up function (fires after converters)\n\t\t\tjqXHR.always(function () {\n\n\t\t\t\t// If previous value didn't exist - remove it\n\t\t\t\tif (overwritten === undefined) {\n\t\t\t\t\tjQuery(window).removeProp(callbackName);\n\n\t\t\t\t\t// Otherwise restore preexisting value\n\t\t\t\t} else {\n\t\t\t\t\twindow[callbackName] = overwritten;\n\t\t\t\t}\n\n\t\t\t\t// Save back as free\n\t\t\t\tif (s[callbackName]) {\n\n\t\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t\t// Save the callback name for future use\n\t\t\t\t\toldCallbacks.push(callbackName);\n\t\t\t\t}\n\n\t\t\t\t// Call if it was a function and we have a response\n\t\t\t\tif (responseContainer && jQuery.isFunction(overwritten)) {\n\t\t\t\t\toverwritten(responseContainer[0]);\n\t\t\t\t}\n\n\t\t\t\tresponseContainer = overwritten = undefined;\n\t\t\t});\n\n\t\t\t// Delegate to script\n\t\t\treturn \"script\";\n\t\t}\n\t});\n});\n\n//# sourceMappingURL=jsonp-compiled.js.map"]}