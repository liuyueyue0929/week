{"version":3,"sources":["utf7.js"],"names":[],"mappings":"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","file":"utf7-compiled.js","sourcesContent":["\"use strict\"\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return new Buffer(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = new Buffer(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = new Buffer(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = new Buffer(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(new Buffer(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(new Buffer(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n"]}