{"version":3,"sources":["read.js"],"names":[],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;;AAKA,IAAI,cAAc,QAAQ,aAAR,CAAlB;AACA,IAAI,UAAU,QAAQ,UAAR,CAAd;AACA,IAAI,QAAQ,QAAQ,YAAR,CAAZ;AACA,IAAI,aAAa,QAAQ,aAAR,CAAjB;AACA,IAAI,OAAO,QAAQ;;AAEnB;;;;AAFW,CAAX,CAMA,OAAO,OAAP,GAAiB,IAAjB;;AAEA;;;;;;;;;;;;AAYA,SAAS,IAAT,CAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB,EAA+B,KAA/B,EAAsC,KAAtC,EAA6C,OAA7C,EAAsD;AACpD,MAAI,MAAJ;AACA,MAAI,OAAO,OAAX;AACA,MAAI,MAAJ;;AAEA;AACA,MAAI,KAAJ,GAAY,IAAZ;;AAEA;AACA,MAAI,WAAW,KAAK,QAAL,KAAkB,IAAlB,GACX,KAAK,QADM,GAEX,IAFJ;AAGA,MAAI,SAAS,KAAK,MAAlB;;AAEA,MAAI;AACF;AACA,aAAS,cAAc,GAAd,EAAmB,KAAnB,EAA0B,KAAK,OAA/B,CAAT;AACA,aAAS,OAAO,MAAhB;AACA,WAAO,MAAP,GAAgB,SAAhB;AACD,GALD,CAKE,OAAO,GAAP,EAAY;AACZ,WAAO,KAAK,GAAL,CAAP;AACD;;AAED;AACA,OAAK,MAAL,GAAc,MAAd;AACA,OAAK,QAAL,GAAgB,SACZ,IADY,GAEZ,QAFJ;;AAIA;AACA,MAAI,KAAK,QAAL,KAAkB,IAAlB,IAA0B,aAAa,IAAvC,IAA+C,CAAC,MAAM,cAAN,CAAqB,QAArB,CAApD,EAAoF;AAClF,WAAO,KAAK,YAAY,GAAZ,EAAiB,0BAA0B,SAAS,WAAT,EAA1B,GAAmD,GAApE,EAAyE;AACnF,eAAS,SAAS,WAAT;AAD0E,KAAzE,CAAL,CAAP;AAGD;;AAED;AACA,QAAM,WAAN;AACA,UAAQ,MAAR,EAAgB,IAAhB,EAAsB,UAAU,GAAV,EAAe,IAAf,EAAqB;AACzC,QAAI,GAAJ,EAAS;AACP;AACA,qBAAe,GAAf,EAAoB;;AAEpB;AAFA,QAGA,IAAI,IAAI,IAAJ,KAAa,sBAAjB,EAAyC;AACvC,cAAM,YAAY,GAAZ,EAAiB,0BAA0B,SAAS,WAAT,EAA1B,GAAmD,GAApE,EAAyE;AAC7E,mBAAS,SAAS,WAAT;AADoE,SAAzE,CAAN;AAGD;;AAED;AACA,aAAO,MAAP;AACA,iBAAW,GAAX,EAAgB,SAAS,UAAT,GAAuB;AACrC,aAAK,GAAL;AACD,OAFD;AAGA;AACD;;AAED;AACA,QAAI,MAAJ,EAAY;AACV,UAAI;AACF,cAAM,aAAN;AACA,eAAO,GAAP,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,QAAvB;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ;AACA,uBAAe,GAAf,EAAoB,GAApB;AACA,aAAK,GAAL;AACA;AACD;AACF;;AAED;AACA,QAAI,GAAJ;AACA,QAAI;AACF,YAAM,YAAN;AACA,YAAM,OAAO,IAAP,KAAgB,QAAhB,IAA4B,aAAa,IAAzC,GACF,MAAM,MAAN,CAAa,IAAb,EAAmB,QAAnB,CADE,GAEF,IAFJ;AAGA,UAAI,IAAJ,GAAW,MAAM,GAAN,CAAX;AACD,KAND,CAME,OAAO,GAAP,EAAY;AACZ,UAAI,IAAJ,GAAW,QAAQ,SAAR,GACP,IADO,GAEP,GAFJ;;AAIA;AACA,qBAAe,GAAf,EAAoB,GAApB;;AAEA,WAAK,GAAL;AACA;AACD;;AAED;AACD,GAtDD;AAuDD;;AAED;;;;;;;;;;AAUA,SAAS,aAAT,CAAwB,GAAxB,EAA6B,KAA7B,EAAoC,OAApC,EAA6C;AAC3C,MAAI,WAAW,CAAC,IAAI,OAAJ,CAAY,kBAAZ,KAAmC,UAApC,EAAgD,WAAhD,EAAf;AACA,MAAI,SAAS,IAAI,OAAJ,CAAY,gBAAZ,CAAb;AACA,MAAI,MAAJ;;AAEA,QAAM,uBAAN,EAA+B,QAA/B;;AAEA,MAAI,YAAY,KAAZ,IAAqB,aAAa,UAAtC,EAAkD;AAChD,UAAM,YAAY,GAAZ,EAAiB,8BAAjB,CAAN;AACD;;AAED,UAAQ,QAAR;AACE,SAAK,SAAL;AACE,eAAS,KAAK,aAAL,EAAT;AACA,YAAM,cAAN;AACA,UAAI,IAAJ,CAAS,MAAT;AACA;AACF,SAAK,MAAL;AACE,eAAS,KAAK,YAAL,EAAT;AACA,YAAM,aAAN;AACA,UAAI,IAAJ,CAAS,MAAT;AACA;AACF,SAAK,UAAL;AACE,eAAS,GAAT;AACA,aAAO,MAAP,GAAgB,MAAhB;AACA;AACF;AACE,YAAM,YAAY,GAAZ,EAAiB,mCAAmC,QAAnC,GAA8C,GAA/D,EAAoE;AACxE,kBAAU;AAD8D,OAApE,CAAN;AAhBJ;;AAqBA,SAAO,MAAP;AACD;;AAED;;;;;AAKA,SAAS,cAAT,CAAyB,KAAzB,EAAgC,MAAhC,EAAwC;AACtC,MAAI,CAAC,MAAM,MAAP,IAAiB,CAAC,MAAM,UAA5B,EAAwC;AACtC,UAAM,MAAN,GAAe,MAAf;AACA,UAAM,UAAN,GAAmB,MAAnB;AACD;AACF","file":"read-compiled.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar getBody = require('raw-body')\nvar iconv = require('iconv-lite')\nvar onFinished = require('on-finished')\nvar zlib = require('zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = read\n\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} options\n * @private\n */\n\nfunction read (req, res, next, parse, debug, options) {\n  var length\n  var opts = options\n  var stream\n\n  // flag as parsed\n  req._body = true\n\n  // read options\n  var encoding = opts.encoding !== null\n    ? opts.encoding\n    : null\n  var verify = opts.verify\n\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate)\n    length = stream.length\n    stream.length = undefined\n  } catch (err) {\n    return next(err)\n  }\n\n  // set raw-body options\n  opts.length = length\n  opts.encoding = verify\n    ? null\n    : encoding\n\n  // assert charset is supported\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase()\n    }))\n  }\n\n  // read body\n  debug('read body')\n  getBody(stream, opts, function (err, body) {\n    if (err) {\n      // default to 400\n      setErrorStatus(err, 400)\n\n      // echo back charset\n      if (err.type === 'encoding.unsupported') {\n        err = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase()\n        })\n      }\n\n      // read off entire request\n      stream.resume()\n      onFinished(req, function onfinished () {\n        next(err)\n      })\n      return\n    }\n\n    // verify\n    if (verify) {\n      try {\n        debug('verify body')\n        verify(req, res, body, encoding)\n      } catch (err) {\n        // default to 403\n        setErrorStatus(err, 403)\n        next(err)\n        return\n      }\n    }\n\n    // parse\n    var str\n    try {\n      debug('parse body')\n      str = typeof body !== 'string' && encoding !== null\n        ? iconv.decode(body, encoding)\n        : body\n      req.body = parse(str)\n    } catch (err) {\n      err.body = str === undefined\n        ? body\n        : str\n\n      // default to 400\n      setErrorStatus(err, 400)\n\n      next(err)\n      return\n    }\n\n    next()\n  })\n}\n\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\nfunction contentstream (req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\n  var length = req.headers['content-length']\n  var stream\n\n  debug('content-encoding \"%s\"', encoding)\n\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported')\n  }\n\n  switch (encoding) {\n    case 'deflate':\n      stream = zlib.createInflate()\n      debug('inflate body')\n      req.pipe(stream)\n      break\n    case 'gzip':\n      stream = zlib.createGunzip()\n      debug('gunzip body')\n      req.pipe(stream)\n      break\n    case 'identity':\n      stream = req\n      stream.length = length\n      break\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding\n      })\n  }\n\n  return stream\n}\n\n/**\n * Set a status on an error object, if ones does not exist\n * @private\n */\n\nfunction setErrorStatus (error, status) {\n  if (!error.status && !error.statusCode) {\n    error.status = status\n    error.statusCode = status\n  }\n}\n"]}