{"version":3,"sources":["text.js"],"names":[],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;AAIA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,cAAc,QAAQ,cAAR,CAAlB;AACA,IAAI,QAAQ,QAAQ,OAAR,EAAiB,kBAAjB,CAAZ;AACA,IAAI,OAAO,QAAQ,SAAR,CAAX;AACA,IAAI,SAAS,QAAQ;;AAErB;;;;AAFa,CAAb,CAMA,OAAO,OAAP,GAAiB,IAAjB;;AAEA;;;;;;;;AAQA,SAAS,IAAT,CAAe,OAAf,EAAwB;AACtB,MAAI,OAAO,WAAW,EAAtB;;AAEA,MAAI,iBAAiB,KAAK,cAAL,IAAuB,OAA5C;AACA,MAAI,UAAU,KAAK,OAAL,KAAiB,KAA/B;AACA,MAAI,QAAQ,OAAO,KAAK,KAAZ,KAAsB,QAAtB,GACR,MAAM,KAAN,CAAY,KAAK,KAAL,IAAc,OAA1B,CADQ,GAER,KAAK,KAFT;AAGA,MAAI,OAAO,KAAK,IAAL,IAAa,YAAxB;AACA,MAAI,SAAS,KAAK,MAAL,IAAe,KAA5B;;AAEA,MAAI,WAAW,KAAX,IAAoB,OAAO,MAAP,KAAkB,UAA1C,EAAsD;AACpD,UAAM,IAAI,SAAJ,CAAc,gCAAd,CAAN;AACD;;AAED;AACA,MAAI,cAAc,OAAO,IAAP,KAAgB,UAAhB,GACd,YAAY,IAAZ,CADc,GAEd,IAFJ;;AAIA,WAAS,KAAT,CAAgB,GAAhB,EAAqB;AACnB,WAAO,GAAP;AACD;;AAED,SAAO,SAAS,UAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B,IAA/B,EAAqC;AAC1C,QAAI,IAAI,KAAR,EAAe;AACb,YAAM,qBAAN;AACA;AACA;AACD;;AAED,QAAI,IAAJ,GAAW,IAAI,IAAJ,IAAY,EAAvB;;AAEA;AACA,QAAI,CAAC,OAAO,OAAP,CAAe,GAAf,CAAL,EAA0B;AACxB,YAAM,iBAAN;AACA;AACA;AACD;;AAED,UAAM,iBAAN,EAAyB,IAAI,OAAJ,CAAY,cAAZ;;AAEzB;AAFA,MAGA,IAAI,CAAC,YAAY,GAAZ,CAAL,EAAuB;AACrB,YAAM,cAAN;AACA;AACA;AACD;;AAED;AACA,QAAI,UAAU,WAAW,GAAX,KAAmB,cAAjC;;AAEA;AACA,SAAK,GAAL,EAAU,GAAV,EAAe,IAAf,EAAqB,KAArB,EAA4B,KAA5B,EAAmC;AACjC,gBAAU,OADuB;AAEjC,eAAS,OAFwB;AAGjC,aAAO,KAH0B;AAIjC,cAAQ;AAJyB,KAAnC;AAMD,GAnCD;AAoCD;;AAED;;;;;;;AAOA,SAAS,UAAT,CAAqB,GAArB,EAA0B;AACxB,MAAI;AACF,WAAO,YAAY,KAAZ,CAAkB,GAAlB,EAAuB,UAAvB,CAAkC,OAAlC,CAA0C,WAA1C,EAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,WAAO,SAAP;AACD;AACF;;AAED;;;;;;;AAOA,SAAS,WAAT,CAAsB,IAAtB,EAA4B;AAC1B,SAAO,SAAS,SAAT,CAAoB,GAApB,EAAyB;AAC9B,WAAO,QAAQ,OAAO,GAAP,EAAY,IAAZ,CAAR,CAAP;AACD,GAFD;AAGD","file":"text-compiled.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar bytes = require('bytes')\nvar contentType = require('content-type')\nvar debug = require('debug')('body-parser:text')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = text\n\n/**\n * Create a middleware to parse text bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction text (options) {\n  var opts = options || {}\n\n  var defaultCharset = opts.defaultCharset || 'utf-8'\n  var inflate = opts.inflate !== false\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var type = opts.type || 'text/plain'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (buf) {\n    return buf\n  }\n\n  return function textParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // get charset\n    var charset = getCharset(req) || defaultCharset\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the charset of a request.\n *\n * @param {object} req\n * @api private\n */\n\nfunction getCharset (req) {\n  try {\n    return contentType.parse(req).parameters.charset.toLowerCase()\n  } catch (e) {\n    return undefined\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n"]}