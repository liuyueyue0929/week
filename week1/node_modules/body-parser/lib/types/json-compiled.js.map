{"version":3,"sources":["json.js"],"names":[],"mappings":"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","file":"json-compiled.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar bytes = require('bytes')\nvar contentType = require('content-type')\nvar createError = require('http-errors')\nvar debug = require('debug')('body-parser:json')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = json\n\n/**\n * RegExp to match the first non-space in a string.\n *\n * Allowed whitespace is defined in RFC 7159:\n *\n *    ws = *(\n *            %x20 /              ; Space\n *            %x09 /              ; Horizontal tab\n *            %x0A /              ; Line feed or New line\n *            %x0D )              ; Carriage return\n */\n\nvar FIRST_CHAR_REGEXP = /^[\\x20\\x09\\x0a\\x0d]*(.)/ // eslint-disable-line no-control-regex\n\n/**\n * Create a middleware to parse JSON bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @public\n */\n\nfunction json (options) {\n  var opts = options || {}\n\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var inflate = opts.inflate !== false\n  var reviver = opts.reviver\n  var strict = opts.strict !== false\n  var type = opts.type || 'application/json'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (body) {\n    if (body.length === 0) {\n      // special-case empty json body, as it's a common client-side mistake\n      // TODO: maybe make this configurable or part of \"strict\" option\n      return {}\n    }\n\n    if (strict) {\n      var first = firstchar(body)\n\n      if (first !== '{' && first !== '[') {\n        debug('strict violation')\n        throw new SyntaxError('Unexpected token ' + first)\n      }\n    }\n\n    debug('parse json')\n    return JSON.parse(body, reviver)\n  }\n\n  return function jsonParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // assert charset per RFC 7159 sec 8.1\n    var charset = getCharset(req) || 'utf-8'\n    if (charset.substr(0, 4) !== 'utf-') {\n      debug('invalid charset')\n      next(createError(415, 'unsupported charset \"' + charset.toUpperCase() + '\"', {\n        charset: charset\n      }))\n      return\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the first non-whitespace character in a string.\n *\n * @param {string} str\n * @return {function}\n * @private\n */\n\nfunction firstchar (str) {\n  return FIRST_CHAR_REGEXP.exec(str)[1]\n}\n\n/**\n * Get the charset of a request.\n *\n * @param {object} req\n * @api private\n */\n\nfunction getCharset (req) {\n  try {\n    return contentType.parse(req).parameters.charset.toLowerCase()\n  } catch (e) {\n    return undefined\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n"]}