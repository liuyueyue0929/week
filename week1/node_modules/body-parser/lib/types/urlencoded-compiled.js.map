{"version":3,"sources":["urlencoded.js"],"names":[],"mappings":"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","file":"urlencoded-compiled.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar bytes = require('bytes')\nvar contentType = require('content-type')\nvar createError = require('http-errors')\nvar debug = require('debug')('body-parser:urlencoded')\nvar deprecate = require('depd')('body-parser')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = urlencoded\n\n/**\n * Cache of parser modules.\n */\n\nvar parsers = Object.create(null)\n\n/**\n * Create a middleware to parse urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @public\n */\n\nfunction urlencoded (options) {\n  var opts = options || {}\n\n  // notice because option default will flip in next major\n  if (opts.extended === undefined) {\n    deprecate('undefined extended: provide extended option')\n  }\n\n  var extended = opts.extended !== false\n  var inflate = opts.inflate !== false\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var type = opts.type || 'application/x-www-form-urlencoded'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate query parser\n  var queryparse = extended\n    ? extendedparser(opts)\n    : simpleparser(opts)\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (body) {\n    return body.length\n      ? queryparse(body)\n      : {}\n  }\n\n  return function urlencodedParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // assert charset\n    var charset = getCharset(req) || 'utf-8'\n    if (charset !== 'utf-8') {\n      debug('invalid charset')\n      next(createError(415, 'unsupported charset \"' + charset.toUpperCase() + '\"', {\n        charset: charset\n      }))\n      return\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      debug: debug,\n      encoding: charset,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the extended query parser.\n *\n * @param {object} options\n */\n\nfunction extendedparser (options) {\n  var parameterLimit = options.parameterLimit !== undefined\n    ? options.parameterLimit\n    : 1000\n  var parse = parser('qs')\n\n  if (isNaN(parameterLimit) || parameterLimit < 1) {\n    throw new TypeError('option parameterLimit must be a positive number')\n  }\n\n  if (isFinite(parameterLimit)) {\n    parameterLimit = parameterLimit | 0\n  }\n\n  return function queryparse (body) {\n    var paramCount = parameterCount(body, parameterLimit)\n\n    if (paramCount === undefined) {\n      debug('too many parameters')\n      throw createError(413, 'too many parameters')\n    }\n\n    var arrayLimit = Math.max(100, paramCount)\n\n    debug('parse extended urlencoding')\n    return parse(body, {\n      allowPrototypes: true,\n      arrayLimit: arrayLimit,\n      depth: Infinity,\n      parameterLimit: parameterLimit\n    })\n  }\n}\n\n/**\n * Get the charset of a request.\n *\n * @param {object} req\n * @api private\n */\n\nfunction getCharset (req) {\n  try {\n    return contentType.parse(req).parameters.charset.toLowerCase()\n  } catch (e) {\n    return undefined\n  }\n}\n\n/**\n * Count the number of parameters, stopping once limit reached\n *\n * @param {string} body\n * @param {number} limit\n * @api private\n */\n\nfunction parameterCount (body, limit) {\n  var count = 0\n  var index = 0\n\n  while ((index = body.indexOf('&', index)) !== -1) {\n    count++\n    index++\n\n    if (count === limit) {\n      return undefined\n    }\n  }\n\n  return count\n}\n\n/**\n * Get parser for module name dynamically.\n *\n * @param {string} name\n * @return {function}\n * @api private\n */\n\nfunction parser (name) {\n  var mod = parsers[name]\n\n  if (mod !== undefined) {\n    return mod.parse\n  }\n\n  // this uses a switch for static require analysis\n  switch (name) {\n    case 'qs':\n      mod = require('qs')\n      break\n    case 'querystring':\n      mod = require('querystring')\n      break\n  }\n\n  // store to prevent invoking require()\n  parsers[name] = mod\n\n  return mod.parse\n}\n\n/**\n * Get the simple query parser.\n *\n * @param {object} options\n */\n\nfunction simpleparser (options) {\n  var parameterLimit = options.parameterLimit !== undefined\n    ? options.parameterLimit\n    : 1000\n  var parse = parser('querystring')\n\n  if (isNaN(parameterLimit) || parameterLimit < 1) {\n    throw new TypeError('option parameterLimit must be a positive number')\n  }\n\n  if (isFinite(parameterLimit)) {\n    parameterLimit = parameterLimit | 0\n  }\n\n  return function queryparse (body) {\n    var paramCount = parameterCount(body, parameterLimit)\n\n    if (paramCount === undefined) {\n      debug('too many parameters')\n      throw createError(413, 'too many parameters')\n    }\n\n    debug('parse urlencoding')\n    return parse(body, undefined, undefined, {maxKeys: parameterLimit})\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n"]}