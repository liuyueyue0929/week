{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;;AAKA,IAAI,YAAY,QAAQ,MAAR,EAAgB;;AAEhC;;;;;AAFgB,CAAhB,CAOA,IAAI,UAAU,OAAO,MAAP,CAAc;;AAE5B;;;;;;;;;AASA;;;;;AAXc,CAAd,CAgBA,UAAU,OAAO,OAAP,GAAiB,UAAU,QAAV,CAAmB,UAAnB,EACzB;;AAEF;;;;;AAH2B,CAA3B,CAQA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC;AACrC,gBAAc,IADuB;AAErC,cAAY,IAFyB;AAGrC,OAAK,mBAAmB,MAAnB;AAHgC;;AAMvC;;;;;AANA,EAWA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,KAA/B,EAAsC;AACpC,gBAAc,IADsB;AAEpC,cAAY,IAFwB;AAGpC,OAAK,mBAAmB,KAAnB;AAH+B;;AAMtC;;;;;AANA,EAWA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,MAA/B,EAAuC;AACrC,gBAAc,IADuB;AAErC,cAAY,IAFyB;AAGrC,OAAK,mBAAmB,MAAnB;AAHgC;;AAMvC;;;;;AANA,EAWA,OAAO,cAAP,CAAsB,OAAtB,EAA+B,YAA/B,EAA6C;AAC3C,gBAAc,IAD6B;AAE3C,cAAY,IAF+B;AAG3C,OAAK,mBAAmB,YAAnB;AAHsC;;AAM7C;;;;;;;;;AANA,EAeA,SAAS,UAAT,CAAqB,OAArB,EAA8B;AAC5B,MAAI,OAAO,EAAX;;AAEA;AACA,MAAI,OAAJ,EAAa;AACX,SAAK,IAAI,IAAT,IAAiB,OAAjB,EAA0B;AACxB,UAAI,SAAS,MAAb,EAAqB;AACnB,aAAK,IAAL,IAAa,QAAQ,IAAR,CAAb;AACD;AACF;AACF;;AAED,MAAI,cAAc,QAAQ,UAAR,CAAmB,IAAnB,CAAlB;AACA,MAAI,QAAQ,QAAQ,IAAR,CAAa,IAAb,CAAZ;;AAEA,SAAO,SAAS,UAAT,CAAqB,GAArB,EAA0B,GAA1B,EAA+B,IAA/B,EAAqC;AAC1C,UAAM,GAAN,EAAW,GAAX,EAAgB,UAAU,GAAV,EAAe;AAC7B,UAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;AACT,kBAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB;AACD,KAHD;AAID,GALD;AAMD;;AAED;;;;;AAKA,SAAS,kBAAT,CAA6B,IAA7B,EAAmC;AACjC,SAAO,SAAS,GAAT,GAAgB;AACrB,WAAO,WAAW,IAAX,CAAP;AACD,GAFD;AAGD;;AAED;;;;;AAKA,SAAS,UAAT,CAAqB,UAArB,EAAiC;AAC/B,MAAI,SAAS,QAAQ,UAAR,CAAb;;AAEA,MAAI,WAAW,SAAf,EAA0B;AACxB,WAAO,MAAP;AACD;;AAED;AACA,UAAQ,UAAR;AACE,SAAK,MAAL;AACE,eAAS,QAAQ,kBAAR,CAAT;AACA;AACF,SAAK,KAAL;AACE,eAAS,QAAQ,iBAAR,CAAT;AACA;AACF,SAAK,MAAL;AACE,eAAS,QAAQ,kBAAR,CAAT;AACA;AACF,SAAK,YAAL;AACE,eAAS,QAAQ,wBAAR,CAAT;AACA;AAZJ;;AAeA;AACA,SAAQ,QAAQ,UAAR,IAAsB,MAA9B;AACD","file":"index-compiled.js","sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar deprecate = require('depd')('body-parser')\n\n/**\n * Cache of loaded parsers.\n * @private\n */\n\nvar parsers = Object.create(null)\n\n/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */\n\n/**\n * Module exports.\n * @type {Parsers}\n */\n\nexports = module.exports = deprecate.function(bodyParser,\n  'bodyParser: use individual json/urlencoded middlewares')\n\n/**\n * JSON parser.\n * @public\n */\n\nObject.defineProperty(exports, 'json', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('json')\n})\n\n/**\n * Raw parser.\n * @public\n */\n\nObject.defineProperty(exports, 'raw', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('raw')\n})\n\n/**\n * Text parser.\n * @public\n */\n\nObject.defineProperty(exports, 'text', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('text')\n})\n\n/**\n * URL-encoded parser.\n * @public\n */\n\nObject.defineProperty(exports, 'urlencoded', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('urlencoded')\n})\n\n/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */\n\nfunction bodyParser (options) {\n  var opts = {}\n\n  // exclude type option\n  if (options) {\n    for (var prop in options) {\n      if (prop !== 'type') {\n        opts[prop] = options[prop]\n      }\n    }\n  }\n\n  var _urlencoded = exports.urlencoded(opts)\n  var _json = exports.json(opts)\n\n  return function bodyParser (req, res, next) {\n    _json(req, res, function (err) {\n      if (err) return next(err)\n      _urlencoded(req, res, next)\n    })\n  }\n}\n\n/**\n * Create a getter for loading a parser.\n * @private\n */\n\nfunction createParserGetter (name) {\n  return function get () {\n    return loadParser(name)\n  }\n}\n\n/**\n * Load a parser module.\n * @private\n */\n\nfunction loadParser (parserName) {\n  var parser = parsers[parserName]\n\n  if (parser !== undefined) {\n    return parser\n  }\n\n  // this uses a switch for static require analysis\n  switch (parserName) {\n    case 'json':\n      parser = require('./lib/types/json')\n      break\n    case 'raw':\n      parser = require('./lib/types/raw')\n      break\n    case 'text':\n      parser = require('./lib/types/text')\n      break\n    case 'urlencoded':\n      parser = require('./lib/types/urlencoded')\n      break\n  }\n\n  // store to prevent invoking require()\n  return (parsers[parserName] = parser)\n}\n"]}