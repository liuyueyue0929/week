{"version":3,"sources":["bignumber-compiled.js"],"names":[],"mappings":"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","file":"bignumber-compiled-compiled.js","sourcesContent":["/*! bignumber.js v3.1.2 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n;(function (globalObj) {\n    'use strict';\n\n    /*\r\n      bignumber.js v3.1.2\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\n\n    var BigNumber,\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n        notBool = ' not a boolean or binary digit',\n        roundingMode = 'rounding mode',\n        tooManyDigits = 'number type has more than 15 significant digits',\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,\n        // 2^53 - 1\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n\n    /*\r\n     * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n     * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n     * exception is thrown (if ERRORS is true).\r\n     */\n    MAX = 1E9; // 0 to MAX_INT32\n\n\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\n    function constructorFactory(configObj) {\n        var div,\n            parseNumeric,\n\n\n        // id tracks the caller function, so its name can be included in error messages.\n        id = 0,\n            P = BigNumber.prototype,\n            ONE = new BigNumber(1),\n\n\n        /********************************* EDITABLE DEFAULTS **********************************/\n\n        /*\r\n         * The default values below must be integers within the inclusive ranges stated.\r\n         * The values can also be changed at run-time using BigNumber.config.\r\n         */\n\n        // The maximum number of decimal places for operations involving division.\n        DECIMAL_PLACES = 20,\n            // 0 to MAX\n\n        /*\r\n         * The rounding mode used when rounding to the above decimal places, and when using\r\n         * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n         * UP         0 Away from zero.\r\n         * DOWN       1 Towards zero.\r\n         * CEIL       2 Towards +Infinity.\r\n         * FLOOR      3 Towards -Infinity.\r\n         * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n         * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n         * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n         * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n         * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n         */\n        ROUNDING_MODE = 4,\n            // 0 to 8\n\n        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n        // The exponent value at and beneath which toString returns exponential notation.\n        // Number type: -7\n        TO_EXP_NEG = -7,\n            // 0 to -MAX\n\n        // The exponent value at and above which toString returns exponential notation.\n        // Number type: 21\n        TO_EXP_POS = 21,\n            // 0 to MAX\n\n        // RANGE : [MIN_EXP, MAX_EXP]\n\n        // The minimum exponent value, beneath which underflow to zero occurs.\n        // Number type: -324  (5e-324)\n        MIN_EXP = -1e7,\n            // -1 to -MAX\n\n        // The maximum exponent value, above which overflow to Infinity occurs.\n        // Number type:  308  (1.7976931348623157e+308)\n        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n        MAX_EXP = 1e7,\n            // 1 to MAX\n\n        // Whether BigNumber Errors are ever thrown.\n        ERRORS = true,\n            // true or false\n\n        // Change to intValidatorNoErrors if ERRORS is false.\n        isValidInt = intValidatorWithErrors,\n            // intValidatorWithErrors/intValidatorNoErrors\n\n        // Whether to use cryptographically-secure random number generation, if available.\n        CRYPTO = false,\n            // true or false\n\n        /*\r\n         * The modulo mode used when calculating the modulus: a mod n.\r\n         * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n         * The remainder (r) is calculated as: r = a - n * q.\r\n         *\r\n         * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n         * DOWN      1 The remainder has the same sign as the dividend.\r\n         *             This modulo mode is commonly known as 'truncated division' and is\r\n         *             equivalent to (a % n) in JavaScript.\r\n         * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n         * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n         * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n         *             The remainder is always positive.\r\n         *\r\n         * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n         * modes are commonly used for the modulus operation.\r\n         * Although the other rounding modes can also be used, they may not give useful results.\r\n         */\n        MODULO_MODE = 1,\n            // 0 to 9\n\n        // The maximum number of significant digits of the result of the toPower operation.\n        // If POW_PRECISION is 0, there will be unlimited significant digits.\n        POW_PRECISION = 0,\n            // 0 to MAX\n\n        // The format specification used by the BigNumber.prototype.toFormat method.\n        FORMAT = {\n            decimalSeparator: '.',\n            groupSeparator: ',',\n            groupSize: 3,\n            secondaryGroupSize: 0,\n            fractionGroupSeparator: '\\xA0', // non-breaking space\n            fractionGroupSize: 0\n        };\n\n        /******************************************************************************************/\n\n        // CONSTRUCTOR\n\n\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\n        function BigNumber(n, b) {\n            var c,\n                e,\n                i,\n                num,\n                len,\n                str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if (!(x instanceof BigNumber)) {\n\n                // 'BigNumber() constructor call without new: {n}'\n                if (ERRORS) raise(26, 'constructor call without new', n);\n                return new BigNumber(n, b);\n            }\n\n            // 'new BigNumber() base not an integer: {b}'\n            // 'new BigNumber() base out of range: {b}'\n            if (b == null || !isValidInt(b, 2, 64, id, 'base')) {\n\n                // Duplicate.\n                if (n instanceof BigNumber) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = (n = n.c) ? n.slice() : n;\n                    id = 0;\n                    return;\n                }\n\n                if ((num = typeof n == 'number') && n * 0 == 0) {\n                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n                    // Fast path for integers.\n                    if (n === ~~n) {\n                        for (e = 0, i = n; i >= 10; i /= 10, e++);\n                        x.e = e;\n                        x.c = [n];\n                        id = 0;\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n                }\n            } else {\n                b = b | 0;\n                str = n + '';\n\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n                // Allow exponential notation to be used with base 10 argument.\n                if (b == 10) {\n                    x = new BigNumber(n instanceof BigNumber ? n : str);\n                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n                }\n\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                // Any number in exponential form will fail due to the [Ee][+-].\n                if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {\n                    return parseNumeric(x, str, num, b);\n                }\n\n                if (num) {\n                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n                    if (ERRORS && str.replace(/^0\\.0*|\\./, '').length > 15) {\n\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                        raise(id, tooManyDigits, n);\n                    }\n\n                    // Prevent later check for length on converted number.\n                    num = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n                }\n\n                str = convertBase(str, 10, b, x.s);\n            }\n\n            // Decimal point?\n            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n            // Exponential form?\n            if ((i = str.search(/e/i)) > 0) {\n\n                // Determine exponent.\n                if (e < 0) e = i;\n                e += +str.slice(i + 1);\n                str = str.substring(0, i);\n            } else if (e < 0) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for (i = 0; str.charCodeAt(i) === 48; i++);\n\n            // Determine trailing zeros.\n            for (len = str.length; str.charCodeAt(--len) === 48;);\n            str = str.slice(i, len + 1);\n\n            if (str) {\n                len = str.length;\n\n                // Disallow numbers with over 15 significant digits if number type.\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\n                if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n                    raise(id, tooManyDigits, x.s * n);\n                }\n\n                e = e - i - 1;\n\n                // Overflow?\n                if (e > MAX_EXP) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                    // Underflow?\n                } else if (e < MIN_EXP) {\n\n                    // Zero.\n                    x.c = [x.e = 0];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = (e + 1) % LOG_BASE;\n                    if (e < 0) i += LOG_BASE;\n\n                    if (i < len) {\n                        if (i) x.c.push(+str.slice(0, i));\n\n                        for (len -= LOG_BASE; i < len;) {\n                            x.c.push(+str.slice(i, i += LOG_BASE));\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for (; i--; str += '0');\n                    x.c.push(+str);\n                }\n            } else {\n\n                // Zero.\n                x.c = [x.e = 0];\n            }\n\n            id = 0;\n        }\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.another = constructorFactory;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\n        BigNumber.config = BigNumber.set = function () {\n            var v,\n                p,\n                i = 0,\n                r = {},\n                a = arguments,\n                o = a[0],\n                has = o && typeof o == 'object' ? function () {\n                if (o.hasOwnProperty(p)) return (v = o[p]) != null;\n            } : function () {\n                if (a.length > i) return (v = a[i++]) != null;\n            };\n\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n            // 'config() DECIMAL_PLACES not an integer: {v}'\n            // 'config() DECIMAL_PLACES out of range: {v}'\n            if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {\n                DECIMAL_PLACES = v | 0;\n            }\n            r[p] = DECIMAL_PLACES;\n\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n            // 'config() ROUNDING_MODE not an integer: {v}'\n            // 'config() ROUNDING_MODE out of range: {v}'\n            if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {\n                ROUNDING_MODE = v | 0;\n            }\n            r[p] = ROUNDING_MODE;\n\n            // EXPONENTIAL_AT {number|number[]}\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\n            // 'config() EXPONENTIAL_AT out of range: {v}'\n            if (has(p = 'EXPONENTIAL_AT')) {\n\n                if (isArray(v)) {\n                    if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {\n                        TO_EXP_NEG = v[0] | 0;\n                        TO_EXP_POS = v[1] | 0;\n                    }\n                } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n                    TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);\n                }\n            }\n            r[p] = [TO_EXP_NEG, TO_EXP_POS];\n\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n            // 'config() RANGE not an integer: {v}'\n            // 'config() RANGE cannot be zero: {v}'\n            // 'config() RANGE out of range: {v}'\n            if (has(p = 'RANGE')) {\n\n                if (isArray(v)) {\n                    if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {\n                        MIN_EXP = v[0] | 0;\n                        MAX_EXP = v[1] | 0;\n                    }\n                } else if (isValidInt(v, -MAX, MAX, 2, p)) {\n                    if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);\n                }\n            }\n            r[p] = [MIN_EXP, MAX_EXP];\n\n            // ERRORS {boolean|number} true, false, 1 or 0.\n            // 'config() ERRORS not a boolean or binary digit: {v}'\n            if (has(p = 'ERRORS')) {\n\n                if (v === !!v || v === 1 || v === 0) {\n                    id = 0;\n                    isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;\n                } else if (ERRORS) {\n                    raise(2, p + notBool, v);\n                }\n            }\n            r[p] = ERRORS;\n\n            // CRYPTO {boolean|number} true, false, 1 or 0.\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\n            // 'config() crypto unavailable: {crypto}'\n            if (has(p = 'CRYPTO')) {\n\n                if (v === true || v === false || v === 1 || v === 0) {\n                    if (v) {\n                        v = typeof crypto == 'undefined';\n                        if (!v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                            CRYPTO = true;\n                        } else if (ERRORS) {\n                            raise(2, 'crypto unavailable', v ? void 0 : crypto);\n                        } else {\n                            CRYPTO = false;\n                        }\n                    } else {\n                        CRYPTO = false;\n                    }\n                } else if (ERRORS) {\n                    raise(2, p + notBool, v);\n                }\n            }\n            r[p] = CRYPTO;\n\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n            // 'config() MODULO_MODE not an integer: {v}'\n            // 'config() MODULO_MODE out of range: {v}'\n            if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {\n                MODULO_MODE = v | 0;\n            }\n            r[p] = MODULO_MODE;\n\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n            // 'config() POW_PRECISION not an integer: {v}'\n            // 'config() POW_PRECISION out of range: {v}'\n            if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {\n                POW_PRECISION = v | 0;\n            }\n            r[p] = POW_PRECISION;\n\n            // FORMAT {object}\n            // 'config() FORMAT not an object: {v}'\n            if (has(p = 'FORMAT')) {\n\n                if (typeof v == 'object') {\n                    FORMAT = v;\n                } else if (ERRORS) {\n                    raise(2, p + ' not an object', v);\n                }\n            }\n            r[p] = FORMAT;\n\n            return r;\n        };\n\n        /*\r\n         * Return true if value v is a BigNumber instance, otherwise return false.\r\n         *\r\n         * v {any} A value that may or may not be a BigNumber instance.\r\n         */\n        BigNumber.isBigNumber = isBigNumber;\n\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\n        BigNumber.max = function () {\n            return maxOrMin(arguments, P.lt);\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\n        BigNumber.min = function () {\n            return maxOrMin(arguments, P.gt);\n        };\n\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\n        BigNumber.random = function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n                return mathfloor(Math.random() * pow2_53);\n            } : function () {\n                return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n            };\n\n            return function (dp) {\n                var a,\n                    b,\n                    e,\n                    k,\n                    v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;\n                k = mathceil(dp / LOG_BASE);\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if (crypto.getRandomValues) {\n\n                        a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n                        for (; i < k;) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if (v >= 9e15) {\n                                b = crypto.getRandomValues(new Uint32Array(2));\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                        // Node.js supporting crypto.randomBytes.\n                    } else if (crypto.randomBytes) {\n\n                        // buffer\n                        a = crypto.randomBytes(k *= 7);\n\n                        for (; i < k;) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                            if (v >= 9e15) {\n                                crypto.randomBytes(7).copy(a, i);\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else {\n                        CRYPTO = false;\n                        if (ERRORS) raise(14, 'crypto unavailable', crypto);\n                    }\n                }\n\n                // Use Math.random.\n                if (!CRYPTO) {\n\n                    for (; i < k;) {\n                        v = random53bitInt();\n                        if (v < 9e15) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if (k && dp) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor(k / v) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for (; c[i] === 0; c.pop(), i--);\n\n                // Zero?\n                if (i < 0) {\n                    c = [e = 0];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for (e = -1; c[0] === 0; c.shift(), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if (i < LOG_BASE) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        }();\n\n        // PRIVATE FUNCTIONS\n\n\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\n        function convertBase(str, baseOut, baseIn, sign) {\n            var d,\n                e,\n                k,\n                r,\n                x,\n                xc,\n                y,\n                i = str.indexOf('.'),\n                dp = DECIMAL_PLACES,\n                rm = ROUNDING_MODE;\n\n            if (baseIn < 37) str = str.toLowerCase();\n\n            // Non-integer.\n            if (i >= 0) {\n                k = POW_PRECISION;\n\n                // Unlimited precision.\n                POW_PRECISION = 0;\n                str = str.replace('.', '');\n                y = new BigNumber(baseIn);\n                x = y.pow(str.length - i);\n                POW_PRECISION = k;\n\n                // Convert str as if an integer, then restore the fraction part by dividing the\n                // result by its base raised to a power.\n                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);\n                y.e = y.c.length;\n            }\n\n            // Convert the number as integer.\n            xc = toBaseOut(str, baseIn, baseOut);\n            e = k = xc.length;\n\n            // Remove trailing zeros.\n            for (; xc[--k] == 0; xc.pop());\n            if (!xc[0]) return '0';\n\n            if (i < 0) {\n                --e;\n            } else {\n                x.c = xc;\n                x.e = e;\n\n                // sign is needed for correct rounding.\n                x.s = sign;\n                x = div(x, y, dp, rm, baseOut);\n                xc = x.c;\n                r = x.r;\n                e = x.e;\n            }\n\n            d = e + dp + 1;\n\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\n            i = xc[d];\n            k = baseOut / 2;\n            r = r || d < 0 || xc[d + 1] != null;\n\n            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n\n            if (d < 1 || !xc[0]) {\n\n                // 1^-dp or 0.\n                str = r ? toFixedPoint('1', -dp) : '0';\n            } else {\n                xc.length = d;\n\n                if (r) {\n\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\n                    for (--baseOut; ++xc[--d] > baseOut;) {\n                        xc[d] = 0;\n\n                        if (!d) {\n                            ++e;\n                            xc.unshift(1);\n                        }\n                    }\n                }\n\n                // Determine trailing zeros.\n                for (k = xc.length; !xc[--k];);\n\n                // E.g. [4, 11, 15] becomes 4bf.\n                for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));\n                str = toFixedPoint(str, e);\n            }\n\n            // The caller will add the sign.\n            return str;\n        }\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = function () {\n\n            // Assume non-zero x and k.\n            function multiply(x, k, base) {\n                var m,\n                    temp,\n                    xlo,\n                    xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for (x = x.slice(); i--;) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x.unshift(carry);\n\n                return x;\n            }\n\n            function compare(a, b, aL, bL) {\n                var i, cmp;\n\n                if (aL != bL) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for (i = cmp = 0; i < aL; i++) {\n\n                        if (a[i] != b[i]) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n                return cmp;\n            }\n\n            function subtract(a, b, aL, base) {\n                var i = 0;\n\n                // Subtract b from a.\n                for (; aL--;) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for (; !a[0] && a.length > 1; a.shift());\n            }\n\n            // x: dividend, y: divisor.\n            return function (x, y, dp, rm, base) {\n                var cmp,\n                    e,\n                    i,\n                    more,\n                    n,\n                    prod,\n                    prodL,\n                    q,\n                    qc,\n                    rem,\n                    remL,\n                    rem0,\n                    xi,\n                    xL,\n                    yc0,\n                    yL,\n                    yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if (!xc || !xc[0] || !yc || !yc[0]) {\n\n                    return new BigNumber(\n\n                    // Return NaN if either NaN, or both Infinity or 0.\n                    !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n                    // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                    xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if (!base) {\n                    base = BASE;\n                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for (i = 0; yc[i] == (xc[i] || 0); i++);\n                if (yc[i] > (xc[i] || 0)) e--;\n\n                if (s < 0) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor(base / (yc[0] + 1));\n\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\n                    if (n > 1) {\n                        yc = multiply(yc, n, base);\n                        xc = multiply(xc, n, base);\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice(0, yL);\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for (; remL < yL; rem[remL++] = 0);\n                    yz = yc.slice();\n                    yz.unshift(0);\n                    yc0 = yc[0];\n                    if (yc[1] >= base / 2) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare(yc, rem, yL, remL);\n\n                        // If divisor < remainder.\n                        if (cmp < 0) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor(rem0 / yc0);\n\n                            //  Algorithm:\n                            //  1. product = divisor * trial digit (n)\n                            //  2. if product > remainder: product -= divisor, n--\n                            //  3. remainder -= product\n                            //  4. if product was < remainder at 2:\n                            //    5. compare new remainder and divisor\n                            //    6. If remainder > divisor: remainder -= divisor, n++\n\n                            if (n > 1) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply(yc, n, base);\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder.\n                                // Trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while (compare(prod, rem, prodL, remL) == 1) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if (n == 0) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if (prodL < remL) prod.unshift(0);\n\n                            // Subtract product from remainder.\n                            subtract(rem, prod, remL, base);\n                            remL = rem.length;\n\n                            // If product was < remainder.\n                            if (cmp == -1) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while (compare(yc, rem, yL, remL) < 1) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if (cmp === 0) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if (rem[0]) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [xc[xi]];\n                            remL = 1;\n                        }\n                    } while ((xi++ < xL || rem[0] != null) && s--);\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if (!qc[0]) qc.shift();\n                }\n\n                if (base == BASE) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n                    // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        }();\n\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\n        function format(n, i, rm, caller) {\n            var c0, e, ne, len, str;\n\n            rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;\n\n            if (!n.c) return n.toString();\n            c0 = n.c[0];\n            ne = n.e;\n\n            if (i == null) {\n                str = coeffToString(n.c);\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);\n            } else {\n                n = round(new BigNumber(n), i, rm);\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString(n.c);\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {\n\n                    // Append zeros?\n                    for (; len < i; str += '0', len++);\n                    str = toExponential(str, e);\n\n                    // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint(str, e);\n\n                    // Append zeros?\n                    if (e + 1 > len) {\n                        if (--i > 0) for (str += '.'; i--; str += '0');\n                    } else {\n                        i += e - len;\n                        if (i > 0) {\n                            if (e + 1 == len) str += '.';\n                            for (; i--; str += '0');\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin(args, method) {\n            var m,\n                n,\n                i = 0;\n\n            if (isArray(args[0])) args = args[0];\n            m = new BigNumber(args[0]);\n\n            for (; ++i < args.length;) {\n                n = new BigNumber(args[i]);\n\n                // If any number is NaN, return NaN.\n                if (!n.s) {\n                    m = n;\n                    break;\n                } else if (method.call(m, n)) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\n        function intValidatorWithErrors(n, min, max, caller, name) {\n            if (n < min || n > max || n != truncate(n)) {\n                raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);\n            }\n\n            return true;\n        }\n\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\n        function normalise(n, c, e) {\n            var i = 1,\n                j = c.length;\n\n            // Remove trailing zeros.\n            for (; !c[--j]; c.pop());\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for (j = c[0]; j >= 10; j /= 10, i++);\n\n            // Overflow?\n            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n                // Underflow?\n            } else if (e < MIN_EXP) {\n\n                // Zero.\n                n.c = [n.e = 0];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = function () {\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n            return function (x, str, num, b) {\n                var base,\n                    s = num ? str : str.replace(whitespaceOrPlus, '');\n\n                // No exception on ±Infinity or NaN.\n                if (isInfinityOrNaN.test(s)) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                } else {\n                    if (!num) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace(basePrefix, function (m, p1, p2) {\n                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n                        }\n\n                        if (str != s) return new BigNumber(s, base);\n                    }\n\n                    // 'new BigNumber() not a number: {n}'\n                    // 'new BigNumber() not a base {b} number: {n}'\n                    if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);\n                    x.s = null;\n                }\n\n                x.c = x.e = null;\n                id = 0;\n            };\n        }();\n\n        // Throw a BigNumber Error.\n        function raise(caller, msg, val) {\n            var error = new Error(['new BigNumber', // 0\n            'cmp', // 1\n            'config', // 2\n            'div', // 3\n            'divToInt', // 4\n            'eq', // 5\n            'gt', // 6\n            'gte', // 7\n            'lt', // 8\n            'lte', // 9\n            'minus', // 10\n            'mod', // 11\n            'plus', // 12\n            'precision', // 13\n            'random', // 14\n            'round', // 15\n            'shift', // 16\n            'times', // 17\n            'toDigits', // 18\n            'toExponential', // 19\n            'toFixed', // 20\n            'toFormat', // 21\n            'toFraction', // 22\n            'pow', // 23\n            'toPrecision', // 24\n            'toString', // 25\n            'BigNumber' // 26\n            ][caller] + '() ' + msg + ': ' + val);\n\n            error.name = 'BigNumber Error';\n            id = 0;\n            throw error;\n        }\n\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\n        function round(x, sd, rm, r) {\n            var d,\n                i,\n                j,\n                k,\n                n,\n                ni,\n                rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if (i < 0) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ni = 0];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[d - j - 1] % 10 | 0;\n                    } else {\n                        ni = mathceil((i + 1) / LOG_BASE);\n\n                        if (ni >= xc.length) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for (; xc.length <= ni; xc.push(0));\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for (d = 1; k >= 10; k /= 10, d++);\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                    // Are there any non-zero digits after the rounding digit?\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n                    // Check whether the digit to the left of the rounding digit is odd.\n                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n                    if (sd < 1 || !xc[0]) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if (i == 0) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[LOG_BASE - i];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for (;;) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if (ni == 0) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                                j = xc[0] += k;\n                                for (k = 1; j >= 10; j /= 10, k++);\n\n                                // if i != k the length has increased.\n                                if (i != k) {\n                                    x.e++;\n                                    if (xc[0] == BASE) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if (xc[ni] != BASE) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for (i = xc.length; xc[--i] === 0; xc.pop());\n                }\n\n                // Overflow? Infinity.\n                if (x.e > MAX_EXP) {\n                    x.c = x.e = null;\n\n                    // Underflow? Zero.\n                } else if (x.e < MIN_EXP) {\n                    x.c = [x.e = 0];\n                }\n            }\n\n            return x;\n        }\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if (x.s < 0) x.s = 1;\n            return x;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\n        P.ceil = function () {\n            return round(new BigNumber(this), this.e + 1, 2);\n        };\n\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\n        P.comparedTo = P.cmp = function (y, b) {\n            id = 1;\n            return compare(this, new BigNumber(y, b));\n        };\n\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\n        P.decimalPlaces = P.dp = function () {\n            var n,\n                v,\n                c = this.c;\n\n            if (!c) return null;\n            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n            if (n < 0) n = 0;\n\n            return n;\n        };\n\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\n        P.dividedBy = P.div = function (y, b) {\n            id = 3;\n            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\n        P.dividedToIntegerBy = P.divToInt = function (y, b) {\n            id = 4;\n            return div(this, new BigNumber(y, b), 0, 1);\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\n        P.equals = P.eq = function (y, b) {\n            id = 5;\n            return compare(this, new BigNumber(y, b)) === 0;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\n        P.floor = function () {\n            return round(new BigNumber(this), this.e + 1, 3);\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\n        P.greaterThan = P.gt = function (y, b) {\n            id = 6;\n            return compare(this, new BigNumber(y, b)) > 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\n        P.greaterThanOrEqualTo = P.gte = function (y, b) {\n            id = 7;\n            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\n        P.isInteger = P.isInt = function () {\n            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\n        P.isNegative = P.isNeg = function () {\n            return this.s < 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\n        P.lessThan = P.lt = function (y, b) {\n            id = 8;\n            return compare(this, new BigNumber(y, b)) < 0;\n        };\n\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\n        P.lessThanOrEqualTo = P.lte = function (y, b) {\n            id = 9;\n            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n        };\n\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\n        P.minus = P.sub = function (y, b) {\n            var i,\n                j,\n                t,\n                xLTy,\n                x = this,\n                a = x.s;\n\n            id = 10;\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Either Infinity?\n                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n                // Either zero?\n                if (!xc[0] || !yc[0]) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                    ROUNDING_MODE == 3 ? -0 : 0);\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if (a = xe - ye) {\n\n                if (xLTy = a < 0) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for (b = a; b--; t.push(0));\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n                for (a = b = 0; b < j; b++) {\n\n                    if (xc[b] != yc[b]) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = (j = yc.length) - (i = xc.length);\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if (b > 0) for (; b--; xc[i++] = 0);\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for (; j > a;) {\n\n                if (xc[--j] < yc[j]) {\n                    for (i = j; i && !xc[--i]; xc[i] = b);\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for (; xc[0] == 0; xc.shift(), --ye);\n\n            // Zero?\n            if (!xc[0]) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [y.e = 0];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise(y, xc, ye);\n        };\n\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\n        P.modulo = P.mod = function (y, b) {\n            var q,\n                s,\n                x = this;\n\n            id = 11;\n            y = new BigNumber(y, b);\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if (!x.c || !y.s || y.c && !y.c[0]) {\n                return new BigNumber(NaN);\n\n                // Return x if y is Infinity or x is zero.\n            } else if (!y.c || x.c && !x.c[0]) {\n                return new BigNumber(x);\n            }\n\n            if (MODULO_MODE == 9) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div(x, y, 0, 3);\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div(x, y, 0, MODULO_MODE);\n            }\n\n            return x.minus(q.times(y));\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\n        P.negated = P.neg = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\n        P.plus = P.add = function (y, b) {\n            var t,\n                x = this,\n                a = x.s;\n\n            id = 12;\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Return ±Infinity if either ±Infinity.\n                if (!xc || !yc) return new BigNumber(a / 0);\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if (a = xe - ye) {\n                if (a > 0) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for (; a--; t.push(0));\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for (a = 0; b;) {\n                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n            }\n\n            if (a) {\n                xc.unshift(a);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise(y, xc, ye);\n        };\n\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\n        P.precision = P.sd = function (z) {\n            var n,\n                v,\n                x = this,\n                c = x.c;\n\n            // 'precision() argument not a boolean or binary digit: {z}'\n            if (z != null && z !== !!z && z !== 1 && z !== 0) {\n                if (ERRORS) raise(13, 'argument' + notBool, z);\n                if (z != !!z) z = null;\n            }\n\n            if (!c) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if (v = c[v]) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for (; v % 10 == 0; v /= 10, n--);\n\n                // Add the number of digits of the first element.\n                for (v = c[0]; v >= 10; v /= 10, n++);\n            }\n\n            if (z && x.e + 1 > n) n = x.e + 1;\n\n            return n;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\n        P.round = function (dp, rm) {\n            var n = new BigNumber(this);\n\n            if (dp == null || isValidInt(dp, 0, MAX, 15)) {\n                round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);\n            }\n\n            return n;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\n        P.shift = function (k) {\n            var n = this;\n            return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument'\n\n            // k < 1e+21, or truncate(k) will produce exponential notation.\n            ) ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);\n        };\n\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m,\n                n,\n                r,\n                rep,\n                t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if (s !== 1 || !c || !c[0]) {\n                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n            }\n\n            // Initial estimate.\n            s = Math.sqrt(+x);\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if (s == 0 || s == 1 / 0) {\n                n = coeffToString(c);\n                if ((n.length + e) % 2 == 0) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n                if (s == 1 / 0) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice(0, n.indexOf('e') + 1) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber(s + '');\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if (r.c[0]) {\n                e = r.e;\n                s = e + dp;\n                if (s < 3) s = 0;\n\n                // Newton-Raphson iteration.\n                for (;;) {\n                    t = r;\n                    r = half.times(t.plus(div(x, t, dp, 1)));\n\n                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if (r.e < e) --s;\n                        n = n.slice(s - 3, s + 1);\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if (n == '9999' || !rep && n == '4999') {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if (!rep) {\n                                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                                if (t.times(t).eq(x)) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                                // Truncate to the first rounding digit.\n                                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n        };\n\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\n        P.times = P.mul = function (y, b) {\n            var c,\n                e,\n                i,\n                j,\n                k,\n                m,\n                xcL,\n                xlo,\n                xhi,\n                ycL,\n                ylo,\n                yhi,\n                zc,\n                base,\n                sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = (id = 17, y = new BigNumber(y, b)).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if (!xc || !yc || !xc[0] || !yc[0]) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if (!xc || !yc) {\n                        y.c = y.e = null;\n\n                        // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for (i = ycL; --i >= 0;) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for (k = xcL, j = i + k; j > i;) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.shift();\n            }\n\n            return normalise(y, zc, e);\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\n        P.toDigits = function (sd, rm) {\n            var n = new BigNumber(this);\n            sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;\n            rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;\n            return sd ? round(n, sd, rm) : n;\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\n        P.toExponential = function (dp, rm) {\n            return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\n        P.toFixed = function (dp, rm) {\n            return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\n        P.toFormat = function (dp, rm) {\n            var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);\n\n            if (this.c) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if (g1 > 0 && len > 0) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr(0, i);\n\n                    for (; i < len; i += g1) {\n                        intPart += groupSeparator + intDigits.substr(i, g1);\n                    }\n\n                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;\n            }\n\n            return str;\n        };\n\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\n        P.toFraction = function (md) {\n            var arr,\n                d0,\n                d2,\n                e,\n                exp,\n                n,\n                n0,\n                q,\n                s,\n                k = ERRORS,\n                x = this,\n                xc = x.c,\n                d = new BigNumber(ONE),\n                n1 = d0 = new BigNumber(ONE),\n                d1 = n0 = new BigNumber(ONE);\n\n            if (md != null) {\n                ERRORS = false;\n                n = new BigNumber(md);\n                ERRORS = k;\n\n                if (!(k = n.isInt()) || n.lt(ONE)) {\n\n                    if (ERRORS) {\n                        raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);\n                    }\n\n                    // ERRORS is false:\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\n                    md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;\n                }\n            }\n\n            if (!xc) return x.toString();\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n            md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for (;;) {\n                q = div(n, d, 0, 1);\n                d2 = d0.plus(q.times(d1));\n                if (d2.cmp(md) == 1) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus(q.times(d2 = n1));\n                n0 = d2;\n                d = n.minus(q.times(d2 = d));\n                n = d2;\n            }\n\n            d2 = div(md.minus(d0), d1, 0, 1);\n            n0 = n0.plus(d2.times(n1));\n            d0 = d0.plus(d2.times(d1));\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\n        P.toNumber = function () {\n            return +this;\n        };\n\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If m is present, return the result modulo m.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n         * ROUNDING_MODE.\r\n         *\r\n         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n         *\r\n         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         * [m] {number|string|BigNumber} The modulus.\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         *\r\n         * Performs 54 loop iterations for n of 9007199254740991.\r\n         */\n        P.toPower = P.pow = function (n, m) {\n            var k,\n                y,\n                z,\n                i = mathfloor(n < 0 ? -n : +n),\n                x = this;\n\n            if (m != null) {\n                id = 23;\n                m = new BigNumber(m);\n            }\n\n            // Pass ±Infinity to Math.pow if exponent is out of range.\n            if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN)) || n == 0) {\n                k = Math.pow(+x, n);\n                return new BigNumber(m ? k % m : k);\n            }\n\n            if (m) {\n                if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) {\n                    x = x.mod(m);\n                } else {\n                    z = m;\n\n                    // Nullify m so only a single mod operation is performed at the end.\n                    m = null;\n                }\n            } else if (POW_PRECISION) {\n\n                // Truncating each coefficient array to a length of k after each multiplication\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\n                // i.e. there will be a minimum of 28 guard digits retained.\n                // (Using + 1.5 would give [9, 21] guard digits.)\n                k = mathceil(POW_PRECISION / LOG_BASE + 2);\n            }\n\n            y = new BigNumber(ONE);\n\n            for (;;) {\n                if (i % 2) {\n                    y = y.times(x);\n                    if (!y.c) break;\n                    if (k) {\n                        if (y.c.length > k) y.c.length = k;\n                    } else if (m) {\n                        y = y.mod(m);\n                    }\n                }\n\n                i = mathfloor(i / 2);\n                if (!i) break;\n                x = x.times(x);\n                if (k) {\n                    if (x.c && x.c.length > k) x.c.length = k;\n                } else if (m) {\n                    x = x.mod(m);\n                }\n            }\n\n            if (m) return y;\n            if (n < 0) y = ONE.div(y);\n\n            return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\n        P.toPrecision = function (sd, rm) {\n            return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);\n        };\n\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if (e === null) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if (s < 0) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString(n.c);\n\n                if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n                } else {\n                    str = convertBase(toFixedPoint(str, e), b | 0, 10, s);\n                }\n\n                if (s < 0 && n.c[0]) str = '-' + str;\n            }\n\n            return str;\n        };\n\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\n        P.truncated = P.trunc = function () {\n            return round(new BigNumber(this), this.e + 1, 1);\n        };\n\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\n        P.valueOf = P.toJSON = function () {\n            var str,\n                n = this,\n                e = n.e;\n\n            if (e === null) return n.toString();\n\n            str = coeffToString(n.c);\n\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);\n\n            return n.s < 0 ? '-' + str : str;\n        };\n\n        if (configObj != null) BigNumber.config(configObj);\n\n        return BigNumber;\n    }\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s,\n            z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for (; i < j;) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for (; z--; s = '0' + s);\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for (j = r.length; r.charCodeAt(--j) === 48;);\n        return r.slice(0, j + 1 || 1);\n    }\n\n    // Compare the value of BigNumbers x and y.\n    function compare(x, y) {\n        var a,\n            b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if (!i || !j) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if (a || b) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if (i != j) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if (!b) return k > l ^ a ? 1 : -1;\n\n        j = (k = xc.length) < (l = yc.length) ? k : l;\n\n        // Compare digit by digit.\n        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\n    function intValidatorNoErrors(n, min, max) {\n        return (n = truncate(n)) >= min && n <= max;\n    }\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n    function isBigNumber(v) {\n        return !!(v && v.constructor && v.constructor.isBigNumber === isBigNumber);\n    }\n\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\n    function toBaseOut(str, baseIn, baseOut) {\n        var j,\n            arr = [0],\n            arrL,\n            i = 0,\n            len = str.length;\n\n        for (; i < len;) {\n            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n            arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));\n\n            for (; j < arr.length; j++) {\n\n                if (arr[j] > baseOut - 1) {\n                    if (arr[j + 1] == null) arr[j + 1] = 0;\n                    arr[j + 1] += arr[j] / baseOut | 0;\n                    arr[j] %= baseOut;\n                }\n            }\n        }\n\n        return arr.reverse();\n    }\n\n    function toExponential(str, e) {\n        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n    }\n\n    function toFixedPoint(str, e) {\n        var len, z;\n\n        // Negative exponent?\n        if (e < 0) {\n\n            // Prepend zeros.\n            for (z = '0.'; ++e; z += '0');\n            str = z + str;\n\n            // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if (++e > len) {\n                for (z = '0', e -= len; --e; z += '0');\n                str += z;\n            } else if (e < len) {\n                str = str.slice(0, e) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n    function truncate(n) {\n        n = parseFloat(n);\n        return n < 0 ? mathceil(n) : mathfloor(n);\n    }\n\n    // EXPORT\n\n\n    BigNumber = constructorFactory();\n    BigNumber.default = BigNumber.BigNumber = BigNumber;\n\n    // AMD.\n    if (typeof define == 'function' && define.amd) {\n        define(function () {\n            return BigNumber;\n        });\n\n        // Node.js and other environments that support module.exports.\n    } else if (typeof module != 'undefined' && module.exports) {\n        module.exports = BigNumber;\n\n        // Browser.\n    } else {\n        if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();\n        globalObj.BigNumber = BigNumber;\n    }\n})(this);\n\n//# sourceMappingURL=bignumber-compiled.js.map"]}