{"version":3,"sources":["PoolConnection-compiled.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,QAAQ,MAAR,EAAgB,QAA/B;AACA,IAAI,aAAa,QAAQ,cAAR,CAAjB;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA,OAAO,OAAP,GAAiB,cAAjB;AACA,SAAS,cAAT,EAAyB,UAAzB;;AAEA,SAAS,cAAT,CAAwB,IAAxB,EAA8B,OAA9B,EAAuC;AACrC,aAAW,IAAX,CAAgB,IAAhB,EAAsB,OAAtB;AACA,OAAK,KAAL,GAAa,IAAb;;AAEA;AACA,MAAI,OAAO,YAAX,EAAyB;AACvB,SAAK,MAAL,GAAc,KAAK,MAAnB;AACD;;AAED;AACA;AACA;AACA,OAAK,EAAL,CAAQ,KAAR,EAAe,KAAK,eAApB;AACA,OAAK,EAAL,CAAQ,OAAR,EAAiB,UAAU,GAAV,EAAe;AAC9B,QAAI,IAAI,KAAR,EAAe;AACb,WAAK,eAAL;AACD;AACF,GAJD;AAKD;;AAED,eAAe,SAAf,CAAyB,OAAzB,GAAmC,SAAS,OAAT,GAAmB;AACpD,MAAI,OAAO,KAAK,KAAhB;;AAEA,MAAI,CAAC,IAAD,IAAS,KAAK,OAAlB,EAA2B;AACzB,WAAO,SAAP;AACD;;AAED,SAAO,KAAK,iBAAL,CAAuB,IAAvB,CAAP;AACD,CARD;;AAUA;AACA,eAAe,SAAf,CAAyB,QAAzB,GAAoC,WAAW,SAAX,CAAqB,GAAzD;;AAEA,eAAe,SAAf,CAAyB,GAAzB,GAA+B,YAAY;AACzC,UAAQ,IAAR,CAAa,0DAA0D,yDAA1D,GAAsH,+CAAtH,GAAwK,yBAArL;AACA,OAAK,OAAL;AACD,CAHD;;AAKA,eAAe,SAAf,CAAyB,OAAzB,GAAmC,YAAY;AAC7C,aAAW,SAAX,CAAqB,OAArB,CAA6B,KAA7B,CAAmC,IAAnC,EAAyC,SAAzC;AACA,OAAK,eAAL,CAAqB,IAArB;AACD,CAHD;;AAKA,eAAe,SAAf,CAAyB,eAAzB,GAA2C,SAAS,eAAT,GAA2B;AACpE,MAAI,CAAC,KAAK,KAAN,IAAe,KAAK,KAAL,CAAW,OAA9B,EAAuC;AACrC;AACD;;AAED,MAAI,OAAO,KAAK,KAAhB;AACA,OAAK,KAAL,GAAa,IAAb;;AAEA,OAAK,gBAAL,CAAsB,IAAtB;AACD,CATD;;AAWA","file":"PoolConnection-compiled-compiled.js","sourcesContent":["var inherits = require('util').inherits;\nvar Connection = require('./Connection');\nvar Events = require('events');\n\nmodule.exports = PoolConnection;\ninherits(PoolConnection, Connection);\n\nfunction PoolConnection(pool, options) {\n  Connection.call(this, options);\n  this._pool = pool;\n\n  // Bind connection to pool domain\n  if (Events.usingDomains) {\n    this.domain = pool.domain;\n  }\n\n  // When a fatal error occurs the connection's protocol ends, which will cause\n  // the connection to end as well, thus we only need to watch for the end event\n  // and we will be notified of disconnects.\n  this.on('end', this._removeFromPool);\n  this.on('error', function (err) {\n    if (err.fatal) {\n      this._removeFromPool();\n    }\n  });\n}\n\nPoolConnection.prototype.release = function release() {\n  var pool = this._pool;\n\n  if (!pool || pool._closed) {\n    return undefined;\n  }\n\n  return pool.releaseConnection(this);\n};\n\n// TODO: Remove this when we are removing PoolConnection#end\nPoolConnection.prototype._realEnd = Connection.prototype.end;\n\nPoolConnection.prototype.end = function () {\n  console.warn('Calling conn.end() to release a pooled connection is ' + 'deprecated. In next version calling conn.end() will be ' + 'restored to default conn.end() behavior. Use ' + 'conn.release() instead.');\n  this.release();\n};\n\nPoolConnection.prototype.destroy = function () {\n  Connection.prototype.destroy.apply(this, arguments);\n  this._removeFromPool(this);\n};\n\nPoolConnection.prototype._removeFromPool = function _removeFromPool() {\n  if (!this._pool || this._pool._closed) {\n    return;\n  }\n\n  var pool = this._pool;\n  this._pool = null;\n\n  pool._purgeConnection(this);\n};\n\n//# sourceMappingURL=PoolConnection-compiled.js.map"]}