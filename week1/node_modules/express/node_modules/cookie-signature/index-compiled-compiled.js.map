{"version":3,"sources":["index-compiled.js"],"names":[],"mappings":"AAAA;;;;AAIA,IAAI,SAAS,QAAQ,QAAR,CAAb;;AAEA;;;;;;;;;AASA,QAAQ,IAAR,GAAe,UAAU,GAAV,EAAe,MAAf,EAAuB;AACpC,MAAI,YAAY,OAAO,GAAvB,EAA4B,MAAM,IAAI,SAAJ,CAAc,4CAAd,CAAN;AAC5B,MAAI,YAAY,OAAO,MAAvB,EAA+B,MAAM,IAAI,SAAJ,CAAc,iCAAd,CAAN;AAC/B,SAAO,MAAM,GAAN,GAAY,OAAO,UAAP,CAAkB,QAAlB,EAA4B,MAA5B,EAAoC,MAApC,CAA2C,GAA3C,EAAgD,MAAhD,CAAuD,QAAvD,EAAiE,OAAjE,CAAyE,MAAzE,EAAiF,EAAjF,CAAnB;AACD,CAJD;;AAMA;;;;;;;;;;AAUA,QAAQ,MAAR,GAAiB,UAAU,GAAV,EAAe,MAAf,EAAuB;AACtC,MAAI,YAAY,OAAO,GAAvB,EAA4B,MAAM,IAAI,SAAJ,CAAc,wCAAd,CAAN;AAC5B,MAAI,YAAY,OAAO,MAAvB,EAA+B,MAAM,IAAI,SAAJ,CAAc,iCAAd,CAAN;AAC/B,MAAI,MAAM,IAAI,KAAJ,CAAU,CAAV,EAAa,IAAI,WAAJ,CAAgB,GAAhB,CAAb,CAAV;AAAA,MACI,MAAM,QAAQ,IAAR,CAAa,GAAb,EAAkB,MAAlB,CADV;;AAGA,SAAO,KAAK,GAAL,KAAa,KAAK,GAAL,CAAb,GAAyB,GAAzB,GAA+B,KAAtC;AACD,CAPD;;AASA;;;;AAIA,SAAS,IAAT,CAAc,GAAd,EAAmB;AACjB,SAAO,OAAO,UAAP,CAAkB,MAAlB,EAA0B,MAA1B,CAAiC,GAAjC,EAAsC,MAAtC,CAA6C,KAA7C,CAAP;AACD;;AAED","file":"index-compiled-compiled.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto');\n\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\nexports.sign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto.createHmac('sha256', secret).update(val).digest('base64').replace(/\\=+$/, '');\n};\n\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\nexports.unsign = function (val, secret) {\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.')),\n      mac = exports.sign(str, secret);\n\n  return sha1(mac) == sha1(val) ? str : false;\n};\n\n/**\n * Private\n */\n\nfunction sha1(str) {\n  return crypto.createHash('sha1').update(str).digest('hex');\n}\n\n//# sourceMappingURL=index-compiled.js.map"]}