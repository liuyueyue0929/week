{"version":3,"sources":["utils.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,QAAQ,QAAQ,cAAR,CAAZ;;AAEA,KAAK,SAAL,EAAgB,UAAU,CAAV,EAAa;AACzB,MAAE,SAAF,CAAY,MAAM,KAAN,CAAY,EAAE,GAAG,GAAL,EAAZ,EAAwB,EAAE,GAAG,GAAL,EAAxB,CAAZ,EAAiD,EAAE,GAAG,CAAC,GAAD,EAAM,GAAN,CAAL,EAAjD,EAAoE,sCAApE;;AAEA,QAAI,YAAY,MAAM,KAAN,CAAY,EAAE,KAAK,KAAP,EAAZ,EAA4B,EAAE,KAAK,EAAE,OAAO,KAAT,EAAP,EAA5B,CAAhB;AACA,MAAE,SAAF,CAAY,SAAZ,EAAuB,EAAE,KAAK,CAAC,KAAD,EAAQ,EAAE,OAAO,KAAT,EAAR,CAAP,EAAvB,EAA2D,iDAA3D;;AAEA,QAAI,YAAY,MAAM,KAAN,CAAY,EAAE,KAAK,CAAC,KAAD,EAAQ,EAAE,OAAO,KAAT,EAAR,CAAP,EAAZ,EAAgD,EAAE,KAAK,EAAE,QAAQ,KAAV,EAAP,EAAhD,CAAhB;AACA,MAAE,SAAF,CAAY,SAAZ,EAAuB,EAAE,KAAK,EAAE,GAAG,KAAL,EAAY,GAAG,EAAE,OAAO,KAAT,EAAf,EAAiC,QAAQ,KAAzC,EAAP,EAAvB,EAAkF,mDAAlF;;AAEA,QAAI,aAAa,MAAM,KAAN,CAAY,EAAE,KAAK,CAAC,KAAD,EAAQ,EAAE,OAAO,KAAT,EAAgB,QAAQ,KAAxB,EAAR,CAAP,EAAZ,EAA+D,EAAE,KAAK,KAAP,EAA/D,CAAjB;AACA,MAAE,SAAF,CAAY,UAAZ,EAAwB,EAAE,KAAK,CAAC,KAAD,EAAQ,EAAE,OAAO,KAAT,EAAgB,QAAQ,KAAxB,EAAR,EAAyC,KAAzC,CAAP,EAAxB,EAAkF,8DAAlF;;AAEA,QAAI,eAAe,MAAM,KAAN,CAAY,EAAE,KAAK,CAAC,KAAD,CAAP,EAAZ,EAA8B,EAAE,KAAK,CAAC,KAAD,EAAQ,OAAR,CAAP,EAA9B,CAAnB;AACA,MAAE,SAAF,CAAY,YAAZ,EAA0B,EAAE,KAAK,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAAP,EAA1B;;AAEA,MAAE,GAAF;AACH,CAhBD","file":"utils-compiled.js","sourcesContent":["'use strict';\n\nvar test = require('tape');\nvar utils = require('../lib/utils');\n\ntest('merge()', function (t) {\n    t.deepEqual(utils.merge({ a: 'b' }, { a: 'c' }), { a: ['b', 'c'] }, 'merges two objects with the same key');\n\n    var oneMerged = utils.merge({ foo: 'bar' }, { foo: { first: '123' } });\n    t.deepEqual(oneMerged, { foo: ['bar', { first: '123' }] }, 'merges a standalone and an object into an array');\n\n    var twoMerged = utils.merge({ foo: ['bar', { first: '123' }] }, { foo: { second: '456' } });\n    t.deepEqual(twoMerged, { foo: { 0: 'bar', 1: { first: '123' }, second: '456' } }, 'merges a standalone and two objects into an array');\n\n    var sandwiched = utils.merge({ foo: ['bar', { first: '123', second: '456' }] }, { foo: 'baz' });\n    t.deepEqual(sandwiched, { foo: ['bar', { first: '123', second: '456' }, 'baz'] }, 'merges an object sandwiched by two standalones into an array');\n\n    var nestedArrays = utils.merge({ foo: ['baz'] }, { foo: ['bar', 'xyzzy'] });\n    t.deepEqual(nestedArrays, { foo: ['baz', 'bar', 'xyzzy'] });\n\n    t.end();\n});\n"]}