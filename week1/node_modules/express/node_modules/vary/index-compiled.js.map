{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;AAIA,OAAO,OAAP,GAAiB,IAAjB;AACA,OAAO,OAAP,CAAe,MAAf,GAAwB,MAAxB;;AAEA;;;;;AAKA,IAAI,qBAAqB,OAAzB;;AAEA;;;;;;;;;;;AAWA,IAAI,oBAAoB,gCAAxB;;AAEA;;;;;;;;;AASA,SAAS,MAAT,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC;AAC9B,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAM,IAAI,SAAJ,CAAc,6BAAd,CAAN;AACD;;AAED,MAAI,CAAC,KAAL,EAAY;AACV,UAAM,IAAI,SAAJ,CAAc,4BAAd,CAAN;AACD;;AAED;AACA,MAAI,SAAS,CAAC,MAAM,OAAN,CAAc,KAAd,CAAD,GACT,MAAM,OAAO,KAAP,CAAN,CADS,GAET,KAFJ;;AAIA;AACA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,QAAI,CAAC,kBAAkB,IAAlB,CAAuB,OAAO,CAAP,CAAvB,CAAL,EAAwC;AACtC,YAAM,IAAI,SAAJ,CAAc,gDAAd,CAAN;AACD;AACF;;AAED;AACA,MAAI,WAAW,GAAf,EAAoB;AAClB,WAAO,MAAP;AACD;;AAED;AACA,MAAI,MAAM,MAAV;AACA,MAAI,OAAO,MAAM,OAAO,WAAP;;AAEjB;AAFW,GAAX,CAGA,IAAI,OAAO,OAAP,CAAe,GAAf,MAAwB,CAAC,CAAzB,IAA8B,KAAK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAzD,EAA4D;AAC1D,WAAO,GAAP;AACD;;AAED,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,QAAI,MAAM,OAAO,CAAP,EAAU;;AAEpB;AAFU,MAAV,CAGA,IAAI,KAAK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC5B,WAAK,IAAL,CAAU,GAAV;AACA,YAAM,MACF,MAAM,IAAN,GAAa,OAAO,CAAP,CADX,GAEF,OAAO,CAAP,CAFJ;AAGD;AACF;;AAED,SAAO,GAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,KAAT,CAAgB,MAAhB,EAAwB;AACtB,SAAO,OAAO,IAAP,GAAc,KAAd,CAAoB,kBAApB,CAAP;AACD;;AAED;;;;;;;;AAQA,SAAS,IAAT,CAAe,GAAf,EAAoB,KAApB,EAA2B;AACzB,MAAI,CAAC,GAAD,IAAQ,CAAC,IAAI,SAAb,IAA0B,CAAC,IAAI,SAAnC,EAA8C;AAC5C;AACA,UAAM,IAAI,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED;AACA,MAAI,MAAM,IAAI,SAAJ,CAAc,MAAd,KAAyB,EAAnC;AACA,MAAI,SAAS,MAAM,OAAN,CAAc,GAAd,IACT,IAAI,IAAJ,CAAS,IAAT,CADS,GAET,OAAO;;AAEX;AAFI,GAFJ,CAKA,IAAK,MAAM,OAAO,MAAP,EAAe,KAAf,CAAX,EAAmC;AACjC,QAAI,SAAJ,CAAc,MAAd,EAAsB,GAAtB;AACD;AACF","file":"index-compiled.js","sourcesContent":["/*!\n * vary\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n */\n\nmodule.exports = vary\nmodule.exports.append = append\n\n/**\n * Regular expression to split on commas, trimming spaces\n * @private\n */\n\nvar ARRAY_SPLIT_REGEXP = / *, */\n\n/**\n * RegExp to match field-name in RFC 7230 sec 3.2\n *\n * field-name    = token\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n */\n\nvar FIELD_NAME_REGEXP = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/\n\n/**\n * Append a field to a vary header.\n *\n * @param {String} header\n * @param {String|Array} field\n * @return {String}\n * @public\n */\n\nfunction append (header, field) {\n  if (typeof header !== 'string') {\n    throw new TypeError('header argument is required')\n  }\n\n  if (!field) {\n    throw new TypeError('field argument is required')\n  }\n\n  // get fields array\n  var fields = !Array.isArray(field)\n    ? parse(String(field))\n    : field\n\n  // assert on invalid field names\n  for (var j = 0; j < fields.length; j++) {\n    if (!FIELD_NAME_REGEXP.test(fields[j])) {\n      throw new TypeError('field argument contains an invalid header name')\n    }\n  }\n\n  // existing, unspecified vary\n  if (header === '*') {\n    return header\n  }\n\n  // enumerate current values\n  var val = header\n  var vals = parse(header.toLowerCase())\n\n  // unspecified vary\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\n    return '*'\n  }\n\n  for (var i = 0; i < fields.length; i++) {\n    var fld = fields[i].toLowerCase()\n\n    // append value (case-preserving)\n    if (vals.indexOf(fld) === -1) {\n      vals.push(fld)\n      val = val\n        ? val + ', ' + fields[i]\n        : fields[i]\n    }\n  }\n\n  return val\n}\n\n/**\n * Parse a vary header into an array.\n *\n * @param {String} header\n * @return {Array}\n * @private\n */\n\nfunction parse (header) {\n  return header.trim().split(ARRAY_SPLIT_REGEXP)\n}\n\n/**\n * Mark that a request is varied on a header field.\n *\n * @param {Object} res\n * @param {String|Array} field\n * @public\n */\n\nfunction vary (res, field) {\n  if (!res || !res.getHeader || !res.setHeader) {\n    // quack quack\n    throw new TypeError('res argument is required')\n  }\n\n  // get existing header\n  var val = res.getHeader('Vary') || ''\n  var header = Array.isArray(val)\n    ? val.join(', ')\n    : String(val)\n\n  // set new header\n  if ((val = append(header, field))) {\n    res.setHeader('Vary', val)\n  }\n}\n"]}