{"version":3,"sources":["index-compiled.js"],"names":[],"mappings":"AAAA;;;;;;;AAOA;;AAEA;;;;;AAKA,IAAI,QAAQ,QAAQ;;AAEpB;;;;;AAFY,CAAZ,CAOE,OAAO,OAAP,GAAiB,MAAjB;;AAEF;AACA,OAAO,KAAP,GAAe,oBAAoB,MAApB,EAA4B;;AAE3C;AAFe,CAAf,CAGE,OAAO,QAAP,GAAkB;AAClB,OAAK,IADa;AAElB,OAAK,IAFa;AAGlB,OAAK,IAHa;AAIlB,OAAK,IAJa;AAKlB,OAAK,IALa;AAMlB,OAAK,IANa;AAOlB,OAAK;;AAEL;AATkB,CAAlB,CAUA,OAAO,KAAP,GAAe;AACf,OAAK,IADU;AAEf,OAAK,IAFU;AAGf,OAAK;;AAEL;AALe,CAAf,CAMA,OAAO,KAAP,GAAe;AACf,OAAK,IADU;AAEf,OAAK,IAFU;AAGf,OAAK;;AAEL;;;;;AALe,CAAf,CAUA,SAAS,mBAAT,CAA6B,QAA7B,EAAuC,KAAvC,EAA8C;AAC9C,MAAI,MAAM,EAAV;;AAEA,SAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACpD,QAAI,UAAU,MAAM,IAAN,CAAd;AACA,QAAI,SAAS,OAAO;;AAEpB;AAFa,KAAb,CAGE,SAAS,MAAT,IAAmB,OAAnB;AACF,aAAS,OAAT,IAAoB,MAApB;AACA,aAAS,QAAQ,WAAR,EAAT,IAAkC,MAAlC;;AAEA;AACA,QAAI,IAAJ,CAAS,MAAT;AACD,GAXD;;AAaA,SAAO,GAAP;AACD;;AAED;;;;;;;;;;;;;;AAcA,SAAS,MAAT,CAAgB,IAAhB,EAAsB;AACpB,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAI,CAAC,OAAO,IAAP,CAAL,EAAmB,MAAM,IAAI,KAAJ,CAAU,0BAA0B,IAApC,CAAN;AACnB,WAAO,IAAP;AACD;;AAED,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAI,SAAJ,CAAc,iCAAd,CAAN;AACD;;AAED;AACA,MAAI,IAAI,SAAS,IAAT,EAAe,EAAf,CAAR;AACA,MAAI,CAAC,MAAM,CAAN,CAAL,EAAe;AACb,QAAI,CAAC,OAAO,CAAP,CAAL,EAAgB,MAAM,IAAI,KAAJ,CAAU,0BAA0B,CAApC,CAAN;AAChB,WAAO,CAAP;AACD;;AAED,MAAI,OAAO,KAAK,WAAL,EAAP,CAAJ;AACA,MAAI,CAAC,CAAL,EAAQ,MAAM,IAAI,KAAJ,CAAU,8BAA8B,IAA9B,GAAqC,GAA/C,CAAN;AACR,SAAO,CAAP;AACD;;AAED","file":"index-compiled-compiled.js","sourcesContent":["/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json'\n\n/**\n * Module exports.\n * @public\n */\n\n);module.exports = status;\n\n// array of status codes\nstatus.codes = populateStatusesMap(status, codes\n\n// status codes for redirects\n);status.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n\n  // status codes for empty bodies\n};status.empty = {\n  204: true,\n  205: true,\n  304: true\n\n  // status codes for when you should retry the request\n};status.retry = {\n  502: true,\n  503: true,\n  504: true\n\n  /**\n   * Populate the statuses map for given codes.\n   * @private\n   */\n\n};function populateStatusesMap(statuses, codes) {\n  var arr = [];\n\n  Object.keys(codes).forEach(function forEachCode(code) {\n    var message = codes[code];\n    var status = Number(code\n\n    // Populate properties\n    );statuses[status] = message;\n    statuses[message] = status;\n    statuses[message.toLowerCase()] = status;\n\n    // Add to array\n    arr.push(status);\n  });\n\n  return arr;\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status(code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code);\n    return code;\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string');\n  }\n\n  // '403'\n  var n = parseInt(code, 10);\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n);\n    return n;\n  }\n\n  n = status[code.toLowerCase()];\n  if (!n) throw new Error('invalid status message: \"' + code + '\"');\n  return n;\n}\n\n//# sourceMappingURL=index-compiled.js.map"]}